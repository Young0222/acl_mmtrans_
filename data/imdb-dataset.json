{
  "templates": [
    {
      "template": 1,
      "question": "What company produced the movie \" Juno \" ?",
      "aql": "FOR movie IN Movie FILTER movie.title == \"Juno\" FOR company IN 1 INBOUND movie Copyright FILTER IS_SAME_COLLECTION ( \"Company\", company ) RETURN company.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"Juno\" ; TRAVERSAL FOR company IN 1 INBOUND movie Copyright ; FILTER FILTER IS_SAME_COLLECTION ( \"Company\" , company ) ; RETURN RETURN company.name ;",
      "ecql": "SELECT company.name FROM company WHERE company.id = { MATCH (company:Company)-[r:Copyright]->(movie:Movie) WHERE movie.id = { SELECT movie.id FROM movie WHERE movie.title = 'Juno' } RETURN company.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'Juno' ; Project movie.id ; Match (company:Company)-[r:Copyright]->(movie:Movie) ; Filter movie.id = movie.id ; Return company.id ; TableScan company ; Filter company.id = company.id ; Project company.name ; ",
      "sqlpp": "SELECT company.name FROM ( MATCH {class: Company, as: company}.outE('Copyright') {as: r}.inV('Movie') {as: movie, where: (title = 'Juno')} RETURN company )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Company company ; Traversal OUT Copyright r ; Traversal IN Movie movie (title = 'Juno') ; Return company ; Project company.name ; ",
      "result_aql": ["Fox Searchlight Pictures", "Mandate Pictures", "Mr. Mudd"],
      "result_count_aql": 3,
      "result_ecql": ["Fox Searchlight Pictures", "Mandate Pictures", "Mr. Mudd"],
      "result_count_ecql": 3,
      "result_sqlpp": ["Fox Searchlight Pictures", "Mandate Pictures", "Mr. Mudd"],
      "result_count_sqlpp": 3
    },
    {
      "template": 2,
      "question": "Find all actors who were born in 1984",
      "aql": "FOR actor IN Actor FILTER actor.birth_year == 1984 RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.birth_year == 1984 ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.birth_year = 1984",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_year = 1984 ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM actor WHERE actor.birth_year = 1984",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_year = 1984 ; Project actor.name ; ",
      "result_aql": "[]",
      "result_count_aql": 3244,
      "result_ecql": "[]",
      "result_count_ecql": 3244,
      "result_sqlpp": "[]",
      "result_count_sqlpp": 3244
    },
    {
      "template": 3,
      "question": "Who are the actors born in \" New York City \" after 1990 ?",
      "aql": "FOR actor IN Actor FILTER actor.birth_city == \"New York City\" AND actor.birth_year > 1990 RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.birth_city == \"New York City\" AND actor.birth_year > 1990 ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.birth_city = 'New York City' AND actor.birth_year > 1990",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_city = 'New York City' AND actor.birth_year > 1990 ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM actor WHERE actor.birth_city = 'New York City' AND actor.birth_year > 1990",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_city = 'New York City' AND actor.birth_year > 1990 ; Project actor.name ; ",
      "result_aql": ["Aaron Refvem", "Abigail Breslin", "Adam Turkel", "Alex Wolff", "Alexander Goebbel", "Alexander Mercier", "Ali Lohan", "Allegra Leguizamo", "Amoni B.", "Anthony Del Negro", "Antonio Ortiz", "Ashley Gerasimovich", "Azealia Banks", "Beckett Melville", "Ben Matusow", "Blair Dinucci", "Brian Gilbert", "Cadence Lux", "Calista Hill", "Charlie Ray", "Chelsea Harkins", "Christopher Jordan Wallace", "Clifford Lee Dickson", "Cody Lohan", "Cole Hawkins", "Conor Carroll", "Daniel Tay", "Dave Jia", "David Benger", "David Levi", "Derek Binsack", "Diego Z. Turturro", "Dylan O'Brien", "Elena Kampouris", "Emily Robinson", "Eric Grossfeld", "Eric Wilke", "Francesca Chaney", "Gabriel-Kane Day Lewis", "Gabriela Aisenberg", "Gabriella Hill", "Gone Thursday", "Grace Dunham", "Gracie Sbarge", "Greta Kline", "Gus Lewis", "Harrison Chad", "Ian Hyland", "India Ennenga", "Isaac Jin Solstein", "Jack Rovello", "Jacob Kogan", "Jacob Maren", "Jake T. Austin", "Jamie Dolan", "Jeremy Fernandez", "Jessica Cherniak", "Jesus Padilla", "Jonah Bobo", "Jonah Meyerson", "Jordan Burt", "Julia Garner", "Katherine Rose Riley", "Kayla Maisonet", "Kianna Underwood", "Larry Sulner", "Leanna Archer", "Leo Lungaro", "Leon Thomas III", "Leopold Manswell", "Liam Broggy", "Lucas Leguizamo", "Lucien Flores", "Lydia Jordan", "Madeline Hill", "Mandy Leon", "Marc Mandeville", "Marlene Artov", "Matt Kempner", "Maya N. Blake", "Melissa Amber", "Michael Christopher Rodney", "Michael Oliver", "Michaela McPherson", "Milan Coyula", "Miles Chandler", "Miles Robbins", "Moises Arias", "Neel Sethi", "Nicholas Merkerson", "Nicole Patrick", "Nicolette Pierini", "Nolan Gould", "Olivia Brown", "Owen Kline", "Paulina Gerzon", "Pete Davidson", "Rachel Covey", "Raquel Castro", "Richard Switzer", "Ruby Jerins", "Saoirse Ronan", "Scarlett Sperduto", "Scott P. Sasso", "Seamus Davey-Fitzpatrick", "Serena Kerrigan", "Shelby O'Connell", "Sheryl Lipuma", "Skai Jackson", "Spencer Breslin", "Spencer Scott", "Stanley Nallem", "Stephanie Thiel", "Sterling Jerins", "Tatsumi Romano", "Taylor Dior", "Taylor Patterson", "Tiffany Evans", "Timothy McCartney", "Tre C. Roberts", "Tyler Silvers", "Ursula Parker", "Vinny Alfano", "Wyntergrace Williams", "Zach Cumer", "Zachary Clarke", "Zuher Khan"],
      "result_count_aql": 127,
      "result_ecql": ["Aaron Refvem", "Abigail Breslin", "Adam Turkel", "Alex Wolff", "Alexander Goebbel", "Alexander Mercier", "Ali Lohan", "Allegra Leguizamo", "Amoni B.", "Anthony Del Negro", "Antonio Ortiz", "Ashley Gerasimovich", "Azealia Banks", "Beckett Melville", "Ben Matusow", "Blair Dinucci", "Brian Gilbert", "Cadence Lux", "Calista Hill", "Charlie Ray", "Chelsea Harkins", "Christopher Jordan Wallace", "Clifford Lee Dickson", "Cody Lohan", "Cole Hawkins", "Conor Carroll", "Daniel Tay", "Dave Jia", "David Benger", "David Levi", "Derek Binsack", "Diego Z. Turturro", "Dylan O'Brien", "Elena Kampouris", "Emily Robinson", "Eric Grossfeld", "Eric Wilke", "Francesca Chaney", "Gabriel-Kane Day Lewis", "Gabriela Aisenberg", "Gabriella Hill", "Gone Thursday", "Grace Dunham", "Gracie Sbarge", "Greta Kline", "Gus Lewis", "Harrison Chad", "Ian Hyland", "India Ennenga", "Isaac Jin Solstein", "Jack Rovello", "Jacob Kogan", "Jacob Maren", "Jake T. Austin", "Jamie Dolan", "Jeremy Fernandez", "Jessica Cherniak", "Jesus Padilla", "Jonah Bobo", "Jonah Meyerson", "Jordan Burt", "Julia Garner", "Katherine Rose Riley", "Kayla Maisonet", "Kianna Underwood", "Larry Sulner", "Leanna Archer", "Leo Lungaro", "Leon Thomas III", "Leopold Manswell", "Liam Broggy", "Lucas Leguizamo", "Lucien Flores", "Lydia Jordan", "Madeline Hill", "Mandy Leon", "Marc Mandeville", "Marlene Artov", "Matt Kempner", "Maya N. Blake", "Melissa Amber", "Michael Christopher Rodney", "Michael Oliver", "Michaela McPherson", "Milan Coyula", "Miles Chandler", "Miles Robbins", "Moises Arias", "Neel Sethi", "Nicholas Merkerson", "Nicole Patrick", "Nicolette Pierini", "Nolan Gould", "Olivia Brown", "Owen Kline", "Paulina Gerzon", "Pete Davidson", "Rachel Covey", "Raquel Castro", "Richard Switzer", "Ruby Jerins", "Saoirse Ronan", "Scarlett Sperduto", "Scott P. Sasso", "Seamus Davey-Fitzpatrick", "Serena Kerrigan", "Shelby O'Connell", "Sheryl Lipuma", "Skai Jackson", "Spencer Breslin", "Spencer Scott", "Stanley Nallem", "Stephanie Thiel", "Sterling Jerins", "Tatsumi Romano", "Taylor Dior", "Taylor Patterson", "Tiffany Evans", "Timothy McCartney", "Tre C. Roberts", "Tyler Silvers", "Ursula Parker", "Vinny Alfano", "Wyntergrace Williams", "Zach Cumer", "Zachary Clarke", "Zuher Khan"],
      "result_count_ecql": 127,
      "result_sqlpp": ["Aaron Refvem", "Abigail Breslin", "Adam Turkel", "Alex Wolff", "Alexander Goebbel", "Alexander Mercier", "Ali Lohan", "Allegra Leguizamo", "Amoni B.", "Anthony Del Negro", "Antonio Ortiz", "Ashley Gerasimovich", "Azealia Banks", "Beckett Melville", "Ben Matusow", "Blair Dinucci", "Brian Gilbert", "Cadence Lux", "Calista Hill", "Charlie Ray", "Chelsea Harkins", "Christopher Jordan Wallace", "Clifford Lee Dickson", "Cody Lohan", "Cole Hawkins", "Conor Carroll", "Daniel Tay", "Dave Jia", "David Benger", "David Levi", "Derek Binsack", "Diego Z. Turturro", "Dylan O'Brien", "Elena Kampouris", "Emily Robinson", "Eric Grossfeld", "Eric Wilke", "Francesca Chaney", "Gabriel-Kane Day Lewis", "Gabriela Aisenberg", "Gabriella Hill", "Gone Thursday", "Grace Dunham", "Gracie Sbarge", "Greta Kline", "Gus Lewis", "Harrison Chad", "Ian Hyland", "India Ennenga", "Isaac Jin Solstein", "Jack Rovello", "Jacob Kogan", "Jacob Maren", "Jake T. Austin", "Jamie Dolan", "Jeremy Fernandez", "Jessica Cherniak", "Jesus Padilla", "Jonah Bobo", "Jonah Meyerson", "Jordan Burt", "Julia Garner", "Katherine Rose Riley", "Kayla Maisonet", "Kianna Underwood", "Larry Sulner", "Leanna Archer", "Leo Lungaro", "Leon Thomas III", "Leopold Manswell", "Liam Broggy", "Lucas Leguizamo", "Lucien Flores", "Lydia Jordan", "Madeline Hill", "Mandy Leon", "Marc Mandeville", "Marlene Artov", "Matt Kempner", "Maya N. Blake", "Melissa Amber", "Michael Christopher Rodney", "Michael Oliver", "Michaela McPherson", "Milan Coyula", "Miles Chandler", "Miles Robbins", "Moises Arias", "Neel Sethi", "Nicholas Merkerson", "Nicole Patrick", "Nicolette Pierini", "Nolan Gould", "Olivia Brown", "Owen Kline", "Paulina Gerzon", "Pete Davidson", "Rachel Covey", "Raquel Castro", "Richard Switzer", "Ruby Jerins", "Saoirse Ronan", "Scarlett Sperduto", "Scott P. Sasso", "Seamus Davey-Fitzpatrick", "Serena Kerrigan", "Shelby O'Connell", "Sheryl Lipuma", "Skai Jackson", "Spencer Breslin", "Spencer Scott", "Stanley Nallem", "Stephanie Thiel", "Sterling Jerins", "Tatsumi Romano", "Taylor Dior", "Taylor Patterson", "Tiffany Evans", "Timothy McCartney", "Tre C. Roberts", "Tyler Silvers", "Ursula Parker", "Vinny Alfano", "Wyntergrace Williams", "Zach Cumer", "Zachary Clarke", "Zuher Khan"],
      "result_count_sqlpp": 127
    },
    {
      "template": 4,
      "question": "Find all movies about Autism",
      "aql": "FOR keyword IN Keyword FILTER CONTAINS(keyword.keyword, \"autism\") FOR movie IN 1 INBOUND keyword Tags FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR keyword IN Keyword ; FILTER FILTER CONTAINS ( keyword.keyword , \"autism\" ) ; TRAVERSAL FOR movie IN 1 INBOUND keyword Tags ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.keyword @> '[\"autism\"]'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.keyword @> '[\"autism\"]' ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM movie WHERE movie.keyword CONTAINS 'autism'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.keyword CONTAINS 'autism' ; Project movie.title ; ",
      "result_aql": "[]",
      "result_count_aql": 284,
      "result_ecql": "[]",
      "result_count_ecql": 284,
      "result_sqlpp": "[]",
      "result_count_sqlpp": 284
    },
    {
      "template": 5,
      "question": "How many movies did \" Quentin Tarantino \" direct before 2010 ?",
      "aql": "FOR director IN Director FILTER director.name == \"Quentin Tarantino\" FOR movie IN 1 INBOUND director DirectedBy FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FILTER movie.release_year < 2010 COLLECT WITH COUNT INTO cnt RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR director IN Director ; FILTER FILTER director.name == \"Quentin Tarantino\" ; TRAVERSAL FOR movie IN 1 INBOUND director DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; FILTER FILTER movie.release_year < 2010 ; AGGREGATE COLLECT WITH COUNT INTO cnt ; RETURN RETURN cnt ;",
      "ecql": "SELECT COUNT (*) AS cnt FROM movie WHERE movie.id = { MATCH (movie:Movie)-[r:DirectedBy]->(director:Director) WHERE director.id = { SELECT director.id FROM director WHERE director.name = 'Quentin Tarantino' } RETURN movie.id } AND movie.release_year < 2010",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan director ; Filter director.name = 'Quentin Tarantino' ; Project director.id ; Match (movie:Movie)-[r:DirectedBy]->(director:Director) ; Filter director.id = director.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id AND movie.release_year < 2010 ; Project COUNT ( * ) AS cnt ; ",
      "sqlpp": "SELECT COUNT(*) FROM ( MATCH {class: Movie, as: movie, where: (release_year < 2010)}.outE('DirectedBy').inV('Director') {as: director, where: (name = 'Quentin Tarantino')} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Movie movie (release_year < 2010) ; Traversal OUT DirectedBy ; Traversal IN Director director (name = 'Quentin Tarantino') ; Return movie ; Project COUNT ( * ) ; ",
      "result_aql": ["13"],
      "result_count_aql": 1,
      "result_ecql": ["13"],
      "result_count_ecql": 1,
      "result_sqlpp": ["13"],
      "result_count_sqlpp": 1
    },
    {
      "template": 6,
      "question": "Find all comedies produced in year 2015",
      "aql": "FOR genre IN Genre FILTER genre.genre == \"Comedy\" FOR movie IN 1 INBOUND genre Classification FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FILTER movie.release_year == 2015 RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR genre IN Genre ; FILTER FILTER genre.genre == \"Comedy\" ; TRAVERSAL FOR movie IN 1 INBOUND genre Classification ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; FILTER FILTER movie.release_year == 2015 ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.genre @> '[\"Comedy\"]' AND movie.release_year = 2015",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.genre @> '[\"Comedy\"]' AND movie.release_year = 2015 ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM movie WHERE movie.genre CONTAINS 'Comedy' AND movie.release_year = 2015",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.genre CONTAINS 'Comedy' AND movie.release_year = 2015 ; Project movie.title ; ",
      "result_aql": "[]",
      "result_count_aql": 12570,
      "result_ecql": "[]",
      "result_count_ecql": 12570,
      "result_sqlpp": "[]",
      "result_count_sqlpp": 12570
    },
    {
      "template": 7,
      "question": "which movie has the most number of actors from China ?",
      "aql": "FOR actor IN Actor FILTER actor.nationality == \"China\" FOR movie IN 1 OUTBOUND actor Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) COLLECT m = movie WITH COUNT INTO cnt SORT cnt DESC LIMIT 1 RETURN m.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; AGGREGATE _ ; SORT _ ; LIMIT _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.nationality == \"China\" ; TRAVERSAL FOR movie IN 1 OUTBOUND actor Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; AGGREGATE COLLECT m = movie WITH COUNT INTO cnt ; SORT SORT cnt DESC ; LIMIT LIMIT 1 ; RETURN RETURN m.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE actor.id = { SELECT actor.id FROM actor WHERE actor.nationality = 'China' } WITH movie.id AS movie_id, COUNT (actor) AS cnt RETURN movie_id ORDER BY cnt DESC LIMIT 1 }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ With _ Return _ OrderBy _ Limit _ TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.nationality = 'China' ; Project actor.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter actor.id = actor.id ; With movie.id AS movie_id COUNT ( actor ) AS cnt ; Return movie_id ; OrderBy cnt DESC ; Limit 1 ; TableScan movie ; Filter movie.id = movie.id ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM ( SELECT movie.title, COUNT(actor) AS cnt FROM ( MATCH {class: Actor, as: actor, where: (nationality = 'China')}.outE('Cast') {as: r}.inV('Movie') {as: movie} RETURN movie, actor ) GROUP BY movie ORDER BY cnt DESC LIMIT 1 )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ GroupBy _ OrderBy _ Limit _ Project _ Project _ | Match Actor actor (nationality = 'China') ; Traversal OUT Cast r ; Traversal IN Movie movie ; Return movie actor ; GroupBy movie ; OrderBy cnt DESC ; Limit 1 ; Project movie.title COUNT ( actor ) AS cnt ; Project movie.title ; ",
      "result_aql": ["Jian dang wei ye"],
      "result_count_aql": 1,
      "result_ecql": ["Jian dang wei ye"],
      "result_count_ecql": 1,
      "result_sqlpp": ["Jian dang wei ye"],
      "result_count_sqlpp": 1
    },
    {
      "template": 8,
      "question": "When was \" Kevin Spacey \" born ?",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Kevin Spacey\" RETURN actor.birth_year",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Kevin Spacey\" ; RETURN RETURN actor.birth_year ;",
      "ecql": "SELECT actor.birth_year FROM actor WHERE actor.name = 'Kevin Spacey'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Kevin Spacey' ; Project actor.birth_year ; ",
      "sqlpp": "SELECT actor.birth_year FROM actor WHERE actor.name = 'Kevin Spacey'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Kevin Spacey' ; Project actor.birth_year ; ",
      "result_aql": ["1959"],
      "result_count_aql": 1,
      "result_ecql": ["1959"],
      "result_count_ecql": 1,
      "result_sqlpp": ["1959"],
      "result_count_sqlpp": 1
    },
    {
      "template": 9,
      "question": "Find all movies featuring \" Kate Winslet \"",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Kate Winslet\" FOR movie IN 1 OUTBOUND actor Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Kate Winslet\" ; TRAVERSAL FOR movie IN 1 OUTBOUND actor Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE actor.id = { SELECT actor.id FROM actor WHERE actor.name = 'Kate Winslet' } RETURN movie.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Kate Winslet' ; Project actor.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter actor.id = actor.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM ( MATCH {class: Actor, as: actor, where: (name = 'Kate Winslet')}.outE('Cast') {as: r}.inV('Movie') {as: movie} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor (name = 'Kate Winslet') ; Traversal OUT Cast r ; Traversal IN Movie movie ; Return movie ; Project movie.title ; ",
      "result_aql": ["11th Annual Screen Actors Guild Awards", "11th Annual Screen Actors Guild Awards", "15th Annual Screen Actors Guild Awards", "22nd Annual Screen Actors Guild Awards", "73rd Golden Globe Awards", "A Kid in King Arthur's Court", "A Little Chaos", "A Look Inside 'Eternal Sunshine of the Spotless Mind'", "Bambi Verleihung 2009", "Boffo! Tinseltown's Bombs and Blockbusters", "Cinema of Unease: A Personal Journey by Sam Neill", "Cleanflix", "Contagion", "Deep Sea", "Enigma", "Eternal Sunshine of the Spotless Mind", "Faeries", "Finding Neverland", "Heavenly Creatures", "Iris", "Jude", "Revolutionary Road", "Sense and Sensibility", "Snow Chick: A Penguin's Tale", "The 10th Annual Critics' Choice Awards", "The 16th Annual Gotham Awards", "The 2009 European Film Awards", "The 49th Bafta Awards", "The 53rd Annual Golden Globe Awards", "The 55th Annual Golden Globe Awards", "The 59th Annual Golden Globe Awards", "The 62nd Annual Golden Globe Awards", "The 63rd Primetime Emmy Awards", "The 64th Annual Golden Globe Awards", "The 66th Annual Golden Globe Awards", "The 67th Annual Golden Globe Awards", "The 68th Annual Academy Awards", "The 69th Annual Golden Globe Awards", "The 70th Annual Academy Awards", "The 74th Annual Academy Awards", "The 77th Annual Academy Awards", "The 79th Annual Academy Awards", "The 81st Annual Academy Awards", "The 82nd Annual Academy Awards", "The Dressmaker", "The EE British Academy Film Awards", "The Life of David Gale", "The Orange British Academy Film Awards", "The Oscars", "The Reader", "Titanic", "Triple 9", "Twentieth Century Fox: The Blockbuster Years"],
      "result_count_aql": 52,
      "result_ecql": ["11th Annual Screen Actors Guild Awards", "15th Annual Screen Actors Guild Awards", "22nd Annual Screen Actors Guild Awards", "73rd Golden Globe Awards", "A Kid in King Arthur's Court", "A Little Chaos", "A Look Inside 'Eternal Sunshine of the Spotless Mind'", "Bambi Verleihung 2009", "Boffo! Tinseltown's Bombs and Blockbusters", "Cinema of Unease: A Personal Journey by Sam Neill", "Cleanflix", "Contagion", "Deep Sea", "Enigma", "Eternal Sunshine of the Spotless Mind", "Faeries", "Finding Neverland", "Heavenly Creatures", "Iris", "Jude", "Revolutionary Road", "Sense and Sensibility", "Snow Chick: A Penguin's Tale", "The 10th Annual Critics' Choice Awards", "The 16th Annual Gotham Awards", "The 2009 European Film Awards", "The 49th Bafta Awards", "The 53rd Annual Golden Globe Awards", "The 55th Annual Golden Globe Awards", "The 59th Annual Golden Globe Awards", "The 62nd Annual Golden Globe Awards", "The 63rd Primetime Emmy Awards", "The 64th Annual Golden Globe Awards", "The 66th Annual Golden Globe Awards", "The 67th Annual Golden Globe Awards", "The 68th Annual Academy Awards", "The 69th Annual Golden Globe Awards", "The 70th Annual Academy Awards", "The 74th Annual Academy Awards", "The 77th Annual Academy Awards", "The 79th Annual Academy Awards", "The 81st Annual Academy Awards", "The 82nd Annual Academy Awards", "The Dressmaker", "The EE British Academy Film Awards", "The Life of David Gale", "The Orange British Academy Film Awards", "The Oscars", "The Reader", "Titanic", "Triple 9", "Twentieth Century Fox: The Blockbuster Years"],
      "result_count_ecql": 52,
      "result_sqlpp": ["11th Annual Screen Actors Guild Awards", "15th Annual Screen Actors Guild Awards", "22nd Annual Screen Actors Guild Awards", "73rd Golden Globe Awards", "A Kid in King Arthur's Court", "A Little Chaos", "A Look Inside 'Eternal Sunshine of the Spotless Mind'", "Bambi Verleihung 2009", "Boffo! Tinseltown's Bombs and Blockbusters", "Cinema of Unease: A Personal Journey by Sam Neill", "Cleanflix", "Contagion", "Deep Sea", "Enigma", "Eternal Sunshine of the Spotless Mind", "Faeries", "Finding Neverland", "Heavenly Creatures", "Iris", "Jude", "Revolutionary Road", "Sense and Sensibility", "Snow Chick: A Penguin's Tale", "The 10th Annual Critics' Choice Awards", "The 16th Annual Gotham Awards", "The 2009 European Film Awards", "The 49th Bafta Awards", "The 53rd Annual Golden Globe Awards", "The 55th Annual Golden Globe Awards", "The 59th Annual Golden Globe Awards", "The 62nd Annual Golden Globe Awards", "The 63rd Primetime Emmy Awards", "The 64th Annual Golden Globe Awards", "The 66th Annual Golden Globe Awards", "The 67th Annual Golden Globe Awards", "The 68th Annual Academy Awards", "The 69th Annual Golden Globe Awards", "The 70th Annual Academy Awards", "The 74th Annual Academy Awards", "The 77th Annual Academy Awards", "The 79th Annual Academy Awards", "The 81st Annual Academy Awards", "The 82nd Annual Academy Awards", "The Dressmaker", "The EE British Academy Film Awards", "The Life of David Gale", "The Orange British Academy Film Awards", "The Oscars", "The Reader", "Titanic", "Triple 9", "Twentieth Century Fox: The Blockbuster Years"],
      "result_count_sqlpp": 52
    },
    {
      "template": 10,
      "question": "Give me the name of all the actors from Afghanistan",
      "aql": "FOR actor IN Actor FILTER actor.nationality == \"Afghanistan\" RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.nationality == \"Afghanistan\" ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.nationality = 'Afghanistan'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.nationality = 'Afghanistan' ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM actor WHERE actor.nationality = 'Afghanistan'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.nationality = 'Afghanistan' ; Project actor.name ; ",
      "result_aql": ["Ahmad Khan Mahmoodzada", "Ahmad Shah Massoud", "Ali Olomi", "Baktash Zaher", "Burhanuddin Rabbani", "Ehsan Aman", "Fahim Fazli", "Fereshta Kazemi", "Gulbuddin Hekmatyar", "Hamid Karzai", "Hashmat Khan", "Jem Cohen", "Khaled Hosseini", "Marina Golbahari", "Moniere", "Muhammed Cangören", "Mustafa Haidari", "NiNa", "Rangeela", "Sabiullah Anwar", "Shaima Rezayee", "Soraya Wilkinson-Wyke", "Wali Razaqi", "Yalda", "Zekeria Ebrahimi"],
      "result_count_aql": 25,
      "result_ecql": ["Ahmad Khan Mahmoodzada", "Ahmad Shah Massoud", "Ali Olomi", "Baktash Zaher", "Burhanuddin Rabbani", "Ehsan Aman", "Fahim Fazli", "Fereshta Kazemi", "Gulbuddin Hekmatyar", "Hamid Karzai", "Hashmat Khan", "Jem Cohen", "Khaled Hosseini", "Marina Golbahari", "Moniere", "Muhammed Cangören", "Mustafa Haidari", "NiNa", "Rangeela", "Sabiullah Anwar", "Shaima Rezayee", "Soraya Wilkinson-Wyke", "Wali Razaqi", "Yalda", "Zekeria Ebrahimi"],
      "result_count_ecql": 25,
      "result_sqlpp": ["Ahmad Khan Mahmoodzada", "Ahmad Shah Massoud", "Ali Olomi", "Baktash Zaher", "Burhanuddin Rabbani", "Ehsan Aman", "Fahim Fazli", "Fereshta Kazemi", "Gulbuddin Hekmatyar", "Hamid Karzai", "Hashmat Khan", "Jem Cohen", "Khaled Hosseini", "Marina Golbahari", "Moniere", "Muhammed Cangören", "Mustafa Haidari", "NiNa", "Rangeela", "Sabiullah Anwar", "Shaima Rezayee", "Soraya Wilkinson-Wyke", "Wali Razaqi", "Yalda", "Zekeria Ebrahimi"],
      "result_count_sqlpp": 25
    },
    {
      "template": 11,
      "question": "Find all movies directed by \" Steven Spielberg \" after 2006",
      "aql": "FOR director IN Director FILTER director.name == \"Steven Spielberg\" FOR movie IN 1 INBOUND director DirectedBy FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FILTER movie.release_year > 2006 RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR director IN Director ; FILTER FILTER director.name == \"Steven Spielberg\" ; TRAVERSAL FOR movie IN 1 INBOUND director DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; FILTER FILTER movie.release_year > 2006 ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (movie:Movie)-[r:DirectedBy]->(director:Director) WHERE director.id = { SELECT director.id FROM director WHERE director.name = 'Steven Spielberg' } RETURN movie.id } AND movie.release_year > 2006",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan director ; Filter director.name = 'Steven Spielberg' ; Project director.id ; Match (movie:Movie)-[r:DirectedBy]->(director:Director) ; Filter director.id = director.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id AND movie.release_year > 2006 ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM ( MATCH {class: Movie, as: movie, where: (release_year > 2006)}.outE('DirectedBy') {as: r}.inV('Director') {as: director, where: (name = 'Steven Spielberg')} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Movie movie (release_year > 2006) ; Traversal OUT DirectedBy r ; Traversal IN Director director (name = 'Steven Spielberg') ; Return movie ; Project movie.title ; ",
      "result_aql": ["A Timeless Call", "Bridge of Spies", "Indiana Jones 5", "Indiana Jones and the Kingdom of the Crystal Skull", "Lincoln", "Ready Player One", "The Adventures of Tintin", "The BFG", "The Kidnapping of Edgardo Mortara", "War Horse"],
      "result_count_aql": 10,
      "result_ecql": ["A Timeless Call", "Bridge of Spies", "Indiana Jones 5", "Indiana Jones and the Kingdom of the Crystal Skull", "Lincoln", "Ready Player One", "The Adventures of Tintin", "The BFG", "The Kidnapping of Edgardo Mortara", "War Horse"],
      "result_count_ecql": 10,
      "result_sqlpp": ["A Timeless Call", "Bridge of Spies", "Indiana Jones 5", "Indiana Jones and the Kingdom of the Crystal Skull", "Lincoln", "Ready Player One", "The Adventures of Tintin", "The BFG", "The Kidnapping of Edgardo Mortara", "War Horse"],
      "result_count_sqlpp": 10
    },
    {
      "template": 12,
      "question": "Who is directed the latest movie by \" NBC Universal \"",
      "aql": "FOR company IN Company FILTER company.name == \"NBC Universal\" FOR movie IN 1 OUTBOUND company Copyright FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) SORT movie.release_year DESC LIMIT 1 FOR director IN 1 OUTBOUND movie DirectedBy FILTER IS_SAME_COLLECTION ( \"Director\", director ) RETURN director.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; SORT _ ; LIMIT _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR company IN Company ; FILTER FILTER company.name == \"NBC Universal\" ; TRAVERSAL FOR movie IN 1 OUTBOUND company Copyright ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; SORT SORT movie.release_year DESC ; LIMIT LIMIT 1 ; TRAVERSAL FOR director IN 1 OUTBOUND movie DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Director\" , director ) ; RETURN RETURN director.name ;",
      "ecql": "SELECT director.name FROM director, movie, { MATCH (movie:Movie)-[:DirectedBy]->(director:Director), (company:Company)-[:Copyright]->(movie:Movie) WHERE company.id = { SELECT company.id FROM company WHERE company.name = 'NBC Universal' } RETURN director.id AS director_id, movie.id AS movie_id } AS graph WHERE director.id = graph.director_id AND movie.id = graph.movie_id ORDER BY movie.release_year DESC LIMIT 1",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ TableScan _ Filter _ Filter _ OrderBy _ Limit _ Project _ | TableScan company ; Filter company.name = 'NBC Universal' ; Project company.id ; Match (movie:Movie)-[:DirectedBy]->(director:Director), (company:Company)-[:Copyright]->(movie:Movie) ; Filter company.id = company.id ; Return director.id, movie.id ; TableScan director ; TableScan movie ; Filter director.id = director.id ; Filter movie.id = movie.id ; OrderBy movie.release_year DESC ; Limit 1 ; Project director.name ;",
      "sqlpp": "SELECT director.name FROM (MATCH {class: Company, as: company, where: (name = 'NBC Universal')}.outE('Copyright') {as: r}.inV('Movie') {as: movie}.outE('DirectedBy') {as: r}.inV('Director') {as: director} RETURN movie, director ) ORDER BY movie.release_year DESC LIMIT 1",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Traversal _ Traversal _ Return _ OrderBy _ Limit _ Project _ | Match Company company (name = 'NBC Universal') ; Traversal OUT Copyright r ; Traversal IN Movie movie ; Traversal OUT DirectedBy r ; Traversal IN Director director ; Return movie director ; OrderBy movie.release_year DESC ; Limit 1 ; Project director.name ; ",
      "result_aql": ["David Hare", "Sir David Hare"],
      "result_count_aql": 2,
      "result_ecql": ["David Hare", "Sir David Hare"],
      "result_count_ecql": 2,
      "result_sqlpp": ["David Hare", "Sir David Hare"],
      "result_count_sqlpp": 2
    },
    {
      "template": 13,
      "question": "find the number of actors from Iran who played in \" Jim Jarmusch \" movies",
      "aql": "FOR director IN Director FILTER director.name == \"Jim Jarmusch\" FOR movie IN 1 INBOUND director DirectedBy FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FOR actor IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor ) FILTER actor.nationality == \"Iran\" COLLECT WITH COUNT INTO cnt RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR director IN Director ; FILTER FILTER director.name == \"Jim Jarmusch\" ; TRAVERSAL FOR movie IN 1 INBOUND director DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; TRAVERSAL FOR actor IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor ) ; FILTER FILTER actor.nationality == \"Iran\" ; AGGREGATE COLLECT WITH COUNT INTO cnt ; RETURN RETURN cnt ;",
      "ecql": "SELECT COUNT (*) AS cnt FROM actor WHERE actor.id = { MATCH (actor:Actor)-[:Cast]->(movie:Movie), (movie:Movie)-[:DirectedBy]->(director:Director) WHERE director.id = { SELECT director.id FROM director WHERE director.name = 'Jim Jarmusch' } RETURN actor.id } AND actor.nationality = 'Iran'",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan director ; Filter director.name = 'Jim Jarmusch' ; Project director.id ; Match (actor:Actor)-[:Cast]->(movie:Movie), (movie:Movie)-[:DirectedBy]->(director:Director) ; Filter director.id = director.id ; Return actor.id ; TableScan actor ; Filter actor.id = actor.id AND actor.nationality = 'Iran' ; Project COUNT ( * ) AS cnt ; ",
      "sqlpp": "SELECT COUNT(*) FROM ( MATCH {class: Actor, as: actor, where: (nationality = 'Iran')}.outE('Cast').inV('Movie') {as: movie}.outE('DirectedBy').inV('Director') {as: director, where: (name = 'Jim Jarmusch')} RETURN actor )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor (nationality = 'Iran') ; Traversal OUT Cast ; Traversal IN Movie movie ; Traversal OUT DirectedBy ; Traversal IN Director director (name = 'Jim Jarmusch') ; Return actor ; Project COUNT ( * ) ; ",
      "result_aql": ["0"],
      "result_count_aql": 1,
      "result_ecql": ["0"],
      "result_count_ecql": 1,
      "result_sqlpp": ["0"],
      "result_count_sqlpp": 1
    },
    {
      "template": 14,
      "question": "Who directed the movie \" Inglourious Basterds \" ?",
      "aql": "FOR movie IN Movie FILTER movie.title == \"Inglourious Basterds\" FOR director IN 1 OUTBOUND movie DirectedBy FILTER IS_SAME_COLLECTION ( \"Director\", director ) RETURN director.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"Inglourious Basterds\" ; TRAVERSAL FOR director IN 1 OUTBOUND movie DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Director\" , director ) ; RETURN RETURN director.name ;",
      "ecql": "SELECT director.name FROM director WHERE director.id = { MATCH (movie:Movie)-[r:DirectedBy]->(director:Director) WHERE movie.id = { SELECT movie.id FROM movie WHERE movie.title = 'Inglourious Basterds' } RETURN director.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'Inglourious Basterds' ; Project movie.id ; Match (movie:Movie)-[r:DirectedBy]->(director:Director) ; Filter movie.id = movie.id ; Return director.id ; TableScan director ; Filter director.id = director.id ; Project director.name ; ",
      "sqlpp": "SELECT director.name FROM ( MATCH {class: Movie, as: movie, where: (title = 'Inglourious Basterds')}.outE('DirectedBy').inV('Director') {as: director} RETURN director )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Movie movie (title = 'Inglourious Basterds') ; Traversal OUT DirectedBy ; Traversal IN Director director ; Return director ; Project director.name ; ",
      "result_aql": ["David Kaufbird", "Eli R. Roth", "Eli Raphael Roth", "Eli Roth", "Gorilka", "Kuenthin Taranthîno", "Q", "Q", "QT", "Quentin Jerome Tarantino", "Quentin Tarantino", "Quentin Tarrantino"],
      "result_count_aql": 12,
      "result_ecql": ["David Kaufbird", "Eli R. Roth", "Eli Raphael Roth", "Eli Roth", "Gorilka", "Kuenthin Taranthîno", "Q", "Q", "QT", "Quentin Jerome Tarantino", "Quentin Tarantino", "Quentin Tarrantino"],
      "result_count_ecql": 12,
      "result_sqlpp": ["David Kaufbird", "Eli R. Roth", "Eli Raphael Roth", "Eli Roth", "Gorilka", "Kuenthin Taranthîno", "Q", "Q", "QT", "Quentin Jerome Tarantino", "Quentin Tarantino", "Quentin Tarrantino"],
      "result_count_sqlpp": 12
    },
    {
      "template": 15,
      "question": "How many movies were produced in the year 2012 ?",
      "aql": "FOR movie IN Movie FILTER movie.release_year == 2012 COLLECT WITH COUNT INTO length RETURN length",
      "aql_mir": "COLLECTION _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.release_year == 2012 ; AGGREGATE COLLECT WITH COUNT INTO length ; RETURN RETURN length ;",
      "ecql": "SELECT COUNT (movie.title) AS cnt FROM movie WHERE movie.release_year = 2012",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.release_year = 2012 ; Project COUNT ( movie.title ) AS cnt ; ",
      "sqlpp": "SELECT COUNT (movie.title) AS cnt FROM movie WHERE movie.release_year = 2012",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.release_year = 2012 ; Project COUNT ( movie.title ) AS cnt ; ",
      "result_aql": ["59524"],
      "result_count_aql": 1,
      "result_ecql": ["59524"],
      "result_count_ecql": 1,
      "result_sqlpp": ["59524"],
      "result_count_sqlpp": 1
    },
    {
      "template": 16,
      "question": "Find all movies written by \" Matt Damon \"",
      "aql": "FOR writer IN Writer FILTER writer.name == \"Matt Damon\" FOR movie IN 1 INBOUND writer WrittenBy FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR writer IN Writer ; FILTER FILTER writer.name == \"Matt Damon\" ; TRAVERSAL FOR movie IN 1 INBOUND writer WrittenBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (movie:Movie)-[r:WrittenBy]->(writer:Writer) WHERE writer.id = { SELECT writer.id FROM writer WHERE writer.name = 'Matt Damon' } RETURN movie.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan writer ; Filter writer.name = 'Matt Damon' ; Project writer.id ; Match (movie:Movie)-[r:WrittenBy]->(writer:Writer) ; Filter writer.id = writer.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM ( MATCH {class: Movie, as: movie}.outE('WrittenBy').inV('Writer') {as: writer, where: (name = 'Matt Damon')} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Movie movie ; Traversal OUT WrittenBy ; Traversal IN Writer writer (name = 'Matt Damon') ; Return movie ; Project movie.title ; ",
      "result_aql": ["Gerry", "Good Will Hunting", "Promised Land"],
      "result_count_aql": 3,
      "result_ecql": ["Gerry", "Good Will Hunting", "Promised Land"],
      "result_count_ecql": 3,
      "result_sqlpp": ["Gerry", "Good Will Hunting", "Promised Land"],
      "result_count_sqlpp": 3
    },
    {
      "template": 17,
      "question": "Find all movies that star both \" Angelina Jolie \" and \" Brad Pitt \"",
      "aql": "FOR actor_1 IN Actor FILTER actor_1.name == \"Angelina Jolie\" FOR movie IN 1 OUTBOUND actor_1 Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FOR actor_2 IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor_2 ) FILTER actor_2.name == \"Brad Pitt\" RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor_1 IN Actor ; FILTER FILTER actor_1.name == \"Angelina Jolie\" ; TRAVERSAL FOR movie IN 1 OUTBOUND actor_1 Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; TRAVERSAL FOR actor_2 IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor_2 ) ; FILTER FILTER actor_2.name == \"Brad Pitt\" ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (actor_1:Actor)-[:Cast]->(movie:Movie), (actor_2:Actor)-[:Cast]->(movie:Movie) WHERE actor_1.id = { SELECT actor.id FROM actor WHERE actor.name = 'Angelina Jolie' } AND actor_2.id = { SELECT actor.id FROM actor WHERE actor.name = 'Brad Pitt' } RETURN movie.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Angelina Jolie' ; Project actor.id ; TableScan actor ; Filter actor.name = 'Brad Pitt' ; Project actor.id ; Match (actor_1:Actor)-[:Cast]->(movie:Movie), (actor_2:Actor)-[:Cast]->(movie:Movie) ; Filter actor_1.id = actor_1.id AND actor_2.id = actor_2.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM ( MATCH {class: Actor, where: (name = 'Angelina Jolie')}.outE('Cast').inV('Movie') {as: movie}.inE('Cast').outV('Actor') {where: (name = 'Brad Pitt')} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Traversal _ Traversal _ Return _ Project _ | Match Actor (name = 'Angelina Jolie') ; Traversal OUT Cast ; Traversal IN Movie movie ; Traversal IN Cast ; Traversal OUT Actor (name = 'Brad Pitt') ; Return movie ; Project movie.title ; ",
      "result_aql": ["101 Biggest Celebrity Oops", "101 Sexiest Celebrity Bodies", "Stars on Trial", "The 59th Annual Golden Globe Awards", "The 64th Annual Golden Globe Awards", "The 66th Annual Golden Globe Awards", "The 68th Annual Golden Globe Awards", "The 69th Annual Golden Globe Awards", "The 69th Annual Golden Globe Awards", "The 72nd Annual Academy Awards", "The 81st Annual Academy Awards", "The 84th Annual Academy Awards", "The Oscars"],
      "result_count_aql": 12,
      "result_ecql": ["101 Biggest Celebrity Oops", "101 Sexiest Celebrity Bodies", "Stars on Trial", "The 59th Annual Golden Globe Awards", "The 64th Annual Golden Globe Awards", "The 66th Annual Golden Globe Awards", "The 68th Annual Golden Globe Awards", "The 69th Annual Golden Globe Awards", "The 72nd Annual Academy Awards", "The 81st Annual Academy Awards", "The 84th Annual Academy Awards", "The Oscars"],
      "result_count_ecql": 12,
      "result_sqlpp": ["101 Biggest Celebrity Oops", "101 Sexiest Celebrity Bodies", "Stars on Trial", "The 59th Annual Golden Globe Awards", "The 64th Annual Golden Globe Awards", "The 66th Annual Golden Globe Awards", "The 68th Annual Golden Globe Awards", "The 69th Annual Golden Globe Awards", "The 72nd Annual Academy Awards", "The 81st Annual Academy Awards", "The 84th Annual Academy Awards", "The Oscars"],
      "result_count_sqlpp": 12
    },
    {
      "template": 18,
      "question": "What is the maximum number of movies in which \" Brad Pitt \" act in a given year ?",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Brad Pitt\" FOR movie IN 1 OUTBOUND actor Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) COLLECT year = movie.release_year WITH COUNT INTO cnt SORT cnt DESC LIMIT 1 RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; AGGREGATE _ ; SORT _ ; LIMIT _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Brad Pitt\" ; TRAVERSAL FOR movie IN 1 OUTBOUND actor Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; AGGREGATE COLLECT year = movie.release_year WITH COUNT INTO cnt ; SORT SORT cnt DESC ; LIMIT LIMIT 1 ; RETURN RETURN cnt ;",
      "ecql": "SELECT COUNT (*) AS cnt FROM movie WHERE movie.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE actor.id = { SELECT actor.id FROM actor WHERE actor.name = 'Brad Pitt' } RETURN movie.id } GROUP BY movie.release_year ORDER BY cnt DESC LIMIT 1",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ GroupBy _ OrderBy _ Limit _ Project _ | TableScan actor ; Filter actor.name = 'Brad Pitt' ; Project actor.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter actor.id = actor.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; GroupBy movie.release_year ; OrderBy cnt DESC ; Limit 1 ; Project COUNT ( * ) AS cnt ; ",
      "sqlpp": "SELECT COUNT(*) AS cnt FROM ( MATCH {class: Actor, as: actor, where: (name = 'Brad Pitt')}.outE('Cast').inV('Movie') {as: movie} RETURN movie ) GROUP BY movie.release_year ORDER BY cnt DESC LIMIT 1",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ GroupBy _ OrderBy _ Limit _ Project _ | Match Actor actor (name = 'Brad Pitt') ; Traversal OUT Cast ; Traversal IN Movie movie ; Return movie ; GroupBy movie.release_year ; OrderBy cnt DESC ; Limit 1 ; Project COUNT ( * ) AS cnt ; ",
      "result_aql": ["5"],
      "result_count_aql": 1,
      "result_ecql": ["4"],
      "result_count_ecql": 1,
      "result_sqlpp": ["4"],
      "result_count_sqlpp": 1
    },
    {
      "template": 19,
      "question": "Find the actors who played in the latest movie by \" Quentin Tarantino \"",
      "aql": "FOR director IN Director FILTER director.name == \"Quentin Tarantino\" FOR movie IN 1 INBOUND director DirectedBy FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) SORT movie.release_year DESC LIMIT 1 FOR actor IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor ) RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; SORT _ ; LIMIT _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR director IN Director ; FILTER FILTER director.name == \"Quentin Tarantino\" ; TRAVERSAL FOR movie IN 1 INBOUND director DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; SORT SORT movie.release_year DESC ; LIMIT LIMIT 1 ; TRAVERSAL FOR actor IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor ) ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.id = { MATCH (actor:Actor)-[:Cast]->(movie:Movie) WHERE movie.id = { SELECT movie.id FROM movie WHERE movie.id = { MATCH (movie:Movie)-[:DirectedBy]->(director:Director) WHERE director.id = { SELECT director.id FROM director WHERE director.name = 'Quentin Tarantino' } RETURN movie.id } ORDER BY movie.release_year DESC LIMIT 1 } RETURN actor.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ OrderBy _ Limit _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan director ; Filter director.name = 'Quentin Tarantino' ; Project director.id ; Match (movie:Movie)-[:DirectedBy]->(director:Director) ; Filter director.id = director.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; OrderBy movie.release_year DESC ; Limit 1 ; Project movie.id ; Match (actor:Actor)-[:Cast]->(movie:Movie) ; Filter movie.id = movie.id ; Return actor.id ; TableScan actor ; Filter actor.id = actor.id ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM ( MATCH {class: Actor, as: actor}.outE('Cast').inV('Movie') {as: movie, where: (id = ( SELECT movie.id FROM ( MATCH {class: Movie, as: movie}.outE('DirectedBy').inV('Director') {as: director, where: (name = 'Quentin Tarantino')} RETURN movie ) ORDER BY movie.release_year DESC LIMIT 1 ) ) } RETURN actor )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ OrderBy _ Limit _ Project _ Match _ Traversal _ Traversal _ Return _ Project _ | Match Movie movie ; Traversal OUT DirectedBy ; Traversal IN Director director (name = 'Quentin Tarantino') ; Return movie ; OrderBy movie.release_year DESC ; Limit 1 ; Project movie.id ; Match Actor actor ; Traversal OUT Cast ; Traversal IN Movie movie (id = id) ; Return actor ; Project actor.name ; ",
      "result_aql": ["Bruce Dern", "Bruce MacLeish Dern", "Craig Stark", "Dana Gourrier", "Dana Michelle Gourrier", "Gene Jones", "JJL", "Jennifer Jason Leigh", "Jennifer Lee Morrow", "Jennifer Leigh", "King of Cool", "Mr Cool", "Sam", "Sam Jackson", "Samuel Jackson", "Samuel L. Jackson", "Samuel Leroy Jackson", "Tim Roth", "Timothy Simon Smith", "Walt Goggins", "Walter Goggins", "Walton Goggins", "Walton Sanders Goggins Jr.", "Zoe Bell", "Zoe the Cat", "Zoë Bell", "Zöe Bell"],
      "result_count_aql": 27,
      "result_ecql": ["Bruce Dern", "Bruce MacLeish Dern", "Craig Stark", "Dana Gourrier", "Dana Michelle Gourrier", "Gene Jones", "JJL", "Jennifer Jason Leigh", "Jennifer Lee Morrow", "Jennifer Leigh", "King of Cool", "Mr Cool", "Sam", "Sam Jackson", "Samuel Jackson", "Samuel L. Jackson", "Samuel Leroy Jackson", "Tim Roth", "Timothy Simon Smith", "Walt Goggins", "Walter Goggins", "Walton Goggins", "Walton Sanders Goggins Jr.", "Zoe Bell", "Zoe the Cat", "Zoë Bell", "Zöe Bell"],
      "result_count_ecql": 27,
      "result_sqlpp": ["Bruce Dern", "Bruce MacLeish Dern", "Craig Stark", "Dana Gourrier", "Dana Michelle Gourrier", "Gene Jones", "JJL", "Jennifer Jason Leigh", "Jennifer Lee Morrow", "Jennifer Leigh", "King of Cool", "Mr Cool", "Sam", "Sam Jackson", "Samuel Jackson", "Samuel L. Jackson", "Samuel Leroy Jackson", "Tim Roth", "Timothy Simon Smith", "Walt Goggins", "Walter Goggins", "Walton Goggins", "Walton Sanders Goggins Jr.", "Zoe Bell", "Zoe the Cat", "Zoë Bell", "Zöe Bell"],
      "result_count_sqlpp": 27
    },
    {
      "template": 20,
      "question": "Find all movies produced in 2015",
      "aql": "FOR movie IN Movie FILTER movie.release_year == 2015 RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.release_year == 2015 ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.release_year = 2015",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.release_year = 2015 ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM movie WHERE movie.release_year = 2015",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.release_year = 2015 ; Project movie.title ; ",
      "result_aql": "[]",
      "result_count_aql": 61734,
      "result_ecql": "[]",
      "result_count_ecql": 61734,
      "result_sqlpp": "[]",
      "result_count_sqlpp": 61734
    },
    {
      "template": 21,
      "question": "What is the number of movies featuring \" Brad Pitt \" ?",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Brad Pitt\" FOR movie IN 1 OUTBOUND actor Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) COLLECT WITH COUNT INTO cnt RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Brad Pitt\" ; TRAVERSAL FOR movie IN 1 OUTBOUND actor Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; AGGREGATE COLLECT WITH COUNT INTO cnt ; RETURN RETURN cnt ;",
      "ecql": "MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE actor.id = { SELECT actor.id FROM actor WHERE actor.name = 'Brad Pitt' } WITH COUNT (*) AS cnt RETURN cnt",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ With _ Return _ | TableScan actor ; Filter actor.name = 'Brad Pitt' ; Project actor.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter actor.id = actor.id ; With COUNT ( * ) AS cnt ; Return cnt ; ",
      "sqlpp": "SELECT COUNT(*) AS cnt FROM ( MATCH {class: Actor, as: actor, where: (name = 'Brad Pitt')}.outE('Cast').inV('Movie') {as: movie} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor (name = 'Brad Pitt') ; Traversal OUT Cast ; Traversal IN Movie movie ; Return movie ; Project COUNT ( * ) AS cnt ; ",
      "result_aql": ["56"],
      "result_count_aql": 1,
      "result_ecql": ["56"],
      "result_count_ecql": 1,
      "result_sqlpp": ["56"],
      "result_count_sqlpp": 1
    },
    {
      "template": 22,
      "question": "How many movies did \" Alfred Hitchcock \" direct ?",
      "aql": "FOR director IN Director FILTER director.name == \"Alfred Hitchcock\" FOR movie IN 1 INBOUND director DirectedBy FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) COLLECT WITH COUNT INTO cnt RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR director IN Director ; FILTER FILTER director.name == \"Alfred Hitchcock\" ; TRAVERSAL FOR movie IN 1 INBOUND director DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; AGGREGATE COLLECT WITH COUNT INTO cnt ; RETURN RETURN cnt ;",
      "ecql": "MATCH (movie:Movie)-[r:DirectedBy]->(director:Director) WHERE director.id = { SELECT director.id FROM director WHERE director.name = 'Alfred Hitchcock' } WITH COUNT (*) AS cnt RETURN cnt",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ With _ Return _ | TableScan director ; Filter director.name = 'Alfred Hitchcock' ; Project director.id ; Match (movie:Movie)-[r:DirectedBy]->(director:Director) ; Filter director.id = director.id ; With COUNT ( * ) AS cnt ; Return cnt ; ",
      "sqlpp": "SELECT COUNT(*) AS cnt FROM ( MATCH {class: Movie, as: movie}.outE('DirectedBy').inV('Director') {as: director, where: (name = 'Alfred Hitchcock')} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Movie movie ; Traversal OUT DirectedBy ; Traversal IN Director director (name = 'Alfred Hitchcock') ; Return movie ; Project COUNT ( * ) AS cnt ; ",
      "result_aql": ["64"],
      "result_count_aql": 1,
      "result_ecql": ["64"],
      "result_count_ecql": 1,
      "result_sqlpp": ["64"],
      "result_count_sqlpp": 1
    },
    {
      "template": 23,
      "question": "Which movie had the character \" Daffy Duck \"",
      "aql": "FOR movie IN Movie FOR actor, cast IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor ) FILTER cast.role == \"Daffy Duck\" RETURN movie.title",
      "aql_mir": "COLLECTION _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; TRAVERSAL FOR actor , cast IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor ) ; FILTER FILTER cast.role == \"Daffy Duck\" ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE r.role = 'Daffy Duck' RETURN movie.id }",
      "ecql_mir": "Match _ Filter _ Return _ TableScan _ Filter _ Project _ | Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter r.role = 'Daffy Duck' ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM ( MATCH {class: Actor, as: actor}.outE('Cast') {where: (role = 'Daffy Duck')}.inV('Movie') {as: movie} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor ; Traversal OUT Cast (role = 'Daffy Duck') ; Traversal IN Movie movie ; Return movie ; Project movie.title ; ",
      "result_aql": "[]",
      "result_count_aql": 188,
      "result_ecql": ["(Blooper) Bunny!", "A Corny Concerto", "A Coy Decoy", "A Pest in the House", "A Squeak in the Deep", "A Star Is Bored", "A Taste of Catnip", "A-Haunting We Will Go", "Ain't That Ducky", "Ali Baba Bunny", "Along Came Daffy", "Apes of Wrath", "Aqua Duck", "Assault and Peppered", "Baby Bottleneck", "Bah Humduck!: A Looney Tunes Christmas", "Beanstalk Bunny", "Behind the Tunes: A Conversation with Tex Avery", "Behind the Tunes: A Hunting We Will Go - Chuck Jones' Wabbit Season Twilogy", "Behind the Tunes: Animal Quackers", "Behind the Tunes: Blanc Expressions", "Behind the Tunes: Bugs - A Rabbit for All Seasonings", "Behind the Tunes: Crash! Bang! Boom! - The Wild Sounds of Treg Brown", "Behind the Tunes: Hard Luck Duck", "Behind the Tunes: Looney Tunes Go Hollywood", "Behind the Tunes: Man from Wackyland - The Art of Bob Clampett", "Birth of a Notion", "Boobs in the Woods", "Book Revue", "Boston Quackie", "Box-Office Bunny", "Bugs & Daffy: The Wartime Cartoons", "Bugs Bunny in Space", "Bugs Bunny's 3rd Movie: 1001 Rabbit Tales", "Bugs Bunny's Creature Features", "Bugs Bunny's Easter Special", "Bugs Bunny's Howl-oween Special", "Bugs Bunny's Lunar Tunes", "Bugs Bunny's Mad World of Television", "Bugs Bunny's Valentine", "Bugs vs. Daffy: Battle of the Music Video Stars", "Carnival of the Animals", "Carrotblanca", "Cartoon All-Stars to the Rescue", "Cartoon Network 20th Anniversary", "Chili Corn Corny", "Conrad the Sailor", "Corn on the Cop", "Cracked Quack", "Daffy - The Commando", "Daffy Dilly", "Daffy Doodles", "Daffy Duck & Egghead", "Daffy Duck Hunt", "Daffy Duck Slept Here", "Daffy Duck and the Dinosaur", "Daffy Duck for President", "Daffy Duck in Hollywood", "Daffy Duck's Easter Show", "Daffy Duck's Movie: Fantastic Island", "Daffy Duck's Quackbusters", "Daffy Duck's Thanks-for-Giving Special", "Daffy Flies North", "Daffy Rents", "Daffy's Diner", "Daffy's Inn Trouble", "Daffy's Rhapsody", "Daffy's Southern Exposure", "Design for Leaving", "Dime to Retire", "Don't Axe Me", "Draftee Daffy", "Drip-Along Daffy", "Duck Amuck", "Duck Dodgers and the Return of the 24½th Century", "Duck Dodgers in Attack of the Drones", "Duck Soup to Nuts", "Duck! Rabbit, Duck!", "Ducking the Devil", "Fast Buck Duck", "Feather Bluster", "Feather Finger", "Fiesta Fiasco", "Fifty Years of Bugs Bunny in 3 1/2 Minutes", "Fool Coverage", "Go Away Stowaway", "Go Go Amigo", "Golden Yeggs", "Good Noose", "Gremlins 2: The New Batch", "Happy Birthday, Bugs!: 50 Looney Years", "His Bitter Half", "Holiday for Drumsticks", "Hollywood Daffy", "How Bugs Bunny Won the West", "Howard the Duck", "Invasion of the Bunny Snatchers", "Irreverent Imagination: The Golden Age of the Looney Tunes", "It's Nice to Have a Mouse Around the House", "Looney Tunes 50th Anniversary", "Looney Tunes Sing-Alongs", "Looney Tunes: Back in Action", "Looney Tunes: Rabbits Run", "Looney Tunes: Reality Check", "Looney Tunes: Stranger Than Fiction", "Looney, Looney, Looney Bugs Bunny Movie", "Marvin the Martian in the Third Dimension", "Mexican Joyride", "Mexican Mousepiece", "Moby Duck", "Mucho Locos", "Muscle Tussle", "My Favorite Duck", "Nasty Quacks", "People Are Bunny", "Person to Bunny", "Plane Daffy", "Porky & Daffy", "Porky Pig's Feat", "Porky's Duck Hunt", "Porky's Last Stand", "Quack Shot", "Quacker Tracker", "Quackodile Tears", "Quest for Camelot Sing-Alongs", "Rabbit Fire", "Rabbit Seasoning", "Riff Raffy Daffy", "Rocket Squad", "Rodent to Stardom", "Rover Dangerfield", "Sahara Hare", "Scalp Trouble", "Scrap Happy Daffy", "See Ya Later Gladiator", "Show Biz Bugs", "Skyscraper Caper", "Slightly Daffy", "Snow Excuse", "Space Jam", "Speedy Ghost to Town", "Stork Naked", "Stupor Duck", "Superior Duck", "Suppressed Duck", "Swing Ding Amigo", "Tease for Two", "The Abominable Snow Rabbit", "The Astroduck", "The Bugs Bunny Mother's Day Special", "The Bugs Bunny/Road-Runner Movie", "The Chocolate Chase", "The Daffy Doc", "The Daffy Duckaroo", "The Ducksters", "The Duxorcist", "The Great Piggy Bank Robbery", "The Henpecked Duck", "The High and the Flighty", "The Iceman Ducketh", "The Impatient Patient", "The Million Hare", "The Music Mice-Tro", "The Night of the Living Duck", "The Prize Pest", "The Scarlet Pumpernickel", "The Spy Swatter", "The Stupid Cupid", "The Stupor Salesman", "The Super Snooper", "The Up-Standing Sitter", "The Wise Quacking Duck", "The Yolks on You", "This Is a Life?", "Thumb Fun", "Tick Tock Tuckered", "To Duck... or Not to Duck", "Tom Turk and Daffy", "Toonheads: The Lost Cartoons", "Tweety's High-Flying Adventure", "Well Worn Daffy", "What Makes Daffy Duck", "Who Framed Roger Rabbit", "Wise Quackers", "Wise Quacks", "Yankee Doodle Daffy", "You Ought to Be in Pictures", "You Were Never Duckier"],
      "result_count_ecql": 188,
      "result_sqlpp": ["(Blooper) Bunny!", "A Corny Concerto", "A Coy Decoy", "A Pest in the House", "A Squeak in the Deep", "A Star Is Bored", "A Taste of Catnip", "A-Haunting We Will Go", "Ain't That Ducky", "Ali Baba Bunny", "Along Came Daffy", "Apes of Wrath", "Aqua Duck", "Assault and Peppered", "Baby Bottleneck", "Bah Humduck!: A Looney Tunes Christmas", "Beanstalk Bunny", "Behind the Tunes: A Conversation with Tex Avery", "Behind the Tunes: A Hunting We Will Go - Chuck Jones' Wabbit Season Twilogy", "Behind the Tunes: Animal Quackers", "Behind the Tunes: Blanc Expressions", "Behind the Tunes: Bugs - A Rabbit for All Seasonings", "Behind the Tunes: Crash! Bang! Boom! - The Wild Sounds of Treg Brown", "Behind the Tunes: Hard Luck Duck", "Behind the Tunes: Looney Tunes Go Hollywood", "Behind the Tunes: Man from Wackyland - The Art of Bob Clampett", "Birth of a Notion", "Boobs in the Woods", "Book Revue", "Boston Quackie", "Box-Office Bunny", "Bugs & Daffy: The Wartime Cartoons", "Bugs Bunny in Space", "Bugs Bunny's 3rd Movie: 1001 Rabbit Tales", "Bugs Bunny's Creature Features", "Bugs Bunny's Easter Special", "Bugs Bunny's Howl-oween Special", "Bugs Bunny's Lunar Tunes", "Bugs Bunny's Mad World of Television", "Bugs Bunny's Valentine", "Bugs vs. Daffy: Battle of the Music Video Stars", "Carnival of the Animals", "Carrotblanca", "Cartoon All-Stars to the Rescue", "Cartoon Network 20th Anniversary", "Chili Corn Corny", "Conrad the Sailor", "Corn on the Cop", "Cracked Quack", "Daffy - The Commando", "Daffy Dilly", "Daffy Doodles", "Daffy Duck & Egghead", "Daffy Duck Hunt", "Daffy Duck Slept Here", "Daffy Duck and the Dinosaur", "Daffy Duck for President", "Daffy Duck in Hollywood", "Daffy Duck's Easter Show", "Daffy Duck's Movie: Fantastic Island", "Daffy Duck's Quackbusters", "Daffy Duck's Thanks-for-Giving Special", "Daffy Flies North", "Daffy Rents", "Daffy's Diner", "Daffy's Inn Trouble", "Daffy's Rhapsody", "Daffy's Southern Exposure", "Design for Leaving", "Dime to Retire", "Don't Axe Me", "Draftee Daffy", "Drip-Along Daffy", "Duck Amuck", "Duck Dodgers and the Return of the 24½th Century", "Duck Dodgers in Attack of the Drones", "Duck Soup to Nuts", "Duck! Rabbit, Duck!", "Ducking the Devil", "Fast Buck Duck", "Feather Bluster", "Feather Finger", "Fiesta Fiasco", "Fifty Years of Bugs Bunny in 3 1/2 Minutes", "Fool Coverage", "Go Away Stowaway", "Go Go Amigo", "Golden Yeggs", "Good Noose", "Gremlins 2: The New Batch", "Happy Birthday, Bugs!: 50 Looney Years", "His Bitter Half", "Holiday for Drumsticks", "Hollywood Daffy", "How Bugs Bunny Won the West", "Howard the Duck", "Invasion of the Bunny Snatchers", "Irreverent Imagination: The Golden Age of the Looney Tunes", "It's Nice to Have a Mouse Around the House", "Looney Tunes 50th Anniversary", "Looney Tunes Sing-Alongs", "Looney Tunes: Back in Action", "Looney Tunes: Rabbits Run", "Looney Tunes: Reality Check", "Looney Tunes: Stranger Than Fiction", "Looney, Looney, Looney Bugs Bunny Movie", "Marvin the Martian in the Third Dimension", "Mexican Joyride", "Mexican Mousepiece", "Moby Duck", "Mucho Locos", "Muscle Tussle", "My Favorite Duck", "Nasty Quacks", "People Are Bunny", "Person to Bunny", "Plane Daffy", "Porky & Daffy", "Porky Pig's Feat", "Porky's Duck Hunt", "Porky's Last Stand", "Quack Shot", "Quacker Tracker", "Quackodile Tears", "Quest for Camelot Sing-Alongs", "Rabbit Fire", "Rabbit Seasoning", "Riff Raffy Daffy", "Rocket Squad", "Rodent to Stardom", "Rover Dangerfield", "Sahara Hare", "Scalp Trouble", "Scrap Happy Daffy", "See Ya Later Gladiator", "Show Biz Bugs", "Skyscraper Caper", "Slightly Daffy", "Snow Excuse", "Space Jam", "Speedy Ghost to Town", "Stork Naked", "Stupor Duck", "Superior Duck", "Suppressed Duck", "Swing Ding Amigo", "Tease for Two", "The Abominable Snow Rabbit", "The Astroduck", "The Bugs Bunny Mother's Day Special", "The Bugs Bunny/Road-Runner Movie", "The Chocolate Chase", "The Daffy Doc", "The Daffy Duckaroo", "The Ducksters", "The Duxorcist", "The Great Piggy Bank Robbery", "The Henpecked Duck", "The High and the Flighty", "The Iceman Ducketh", "The Impatient Patient", "The Million Hare", "The Music Mice-Tro", "The Night of the Living Duck", "The Prize Pest", "The Scarlet Pumpernickel", "The Spy Swatter", "The Stupid Cupid", "The Stupor Salesman", "The Super Snooper", "The Up-Standing Sitter", "The Wise Quacking Duck", "The Yolks on You", "This Is a Life?", "Thumb Fun", "Tick Tock Tuckered", "To Duck... or Not to Duck", "Tom Turk and Daffy", "Toonheads: The Lost Cartoons", "Tweety's High-Flying Adventure", "Well Worn Daffy", "What Makes Daffy Duck", "Who Framed Roger Rabbit", "Wise Quackers", "Wise Quacks", "Yankee Doodle Daffy", "You Ought to Be in Pictures", "You Were Never Duckier"],
      "result_count_sqlpp": 188
    },
    {
      "template": 24,
      "question": "Find the directors of all movies featuring \" Kate Winslet \"",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Kate Winslet\" FOR movie IN 1 OUTBOUND actor Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FOR director IN 1 OUTBOUND movie DirectedBy FILTER IS_SAME_COLLECTION ( \"Director\", director ) RETURN director.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Kate Winslet\" ; TRAVERSAL FOR movie IN 1 OUTBOUND actor Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; TRAVERSAL FOR director IN 1 OUTBOUND movie DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Director\" , director ) ; RETURN RETURN director.name ;",
      "ecql": "SELECT director.name FROM director WHERE director.id = { MATCH (actor:Actor)-[:Cast]->(movie:Movie), (movie:Movie)-[:DirectedBy]->(director:Director) WHERE actor.id = { SELECT actor.id FROM actor WHERE actor.name = 'Kate Winslet' } RETURN director.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Kate Winslet' ; Project actor.id ; Match (actor:Actor)-[:Cast]->(movie:Movie), (movie:Movie)-[:DirectedBy]->(director:Director) ; Filter actor.id = actor.id ; Return director.id ; TableScan director ; Filter director.id = director.id ; Project director.name ; ",
      "sqlpp": "SELECT director.name FROM ( MATCH {class: Actor, as: actor, where: (name = 'Kate Winslet')}.outE('Cast').inV('Movie') {as: movie}.outE('DirectedBy').inV('Director') {as: director} RETURN director )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor (name = 'Kate Winslet') ; Traversal OUT Cast ; Traversal IN Movie movie ; Traversal OUT DirectedBy ; Traversal IN Director director ; Return director ; Project director.name ; ",
      "result_aql": ["Alan Carter", "Alan Carter", "Alan Carter", "Alan Carter", "Alan Parker", "Alan Rickman", "Alan Sidney Patrick Rickman", "Alan Smithee", "Alan William Parker", "Allen Haines", "Allen P. Haines", "An Lee", "An Li", "Andreas Missler-Morell", "Andreas Missler-Morell", "Andreas Morell", "Andrew James", "Andrew James Schleiffarth", "Andrew Schleiffarth", "Ang Lee", "Ann Fletcher", "Anne 'Mama' Fletcher", "Anne 'Mama' Fletcher'", "Anne Fletcher", "Anne M. Fletcher", "Bill Couturie", "Bill Couturié", "C. Henry Selick", "Chris Donavin", "Chris Donavin", "Chris Donavin", "Chris Donavin", "Chris Donavin", "Chris Donovan", "Chris Donovan", "Chris Donovan", "Chris Donovan", "Chris Donovan", "Errol Morris", "Errol Morris", "Garry Hurst", "Gary Hearst", "Gary Hurst", "Gene Weed", "Gene Weed", "Glenn P. Weiss", "Glenn Weiss", "H.A. Milton", "Hamish Hamilton", "Henry Selick", "Howard Hall", "Iron Jim", "J. C.", "James Cameron", "James Cameron and his Lawyers", "James Francis Cameron", "Jeff Margolis", "Jeff Margolis", "Jim", "Jim Cameron", "Jocelyn Denise Moorhouse", "Jocelyn Moorhouse", "Joe De Maio", "Joe DeMaio", "Joel Gallen", "John Dermot", "John Downer", "John Hillcoat", "Joseph DeMaio", "Josh Ligairi", "Joshua Ligairi", "Joss Moorhouse", "Judy Rymer", "Kabir Akhtar", "Kevin Burns", "Lou Horvitz", "Lou Horvitz", "Lou Horvitz", "Lou Horvitz", "Lou Horvitz", "Lou Horvitz", "Louis J. Horvitz", "Louis J. Horvitz", "Louis J. Horvitz", "Louis J. Horvitz", "Louis J. Horvitz", "Louis J. Horvitz", "Mama", "Marc Forster", "Mark Hamilton", "Mark Hamilton", "Mary Ann Bernard", "Michael Apted", "Michael Bernard Gottlieb", "Michael David Apted", "Michael Gottlieb", "Michael Winterbottom", "Michel Gondry", "Midas Mendes", "Nigel Neill", "Nightmare Parsons", "Nikki Parsons", "Nikki Pumpkin", "PJ", "Pete", "Pete Docter", "Peter Andrews", "Peter Docter", "Peter Hans Docter", "Peter Jackson", "Rich Preuss", "Richard A. Preuss", "Richard Eyre", "Roger Goodman", "Roger Goodman", "Roger M. Goodman", "Roger M. Goodman", "Sam Lowry", "Sam Mendes", "Sam Neill", "Samuel Alexander Mendes", "Shelley Lyons", "Sir Alan Parker", "Sir Alan William Parker", "Sir Peter Jackson", "Sir Richard Eyre", "Stephen Daldry", "Stephen Daldry CBE", "Stephen David Daldry", "Steve Soderbergh", "Steven Andrew Soderbergh", "Steven Soderbergh", "Sticky Pumpkin", "Troy", "Troy Miller", "Troy T. Miller", "Troy Tee Miller", "Utz Weber", "William Couturié", "Wilson Thomas"],
      "result_count_aql": 114,
      "result_ecql": ["Alan Carter", "Alan Parker", "Alan Rickman", "Alan Sidney Patrick Rickman", "Alan Smithee", "Alan William Parker", "Allen Haines", "Allen P. Haines", "An Lee", "An Li", "Andreas Missler-Morell", "Andreas Missler-Morell", "Andreas Morell", "Andrew James", "Andrew James Schleiffarth", "Andrew Schleiffarth", "Ang Lee", "Ann Fletcher", "Anne 'Mama' Fletcher", "Anne 'Mama' Fletcher'", "Anne Fletcher", "Anne M. Fletcher", "Bill Couturie", "Bill Couturié", "C. Henry Selick", "Chris Donavin", "Chris Donovan", "Errol Morris", "Garry Hurst", "Gary Hearst", "Gary Hurst", "Gene Weed", "Glenn P. Weiss", "Glenn Weiss", "H.A. Milton", "Hamish Hamilton", "Henry Selick", "Howard Hall", "Iron Jim", "J. C.", "James Cameron", "James Cameron and his Lawyers", "James Francis Cameron", "Jeff Margolis", "Jim", "Jim Cameron", "Jocelyn Denise Moorhouse", "Jocelyn Moorhouse", "Joe De Maio", "Joe DeMaio", "Joel Gallen", "John Dermot", "John Downer", "John Hillcoat", "Joseph DeMaio", "Josh Ligairi", "Joshua Ligairi", "Joss Moorhouse", "Judy Rymer", "Kabir Akhtar", "Kevin Burns", "Lou Horvitz", "Louis J. Horvitz", "Mama", "Marc Forster", "Mark Hamilton", "Mark Hamilton", "Mary Ann Bernard", "Michael Apted", "Michael Bernard Gottlieb", "Michael David Apted", "Michael Gottlieb", "Michael Winterbottom", "Michel Gondry", "Midas Mendes", "Nigel Neill", "Nightmare Parsons", "Nikki Parsons", "Nikki Pumpkin", "PJ", "Pete", "Pete Docter", "Peter Andrews", "Peter Docter", "Peter Hans Docter", "Peter Jackson", "Rich Preuss", "Richard A. Preuss", "Richard Eyre", "Roger Goodman", "Roger M. Goodman", "Sam Lowry", "Sam Mendes", "Sam Neill", "Samuel Alexander Mendes", "Shelley Lyons", "Sir Alan Parker", "Sir Alan William Parker", "Sir Peter Jackson", "Sir Richard Eyre", "Stephen Daldry", "Stephen Daldry CBE", "Stephen David Daldry", "Steve Soderbergh", "Steven Andrew Soderbergh", "Steven Soderbergh", "Sticky Pumpkin", "Troy", "Troy Miller", "Troy T. Miller", "Troy Tee Miller", "Utz Weber", "William Couturié", "Wilson Thomas"],
      "result_count_ecql": 114,
      "result_sqlpp": ["Alan Carter", "Alan Parker", "Alan Rickman", "Alan Sidney Patrick Rickman", "Alan Smithee", "Alan William Parker", "Allen Haines", "Allen P. Haines", "An Lee", "An Li", "Andreas Missler-Morell", "Andreas Missler-Morell", "Andreas Morell", "Andrew James", "Andrew James Schleiffarth", "Andrew Schleiffarth", "Ang Lee", "Ann Fletcher", "Anne 'Mama' Fletcher", "Anne 'Mama' Fletcher'", "Anne Fletcher", "Anne M. Fletcher", "Bill Couturie", "Bill Couturié", "C. Henry Selick", "Chris Donavin", "Chris Donovan", "Errol Morris", "Garry Hurst", "Gary Hearst", "Gary Hurst", "Gene Weed", "Glenn P. Weiss", "Glenn Weiss", "H.A. Milton", "Hamish Hamilton", "Henry Selick", "Howard Hall", "Iron Jim", "J. C.", "James Cameron", "James Cameron and his Lawyers", "James Francis Cameron", "Jeff Margolis", "Jim", "Jim Cameron", "Jocelyn Denise Moorhouse", "Jocelyn Moorhouse", "Joe De Maio", "Joe DeMaio", "Joel Gallen", "John Dermot", "John Downer", "John Hillcoat", "Joseph DeMaio", "Josh Ligairi", "Joshua Ligairi", "Joss Moorhouse", "Judy Rymer", "Kabir Akhtar", "Kevin Burns", "Lou Horvitz", "Louis J. Horvitz", "Mama", "Marc Forster", "Mark Hamilton", "Mark Hamilton", "Mary Ann Bernard", "Michael Apted", "Michael Bernard Gottlieb", "Michael David Apted", "Michael Gottlieb", "Michael Winterbottom", "Michel Gondry", "Midas Mendes", "Nigel Neill", "Nightmare Parsons", "Nikki Parsons", "Nikki Pumpkin", "PJ", "Pete", "Pete Docter", "Peter Andrews", "Peter Docter", "Peter Hans Docter", "Peter Jackson", "Rich Preuss", "Richard A. Preuss", "Richard Eyre", "Roger Goodman", "Roger M. Goodman", "Sam Lowry", "Sam Mendes", "Sam Neill", "Samuel Alexander Mendes", "Shelley Lyons", "Sir Alan Parker", "Sir Alan William Parker", "Sir Peter Jackson", "Sir Richard Eyre", "Stephen Daldry", "Stephen Daldry CBE", "Stephen David Daldry", "Steve Soderbergh", "Steven Andrew Soderbergh", "Steven Soderbergh", "Sticky Pumpkin", "Troy", "Troy Miller", "Troy T. Miller", "Troy Tee Miller", "Utz Weber", "William Couturié", "Wilson Thomas"],
      "result_count_sqlpp": 114
    },
    {
      "template": 25,
      "question": "Find all actors who acted in the same movie as \" Tom Hanks \"",
      "aql": "FOR actor_1 IN Actor FILTER actor_1.name == \"Tom Hanks\" FOR movie IN 1 OUTBOUND actor_1 Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FOR actor_2 IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor_2 ) RETURN actor_2.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor_1 IN Actor ; FILTER FILTER actor_1.name == \"Tom Hanks\" ; TRAVERSAL FOR movie IN 1 OUTBOUND actor_1 Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; TRAVERSAL FOR actor_2 IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor_2 ) ; RETURN RETURN actor_2.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.id = { MATCH (actor_1:Actor)-[:Cast]->(movie:Movie), (actor_2:Actor)-[:Cast]->(movie:Movie) WHERE actor_1.id = { SELECT actor.id FROM actor WHERE actor.name = 'Tom Hanks' } RETURN actor_2.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Tom Hanks' ; Project actor.id ; Match (actor_1:Actor)-[:Cast]->(movie:Movie), (actor_2:Actor)-[:Cast]->(movie:Movie) ; Filter actor_1.id = actor_1.id ; Return actor_2.id ; TableScan actor ; Filter actor.id = actor.id ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM ( MATCH {class: Actor, where: (name = 'Tom Hanks')}.outE('Cast').inV('Movie') {as: movie}.inE('Cast').outV('Actor') {as: actor} RETURN actor )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Traversal _ Traversal _ Return _ Project _ | Match Actor (name = 'Tom Hanks') ; Traversal OUT Cast ; Traversal IN Movie movie ; Traversal IN Cast ; Traversal OUT Actor actor ; Return actor ; Project actor.name ; ",
      "result_aql": "[]",
      "result_count_aql": 14117,
      "result_ecql": "[]",
      "result_count_ecql": 14117,
      "result_sqlpp": "[]",
      "result_count_sqlpp": 14117
    },
    {
      "template": 26,
      "question": "Find all movies about Iraq war",
      "aql": "FOR keyword IN Keyword FILTER CONTAINS(keyword.keyword, \"iraq-war\") FOR movie IN 1 INBOUND keyword Tags FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR keyword IN Keyword ; FILTER FILTER CONTAINS ( keyword.keyword , \"iraq-war\" ) ; TRAVERSAL FOR movie IN 1 INBOUND keyword Tags ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.keyword @> '[\"iraq-war\"]'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.keyword @> '[\"iraq-war\"]' ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM movie WHERE movie.keyword CONTAINS 'iraq-war'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.keyword CONTAINS 'iraq-war' ; Project movie.title ; ",
      "result_aql": "[]",
      "result_count_aql": 293,
      "result_ecql": "[]",
      "result_count_ecql": 293,
      "result_sqlpp": "[]",
      "result_count_sqlpp": 293
    },
    {
      "template": 27,
      "question": "How many actors were born in \" Los Angeles \" after 2000 ?",
      "aql": "FOR actor IN Actor FILTER actor.birth_city == \"Los Angeles\" AND actor.birth_year > 2000 COLLECT WITH COUNT INTO cnt RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.birth_city == \"Los Angeles\" AND actor.birth_year > 2000 ; AGGREGATE COLLECT WITH COUNT INTO cnt ; RETURN RETURN cnt ;",
      "ecql": "SELECT COUNT (*) AS cnt FROM actor WHERE actor.birth_city = 'Los Angeles' AND actor.birth_year > 2000",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_city = 'Los Angeles' AND actor.birth_year > 2000 ; Project COUNT ( * ) AS cnt ; ",
      "sqlpp": "SELECT COUNT (*) AS cnt FROM actor WHERE actor.birth_city = 'Los Angeles' AND actor.birth_year > 2000",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_city = 'Los Angeles' AND actor.birth_year > 2000 ; Project COUNT ( * ) AS cnt ; ",
      "result_aql": ["32"],
      "result_count_aql": 1,
      "result_ecql": ["32"],
      "result_count_ecql": 1,
      "result_sqlpp": ["32"],
      "result_count_sqlpp": 1
    },
    {
      "template": 28,
      "question": "Find all movies produced by Netflix",
      "aql": "FOR company IN Company FILTER company.name == \"Netflix\" FOR movie IN 1 OUTBOUND company Copyright FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR company IN Company ; FILTER FILTER company.name == \"Netflix\" ; TRAVERSAL FOR movie IN 1 OUTBOUND company Copyright ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (company:Company)-[r:Copyright]->(movie:Movie) WHERE company.id = {SELECT company.id FROM company WHERE company.name = 'Netflix'} RETURN movie.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan company ; Filter company.name = 'Netflix' ; Project company.id ; Match (company:Company)-[r:Copyright]->(movie:Movie) ; Filter company.id = company.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM (MATCH {class: Company, as: company, where: (name = 'Netflix')}.outE('Copyright').inV('Movie') {as: movie} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Company company (name = 'Netflix') ; Traversal OUT Copyright ; Traversal IN Movie movie ; Return movie ; Project movie.title ; ",
      "result_aql": ["13 Minutes", "Amanda Knox", "Amar", "Amateur", "Bright", "Crouching Tiger, Hidden Dragon: Sword of Destiny", "Divanation", "Ever After High: Way Too Wonderland", "First They Killed My Father: A Daughter of Cambodia Remembers", "Joe Rogan: Live", "Marco Polo: One Hundred Eyes", "Mike Epps: Don't Take It Personal", "Oscillating Fan for Your Home", "Our Souls at Night", "Reggie Watts: Spatial", "Smosh: The Movie", "That's My Time: The Todd Lynn Story", "The Comedians of Comedy", "The Panama Papers", "This Film Is Not Yet Rated", "Virunga: Gorillas in Peril", "War Machine", "What Happened, Miss Simone?", "Winter on Fire: Ukraine's Fight for Freedom", "XOXO", "Zach Galifianakis: Live at the Purple Onion"],
      "result_count_aql": 26,
      "result_ecql": ["13 Minutes", "Amanda Knox", "Amar", "Amateur", "Bright", "Crouching Tiger, Hidden Dragon: Sword of Destiny", "Divanation", "Ever After High: Way Too Wonderland", "First They Killed My Father: A Daughter of Cambodia Remembers", "Joe Rogan: Live", "Marco Polo: One Hundred Eyes", "Mike Epps: Don't Take It Personal", "Oscillating Fan for Your Home", "Our Souls at Night", "Reggie Watts: Spatial", "Smosh: The Movie", "That's My Time: The Todd Lynn Story", "The Comedians of Comedy", "The Panama Papers", "This Film Is Not Yet Rated", "Virunga: Gorillas in Peril", "War Machine", "What Happened, Miss Simone?", "Winter on Fire: Ukraine's Fight for Freedom", "XOXO", "Zach Galifianakis: Live at the Purple Onion"],
      "result_count_ecql": 26,
      "result_sqlpp": ["13 Minutes", "Amanda Knox", "Amar", "Amateur", "Bright", "Crouching Tiger, Hidden Dragon: Sword of Destiny", "Divanation", "Ever After High: Way Too Wonderland", "First They Killed My Father: A Daughter of Cambodia Remembers", "Joe Rogan: Live", "Marco Polo: One Hundred Eyes", "Mike Epps: Don't Take It Personal", "Oscillating Fan for Your Home", "Our Souls at Night", "Reggie Watts: Spatial", "Smosh: The Movie", "That's My Time: The Todd Lynn Story", "The Comedians of Comedy", "The Panama Papers", "This Film Is Not Yet Rated", "Virunga: Gorillas in Peril", "War Machine", "What Happened, Miss Simone?", "Winter on Fire: Ukraine's Fight for Freedom", "XOXO", "Zach Galifianakis: Live at the Purple Onion"],
      "result_count_sqlpp": 26
    },
    {
      "template": 29,
      "question": "Where is the birth place of \" Kevin Spacey \"",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Kevin Spacey\" RETURN actor.birth_city",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Kevin Spacey\" ; RETURN RETURN actor.birth_city ;",
      "ecql": "SELECT actor.birth_city FROM actor WHERE actor.name = 'Kevin Spacey'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Kevin Spacey' ; Project actor.birth_city ; ",
      "sqlpp": "SELECT actor.birth_city FROM actor WHERE actor.name = 'Kevin Spacey'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Kevin Spacey' ; Project actor.birth_city ; ",
      "result_aql": ["South Orange"],
      "result_count_aql": 1,
      "result_ecql": ["South Orange"],
      "result_count_ecql": 1,
      "result_sqlpp": ["South Orange"],
      "result_count_sqlpp": 1
    },
    {
      "template": 30,
      "question": "Find all actors from Italy",
      "aql": "FOR actor IN Actor FILTER actor.nationality == \"Italy\" RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.nationality == \"Italy\" ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.nationality = 'Italy'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.nationality = 'Italy' ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM actor WHERE actor.nationality = 'Italy'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.nationality = 'Italy' ; Project actor.name ; ",
      "result_aql": "[]",
      "result_count_aql": 5362,
      "result_ecql": "[]",
      "result_count_ecql": 5362,
      "result_sqlpp": "[]",
      "result_count_sqlpp": 5362
    },
    {
      "template": 31,
      "question": "Find the actor who played \" Captain Miller \" in the movie \" Saving Private Ryan \"",
      "aql": "FOR movie IN Movie FILTER movie.title == \"Saving Private Ryan\" FOR actor, cast IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor ) FILTER cast.role == \"Captain Miller\" RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"Saving Private Ryan\" ; TRAVERSAL FOR actor , cast IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor ) ; FILTER FILTER cast.role == \"Captain Miller\" ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE r.role = 'Captain Miller' AND movie.id = { SELECT movie.id FROM movie WHERE movie.title = 'Saving Private Ryan' } RETURN actor.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'Saving Private Ryan' ; Project movie.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter r.role = 'Captain Miller' AND movie.id = movie.id ; Return actor.id ; TableScan actor ; Filter actor.id = actor.id ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM ( MATCH {class: Actor, as: actor}.outE('Cast') {where: (role = 'Captain Miller')}.inV('Movie') {as: movie, where: (title = 'Saving Private Ryan')} RETURN actor )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor ; Traversal OUT Cast (role = 'Captain Miller') ; Traversal IN Movie movie (title = 'Saving Private Ryan') ; Return actor ; Project actor.name ; ",
      "result_aql": ["Thomas Jeffrey Hanks", "Tom Hanks", "Tomu Hankusu"],
      "result_count_aql": 3,
      "result_ecql": ["Thomas Jeffrey Hanks", "Tom Hanks", "Tomu Hankusu"],
      "result_count_ecql": 3,
      "result_sqlpp": ["Thomas Jeffrey Hanks", "Tom Hanks", "Tomu Hankusu"],
      "result_count_sqlpp": 3
    },
    {
      "template": 32,
      "question": "Find all tv series produced by Netflix",
      "aql": "FOR company IN Company FILTER company.name == \"Netflix\" FOR tv_series IN 1 OUTBOUND company Copyright FILTER IS_SAME_COLLECTION ( \"TvSeries\", tv_series ) RETURN tv_series.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR company IN Company ; FILTER FILTER company.name == \"Netflix\" ; TRAVERSAL FOR tv_series IN 1 OUTBOUND company Copyright ; FILTER FILTER IS_SAME_COLLECTION ( \"TvSeries\" , tv_series ) ; RETURN RETURN tv_series.title ;",
      "ecql": "SELECT tv_series.title FROM tv_series WHERE tv_series.id = { MATCH (company:Company)-[r:Copyright]->(tv_series:TvSeries) WHERE company.id = { SELECT company.id FROM company WHERE company.name = 'Netflix' } RETURN tv_series.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan company ; Filter company.name = 'Netflix' ; Project company.id ; Match (company:Company)-[r:Copyright]->(tv_series:TvSeries) ; Filter company.id = company.id ; Return tv_series.id ; TableScan tv_series ; Filter tv_series.id = tv_series.id ; Project tv_series.title ; ",
      "sqlpp": "SELECT tv_series.title FROM (MATCH {class: Company, as: company, where: (name = 'Netflix')}.outE('Copyright').inV('TvSeries') {as: tv_series} RETURN tv_series )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Company company (name = 'Netflix') ; Traversal OUT Copyright ; Traversal IN TvSeries tv_series ; Return tv_series ; Project tv_series.title ; ",
      "result_aql": ["A Series of Unfortunate Events", "Borgia", "Chelsea", "Cooked", "Dawn of the Croods", "G.L.O.W.", "Girlboss", "Godless", "Hibana", "Jessica Jones", "Lady Dynamite", "Llama Llama", "Making a Murderer", "Mindhunter", "Russell Peters Versus the World", "Scream: The TV Series", "Untitled Nick Stoller Project", "W/ Bob and David", "Wet Hot American Summer: 10 Years Later"],
      "result_count_aql": 19,
      "result_ecql": ["A Series of Unfortunate Events", "Borgia", "Chelsea", "Cooked", "Dawn of the Croods", "G.L.O.W.", "Girlboss", "Godless", "Hibana", "Jessica Jones", "Lady Dynamite", "Llama Llama", "Making a Murderer", "Mindhunter", "Russell Peters Versus the World", "Scream: The TV Series", "Untitled Nick Stoller Project", "W/ Bob and David", "Wet Hot American Summer: 10 Years Later"],
      "result_count_ecql": 19,
      "result_sqlpp": ["A Series of Unfortunate Events", "Borgia", "Chelsea", "Cooked", "Dawn of the Croods", "G.L.O.W.", "Girlboss", "Godless", "Hibana", "Jessica Jones", "Lady Dynamite", "Llama Llama", "Making a Murderer", "Mindhunter", "Russell Peters Versus the World", "Scream: The TV Series", "Untitled Nick Stoller Project", "W/ Bob and David", "Wet Hot American Summer: 10 Years Later"],
      "result_count_sqlpp": 19
    },
    {
      "template": 33,
      "question": "What is the number of movies produced in 2013 ?",
      "aql": "FOR movie IN Movie FILTER movie.release_year == 2013 COLLECT WITH COUNT INTO length RETURN length",
      "aql_mir": "COLLECTION _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.release_year == 2013 ; AGGREGATE COLLECT WITH COUNT INTO length ; RETURN RETURN length ;",
      "ecql": "SELECT COUNT (movie.title) AS cnt FROM movie WHERE release_year = 2013",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter release_year = 2013 ; Project COUNT ( movie.title ) AS cnt ; ",
      "sqlpp": "SELECT COUNT (movie.title) AS cnt FROM movie WHERE release_year = 2013",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter release_year = 2013 ; Project COUNT ( movie.title ) AS cnt ; ",
      "result_aql": ["63168"],
      "result_count_aql": 1,
      "result_ecql": ["63168"],
      "result_count_ecql": 1,
      "result_sqlpp": ["63168"],
      "result_count_sqlpp": 1
    },
    {
      "template": 34,
      "question": "Find the actor with most number of films",
      "aql": "FOR actor IN Actor FOR movie IN 1 OUTBOUND actor Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) COLLECT a = actor WITH COUNT INTO cnt SORT cnt DESC LIMIT 1 RETURN a.name",
      "aql_mir": "COLLECTION _ ; TRAVERSAL _ ; FILTER _ ; AGGREGATE _ ; SORT _ ; LIMIT _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; TRAVERSAL FOR movie IN 1 OUTBOUND actor Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; AGGREGATE COLLECT a = actor WITH COUNT INTO cnt ; SORT SORT cnt DESC ; LIMIT LIMIT 1 ; RETURN RETURN a.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WITH actor.id AS actor_id, COUNT (movie) AS cnt RETURN actor_id ORDER BY cnt DESC LIMIT 1 }",
      "ecql_mir": "Match _ With _ Return _ OrderBy _ Limit _ TableScan _ Filter _ Project _ | Match (actor:Actor)-[r:Cast]->(movie:Movie) ; With actor.id AS actor_id COUNT ( movie ) AS cnt ; Return actor_id ; OrderBy cnt DESC ; Limit 1 ; TableScan actor ; Filter actor.id = actor.id ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM ( SELECT actor.name, COUNT(movie) AS cnt FROM ( MATCH {class: Actor, as: actor}.outE('Cast').inV('Movie') {as: movie} RETURN actor, movie ) GROUP BY actor ORDER BY cnt DESC LIMIT 1 )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ GroupBy _ OrderBy _ Limit _ Project _ Project _ | Match Actor actor ; Traversal OUT Cast ; Traversal IN Movie movie ; Return actor movie ; GroupBy actor ; OrderBy cnt DESC ; Limit 1 ; Project actor.name COUNT ( movie ) AS cnt ; Project actor.name ; ",
      "result_aql": ["Mel Blanc"],
      "result_count_aql": 1,
      "result_ecql": ["Mel Blanc"],
      "result_count_ecql": 1,
      "result_sqlpp": ["Mel Blanc"],
      "result_count_sqlpp": 1
    },
    {
      "template": 35,
      "question": "Find all movies that were produced by Netflix",
      "aql": "FOR company IN Company FILTER company.name == \"Netflix\" FOR movie IN 1 OUTBOUND company Copyright FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR company IN Company ; FILTER FILTER company.name == \"Netflix\" ; TRAVERSAL FOR movie IN 1 OUTBOUND company Copyright ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (company:Company)-[r:Copyright]->(movie:Movie) WHERE company.id = {SELECT company.id FROM company WHERE company.name = 'Netflix'} RETURN movie.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan company ; Filter company.name = 'Netflix' ; Project company.id ; Match (company:Company)-[r:Copyright]->(movie:Movie) ; Filter company.id = company.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM (MATCH {class: Company, as: company, where: (name = 'Netflix')}.outE('Copyright').inV('Movie') {as: movie} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Company company (name = 'Netflix') ; Traversal OUT Copyright ; Traversal IN Movie movie ; Return movie ; Project movie.title ; ",
      "result_aql": ["13 Minutes", "Amanda Knox", "Amar", "Amateur", "Bright", "Crouching Tiger, Hidden Dragon: Sword of Destiny", "Divanation", "Ever After High: Way Too Wonderland", "First They Killed My Father: A Daughter of Cambodia Remembers", "Joe Rogan: Live", "Marco Polo: One Hundred Eyes", "Mike Epps: Don't Take It Personal", "Oscillating Fan for Your Home", "Our Souls at Night", "Reggie Watts: Spatial", "Smosh: The Movie", "That's My Time: The Todd Lynn Story", "The Comedians of Comedy", "The Panama Papers", "This Film Is Not Yet Rated", "Virunga: Gorillas in Peril", "War Machine", "What Happened, Miss Simone?", "Winter on Fire: Ukraine's Fight for Freedom", "XOXO", "Zach Galifianakis: Live at the Purple Onion"],
      "result_count_aql": 26,
      "result_ecql": ["13 Minutes", "Amanda Knox", "Amar", "Amateur", "Bright", "Crouching Tiger, Hidden Dragon: Sword of Destiny", "Divanation", "Ever After High: Way Too Wonderland", "First They Killed My Father: A Daughter of Cambodia Remembers", "Joe Rogan: Live", "Marco Polo: One Hundred Eyes", "Mike Epps: Don't Take It Personal", "Oscillating Fan for Your Home", "Our Souls at Night", "Reggie Watts: Spatial", "Smosh: The Movie", "That's My Time: The Todd Lynn Story", "The Comedians of Comedy", "The Panama Papers", "This Film Is Not Yet Rated", "Virunga: Gorillas in Peril", "War Machine", "What Happened, Miss Simone?", "Winter on Fire: Ukraine's Fight for Freedom", "XOXO", "Zach Galifianakis: Live at the Purple Onion"],
      "result_count_ecql": 26,
      "result_sqlpp": ["13 Minutes", "Amanda Knox", "Amar", "Amateur", "Bright", "Crouching Tiger, Hidden Dragon: Sword of Destiny", "Divanation", "Ever After High: Way Too Wonderland", "First They Killed My Father: A Daughter of Cambodia Remembers", "Joe Rogan: Live", "Marco Polo: One Hundred Eyes", "Mike Epps: Don't Take It Personal", "Oscillating Fan for Your Home", "Our Souls at Night", "Reggie Watts: Spatial", "Smosh: The Movie", "That's My Time: The Todd Lynn Story", "The Comedians of Comedy", "The Panama Papers", "This Film Is Not Yet Rated", "Virunga: Gorillas in Peril", "War Machine", "What Happened, Miss Simone?", "Winter on Fire: Ukraine's Fight for Freedom", "XOXO", "Zach Galifianakis: Live at the Purple Onion"],
      "result_count_sqlpp": 26
    },
    {
      "template": 36,
      "question": "How many movies about Persians were released after 1990 ?",
      "aql": "FOR keyword IN Keyword FILTER CONTAINS(keyword.keyword, \"persians\") FOR movie IN 1 INBOUND keyword Tags FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FILTER movie.release_year > 1990 COLLECT WITH COUNT INTO cnt RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR keyword IN Keyword ; FILTER FILTER CONTAINS ( keyword.keyword , \"persians\" ) ; TRAVERSAL FOR movie IN 1 INBOUND keyword Tags ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; FILTER FILTER movie.release_year > 1990 ; AGGREGATE COLLECT WITH COUNT INTO cnt ; RETURN RETURN cnt ;",
      "ecql": "SELECT COUNT (*) AS cnt FROM movie WHERE movie.release_year > 1990 AND movie.keyword @> '[\"Persians\"]'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.release_year > 1990 AND movie.keyword @> '[\"Persians\"]' ; Project COUNT ( * ) AS cnt ; ",
      "sqlpp": "SELECT COUNT (*) AS cnt FROM movie WHERE movie.release_year > 1990 AND movie.keyword CONTAINS 'Persians'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.release_year > 1990 AND movie.keyword CONTAINS 'Persians' ; Project COUNT ( * ) AS cnt ; ",
      "result_aql": ["0"],
      "result_count_aql": 1,
      "result_ecql": ["0"],
      "result_count_ecql": 1,
      "result_sqlpp": ["0"],
      "result_count_sqlpp": 1
    },
    {
      "template": 37,
      "question": "Find all the female actors in the movie \" Saving Private Ryan \"",
      "aql": "FOR movie IN Movie FILTER movie.title == \"Saving Private Ryan\" FOR actor IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor ) FILTER actor.gender == \"female\" RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"Saving Private Ryan\" ; TRAVERSAL FOR actor IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor ) ; FILTER FILTER actor.gender == \"female\" ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.gender = 'female' AND actor.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE movie.id = { SELECT movie.id FROM movie WHERE movie.title = 'Saving Private Ryan' } RETURN actor.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'Saving Private Ryan' ; Project movie.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter movie.id = movie.id ; Return actor.id ; TableScan actor ; Filter actor.gender = 'female' AND actor.id = actor.id ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM ( MATCH {class: Actor, as: actor, where: (gender = 'female')}.outE('Cast').inV('Movie') {as: movie, where: (title = 'Saving Private Ryan')} RETURN actor )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor (gender = 'female') ; Traversal OUT Cast ; Traversal IN Movie movie (title = 'Saving Private Ryan') ; Return actor ; Project actor.name ; ",
      "result_aql": ["Abbe Muschallik", "Amanda Boxer", "Anna Maguire", "Dorothy Grumbar", "Kathleen Byron", "Kathleen Elizabeth Fell", "Michelle Evans", "Nina Muschallik", "Valerie Colgan"],
      "result_count_aql": 9,
      "result_ecql": ["Abbe Muschallik", "Amanda Boxer", "Anna Maguire", "Dorothy Grumbar", "Kathleen Byron", "Kathleen Elizabeth Fell", "Michelle Evans", "Nina Muschallik", "Valerie Colgan"],
      "result_count_ecql": 9,
      "result_sqlpp": ["Abbe Muschallik", "Amanda Boxer", "Anna Maguire", "Dorothy Grumbar", "Kathleen Byron", "Kathleen Elizabeth Fell", "Michelle Evans", "Nina Muschallik", "Valerie Colgan"],
      "result_count_sqlpp": 9
    },
    {
      "template": 38,
      "question": "Find all actors from Canada who acted in \" James Bond \" movies",
      "aql": "FOR movie IN Movie FILTER movie.title == \"James Bond\" FOR actor IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor ) FILTER actor.nationality == \"Canada\" RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"James Bond\" ; TRAVERSAL FOR actor IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor ) ; FILTER FILTER actor.nationality == \"Canada\" ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.nationality = 'Canada' AND actor.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE movie.id = { SELECT movie.id FROM movie WHERE movie.title = 'James Bond' } RETURN actor.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'James Bond' ; Project movie.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter movie.id = movie.id ; Return actor.id ; TableScan actor ; Filter actor.nationality = 'Canada' AND actor.id = actor.id ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM ( MATCH {class: Actor, as: actor, where: (nationality = 'Canada')}.outE('Cast').inV('Movie') {as: movie, where: (title = 'James Bond')} RETURN actor )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor (nationality = 'Canada') ; Traversal OUT Cast ; Traversal IN Movie movie (title = 'James Bond') ; Return actor ; Project actor.name ; ",
      "result_aql": "[]",
      "result_count_aql": 0,
      "result_ecql": "[]",
      "result_count_ecql": 0,
      "result_sqlpp": "[]",
      "result_count_sqlpp": 0
    },
    {
      "template": 39,
      "question": "Find all actors who are from Canada",
      "aql": "FOR actor IN Actor FILTER actor.nationality == \"Canada\" RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.nationality == \"Canada\" ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.nationality = 'Canada'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.nationality = 'Canada' ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM actor WHERE actor.nationality = 'Canada'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.nationality = 'Canada' ; Project actor.name ; ",
      "result_aql": "[]",
      "result_count_aql": 7759,
      "result_ecql": "[]",
      "result_count_ecql": 7759,
      "result_sqlpp": "[]",
      "result_count_sqlpp": 7759
    },
    {
      "template": 40,
      "question": "Which movies did \" Alfred Hitchcock \" direct ?",
      "aql": "FOR director IN Director FILTER director.name == \"Alfred Hitchcock\" FOR movie IN 1 INBOUND director DirectedBy FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR director IN Director ; FILTER FILTER director.name == \"Alfred Hitchcock\" ; TRAVERSAL FOR movie IN 1 INBOUND director DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (movie:Movie)-[r:DirectedBy]->(director:Director) WHERE director.id = { SELECT director.id FROM director WHERE director.name = 'Alfred Hitchcock' } RETURN movie.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan director ; Filter director.name = 'Alfred Hitchcock' ; Project director.id ; Match (movie:Movie)-[r:DirectedBy]->(director:Director) ; Filter director.id = director.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM ( MATCH {class: Movie, as: movie}.outE('DirectedBy').inV('Director') {as: director, where: (name = 'Alfred Hitchcock')} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Movie movie ; Traversal OUT DirectedBy ; Traversal IN Director director (name = 'Alfred Hitchcock') ; Return movie ; Project movie.title ; ",
      "result_aql": ["Always Tell Your Wife", "An Elastic Affair", "Aventure malgache", "Blackmail", "Bon Voyage", "Champagne", "Dial M for Murder", "Downhill", "Easy Virtue", "Elstree Calling", "Family Plot", "Foreign Correspondent", "Frenzy", "I Confess", "Jamaica Inn", "Juno and the Paycock", "Lifeboat", "Marnie", "Mary", "Memory of the Camps", "Mr. & Mrs. Smith", "Murder!", "North by Northwest", "Notorious", "Number 13", "Number Seventeen", "Psycho", "Rear Window", "Rebecca", "Rich and Strange", "Rope", "Sabotage", "Saboteur", "Secret Agent", "Shadow of a Doubt", "Sound Test for Blackmail", "Spellbound", "Stage Fright", "Strangers on a Train", "Suspicion", "The 39 Steps", "The Birds", "The Farmer's Wife", "The Fighting Generation", "The Lady Vanishes", "The Lodger: A Story of the London Fog", "The Man Who Knew Too Much", "The Man Who Knew Too Much", "The Manxman", "The Mountain Eagle", "The Paradine Case", "The Pleasure Garden", "The Ring", "The Skin Game", "The Trouble with Harry", "The Wrong Man", "To Catch a Thief", "Topaz", "Torn Curtain", "Under Capricorn", "Vertigo", "Waltzes from Vienna", "Watchtower Over Tomorrow", "Young and Innocent"],
      "result_count_aql": 64,
      "result_ecql": ["Always Tell Your Wife", "An Elastic Affair", "Aventure malgache", "Blackmail", "Bon Voyage", "Champagne", "Dial M for Murder", "Downhill", "Easy Virtue", "Elstree Calling", "Family Plot", "Foreign Correspondent", "Frenzy", "I Confess", "Jamaica Inn", "Juno and the Paycock", "Lifeboat", "Marnie", "Mary", "Memory of the Camps", "Mr. & Mrs. Smith", "Murder!", "North by Northwest", "Notorious", "Number 13", "Number Seventeen", "Psycho", "Rear Window", "Rebecca", "Rich and Strange", "Rope", "Sabotage", "Saboteur", "Secret Agent", "Shadow of a Doubt", "Sound Test for Blackmail", "Spellbound", "Stage Fright", "Strangers on a Train", "Suspicion", "The 39 Steps", "The Birds", "The Farmer's Wife", "The Fighting Generation", "The Lady Vanishes", "The Lodger: A Story of the London Fog", "The Man Who Knew Too Much", "The Man Who Knew Too Much", "The Manxman", "The Mountain Eagle", "The Paradine Case", "The Pleasure Garden", "The Ring", "The Skin Game", "The Trouble with Harry", "The Wrong Man", "To Catch a Thief", "Topaz", "Torn Curtain", "Under Capricorn", "Vertigo", "Waltzes from Vienna", "Watchtower Over Tomorrow", "Young and Innocent"],
      "result_count_ecql": 64,
      "result_sqlpp": ["Always Tell Your Wife", "An Elastic Affair", "Aventure malgache", "Blackmail", "Bon Voyage", "Champagne", "Dial M for Murder", "Downhill", "Easy Virtue", "Elstree Calling", "Family Plot", "Foreign Correspondent", "Frenzy", "I Confess", "Jamaica Inn", "Juno and the Paycock", "Lifeboat", "Marnie", "Mary", "Memory of the Camps", "Mr. & Mrs. Smith", "Murder!", "North by Northwest", "Notorious", "Number 13", "Number Seventeen", "Psycho", "Rear Window", "Rebecca", "Rich and Strange", "Rope", "Sabotage", "Saboteur", "Secret Agent", "Shadow of a Doubt", "Sound Test for Blackmail", "Spellbound", "Stage Fright", "Strangers on a Train", "Suspicion", "The 39 Steps", "The Birds", "The Farmer's Wife", "The Fighting Generation", "The Lady Vanishes", "The Lodger: A Story of the London Fog", "The Man Who Knew Too Much", "The Man Who Knew Too Much", "The Manxman", "The Mountain Eagle", "The Paradine Case", "The Pleasure Garden", "The Ring", "The Skin Game", "The Trouble with Harry", "The Wrong Man", "To Catch a Thief", "Topaz", "Torn Curtain", "Under Capricorn", "Vertigo", "Waltzes from Vienna", "Watchtower Over Tomorrow", "Young and Innocent"],
      "result_count_sqlpp": 64
    },
    {
      "template": 41,
      "question": "How many movies did \" Humphrey Bogart \" act in before 1942 ?",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Humphrey Bogart\" FOR movie IN 1 OUTBOUND actor Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FILTER movie.release_year < 1942 COLLECT WITH COUNT INTO cnt RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Humphrey Bogart\" ; TRAVERSAL FOR movie IN 1 OUTBOUND actor Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; FILTER FILTER movie.release_year < 1942 ; AGGREGATE COLLECT WITH COUNT INTO cnt ; RETURN RETURN cnt ;",
      "ecql": "SELECT COUNT (*) AS cnt FROM movie WHERE movie.release_year < 1942 AND movie.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE actor.id = { SELECT actor.id FROM actor WHERE actor.name = 'Humphrey Bogart' } RETURN movie.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Humphrey Bogart' ; Project actor.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter actor.id = actor.id ; Return movie.id ; TableScan movie ; Filter movie.release_year < 1942 AND movie.id = movie.id ; Project COUNT ( * ) AS cnt ; ",
      "sqlpp": "SELECT COUNT(*) AS cnt FROM ( MATCH {class: Actor, as: actor, where: (name = 'Brad Pitt')}.outE('Cast').inV('Movie') {as: movie, where: (release_year < 1942)} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor (name = 'Brad Pitt') ; Traversal OUT Cast ; Traversal IN Movie movie (release_year < 1942) ; Return movie ; Project COUNT ( * ) AS cnt ; ",
      "result_aql": ["28"],
      "result_count_aql": 1,
      "result_ecql": ["26"],
      "result_count_ecql": 1,
      "result_sqlpp": ["26"],
      "result_count_sqlpp": 1
    },
    {
      "template": 42,
      "question": "How many movies did \" Shahab Hosseini \" act in",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Shahab Hosseini\" FOR movie IN 1 OUTBOUND actor Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) COLLECT WITH COUNT INTO cnt RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Shahab Hosseini\" ; TRAVERSAL FOR movie IN 1 OUTBOUND actor Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; AGGREGATE COLLECT WITH COUNT INTO cnt ; RETURN RETURN cnt ;",
      "ecql": "MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE actor.id = { SELECT actor.id FROM actor WHERE actor.name = 'Shahab Hosseini' } WITH COUNT (*) AS cnt RETURN cnt",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ With _ Return _ | TableScan actor ; Filter actor.name = 'Shahab Hosseini' ; Project actor.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter actor.id = actor.id ; With COUNT ( * ) AS cnt ; Return cnt ; ",
      "sqlpp": "SELECT COUNT(*) AS cnt FROM ( MATCH {class: Actor, as: actor, where: (name = 'Shahab Hosseini')}.outE('Cast').inV('Movie') {as: movie} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor (name = 'Shahab Hosseini') ; Traversal OUT Cast ; Traversal IN Movie movie ; Return movie ; Project COUNT ( * ) AS cnt ; ",
      "result_aql": ["7"],
      "result_count_aql": 1,
      "result_ecql": ["7"],
      "result_count_ecql": 1,
      "result_sqlpp": ["7"],
      "result_count_sqlpp": 1
    },
    {
      "template": 43,
      "question": "What is the genre of the movie \" Jurassic Park \" ?",
      "aql": "FOR movie IN Movie FILTER movie.title == \"Jurassic Park\" FOR genre IN 1 OUTBOUND movie Classification FILTER IS_SAME_COLLECTION ( \"Genre\", genre ) RETURN genre.genre",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"Jurassic Park\" ; TRAVERSAL FOR genre IN 1 OUTBOUND movie Classification ; FILTER FILTER IS_SAME_COLLECTION ( \"Genre\" , genre ) ; RETURN RETURN genre.genre ;",
      "ecql": "SELECT JSONB_ARRAY_ELEMENTS(movie.genre) AS genre FROM movie WHERE movie.title = 'Jurassic Park'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'Jurassic Park' ; Project JSONB_ARRAY_ELEMENTS ( movie.genre ) AS genre ; ",
      "sqlpp": "SELECT movie.genre FROM movie WHERE movie.title = 'Jurassic Park'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'Jurassic Park' ; Project movie.genre ; ",
      "result_aql": ["Adventure", "Drama", "Sci-Fi", "Thriller"],
      "result_count_aql": 4,
      "result_ecql": ["Adventure", "Drama", "Sci-Fi", "Thriller"],
      "result_count_ecql": 4,
      "result_sqlpp": ["Adventure", "Drama", "Sci-Fi", "Thriller"],
      "result_count_sqlpp": 4
    },
    {
      "template": 44,
      "question": "What is the number of movies that \" Brad Pitt \" acts in per year ?",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Brad Pitt\" FOR movie IN 1 OUTBOUND actor Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) COLLECT year = movie.release_year WITH COUNT INTO count RETURN { year, count }",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Brad Pitt\" ; TRAVERSAL FOR movie IN 1 OUTBOUND actor Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; AGGREGATE COLLECT year = movie.release_year WITH COUNT INTO count ; RETURN RETURN { year , count } ;",
      "ecql": "SELECT movie.release_year, COUNT (*) AS cnt FROM movie WHERE movie.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE actor.id = { SELECT actor.id FROM actor WHERE actor.name = 'Brad Pitt' } RETURN movie.id } GROUP BY movie.release_year",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ GroupBy _ Project _ | TableScan actor ; Filter actor.name = 'Brad Pitt' ; Project actor.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter actor.id = actor.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; GroupBy movie.release_year ; Project movie.release_year COUNT ( * ) AS cnt ; ",
      "sqlpp": "SELECT movie.release_year, COUNT(*) AS cnt FROM ( MATCH {class: Actor, as: actor, where: (name = 'Brad Pitt')}.outE('Cast').inV('Movie') {as: movie} RETURN movie ) GROUP BY movie.release_year",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ GroupBy _ Project _ | Match Actor actor (name = 'Brad Pitt') ; Traversal OUT Cast ; Traversal IN Movie movie ; Return movie ; GroupBy movie.release_year ; Project movie.release_year COUNT ( * ) AS cnt ; ",
      "result_aql": ["1987,2", "1989,1", "1990,1", "1991,1", "1992,2", "1993,2", "1994,2", "1995,3", "1996,2", "1997,2", "1998,1", "1999,1", "2000,1", "2001,1", "2002,2", "2003,1", "2004,1", "2005,2", "2007,1", "2008,2", "2009,4", "2010,2", "2011,2", "2012,5", "2013,2", "2014,4", "2015,1", "2016,4", "2017,1"],
      "result_count_aql": 29,
      "result_ecql": ["1987,2", "1989,1", "1990,1", "1991,1", "1992,2", "1993,2", "1994,2", "1995,3", "1996,2", "1997,1", "1998,1", "1999,1", "2000,1", "2001,1", "2002,2", "2003,1", "2004,1", "2005,2", "2007,1", "2008,2", "2009,4", "2010,2", "2011,2", "2012,4", "2013,2", "2014,4", "2015,1", "2016,4", "2017,1"],
      "result_count_ecql": 29,
      "result_sqlpp": ["1987,2", "1989,1", "1990,1", "1991,1", "1992,2", "1993,2", "1994,2", "1995,3", "1996,2", "1997,1", "1998,1", "1999,1", "2000,1", "2001,1", "2002,2", "2003,1", "2004,1", "2005,2", "2007,1", "2008,2", "2009,4", "2010,2", "2011,2", "2012,4", "2013,2", "2014,4", "2015,1", "2016,4", "2017,1"],
      "result_count_sqlpp": 29
    },
    {
      "template": 45,
      "question": "Find the movie which is classified in the most number of genres",
      "aql": "FOR movie IN Movie FOR genre IN 1 OUTBOUND movie Classification FILTER IS_SAME_COLLECTION ( \"Genre\", genre ) COLLECT m = movie WITH COUNT INTO cnt SORT cnt DESC LIMIT 1 RETURN m.title",
      "aql_mir": "COLLECTION _ ; TRAVERSAL _ ; FILTER _ ; AGGREGATE _ ; SORT _ ; LIMIT _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; TRAVERSAL FOR genre IN 1 OUTBOUND movie Classification ; FILTER FILTER IS_SAME_COLLECTION ( \"Genre\" , genre ) ; AGGREGATE COLLECT m = movie WITH COUNT INTO cnt ; SORT SORT cnt DESC ; LIMIT LIMIT 1 ; RETURN RETURN m.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.genre IS NOT NULL ORDER BY JSONB_ARRAY_LENGTH(movie.genre) DESC LIMIT 1",
      "ecql_mir": "TableScan _ Filter _ OrderBy _ Project _ | TableScan movie ; Filter movie.genre IS NOT NULL ; OrderBy JSONB_ARRAY_LENGTH ASC ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM ( SELECT movie.title, SIZE(movie.genre) AS cnt FROM movie ORDER BY cnt DESC LIMIT 1 )",
      "sqlpp_mir": "TableScan _ OrderBy _ Limit _ Project _ Project _ | TableScan movie ; OrderBy cnt DESC ; Limit 1 ; Project movie.title SIZE ( movie.genre ) AS cnt ; Project movie.title ; ",
      "result_aql": ["Melon Soda"],
      "result_count_aql": 1,
      "result_ecql": ["Melon Soda"],
      "result_count_ecql": 1,
      "result_sqlpp": ["Melon Soda"],
      "result_count_sqlpp": 1
    },
    {
      "template": 46,
      "question": "In what city was \" Kevin Spacey \" born ?",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Kevin Spacey\" RETURN actor.birth_city",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Kevin Spacey\" ; RETURN RETURN actor.birth_city ;",
      "ecql": "SELECT actor.birth_city FROM actor WHERE actor.name = 'Kevin Spacey'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Kevin Spacey' ; Project actor.birth_city ; ",
      "sqlpp": "SELECT actor.birth_city FROM actor WHERE actor.name = 'Kevin Spacey'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Kevin Spacey' ; Project actor.birth_city ; ",
      "result_aql": ["South Orange"],
      "result_count_aql": 1,
      "result_ecql": ["South Orange"],
      "result_count_ecql": 1,
      "result_sqlpp": ["South Orange"],
      "result_count_sqlpp": 1
    },
    {
      "template": 47,
      "question": "List \" James Bond \" directors",
      "aql": "FOR movie IN Movie FILTER movie.title == \"James Bond\" FOR director IN 1 OUTBOUND movie DirectedBy FILTER IS_SAME_COLLECTION ( \"Director\", director ) RETURN director.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"James Bond\" ; TRAVERSAL FOR director IN 1 OUTBOUND movie DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Director\" , director ) ; RETURN RETURN director.name ;",
      "ecql": "SELECT director.name FROM director WHERE director.id = { MATCH (movie:Movie)-[r:DirectedBy]->(director:Director) WHERE movie.id = { SELECT movie.id FROM movie WHERE movie.title = 'James Bond' } RETURN director.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'James Bond' ; Project movie.id ; Match (movie:Movie)-[r:DirectedBy]->(director:Director) ; Filter movie.id = movie.id ; Return director.id ; TableScan director ; Filter director.id = director.id ; Project director.name ; ",
      "sqlpp": "SELECT director.name FROM ( MATCH {class: Movie, as: movie, where: (title = 'James Bond')}.outE('DirectedBy').inV('Director') {as: director} RETURN director )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Movie movie (title = 'James Bond') ; Traversal OUT DirectedBy ; Traversal IN Director director ; Return director ; Project director.name ; ",
      "result_aql": ["Baiju Kottarakkara", "Biju Kottarakkara", "Sai Kishore Macha"],
      "result_count_aql": 3,
      "result_ecql": ["Baiju Kottarakkara", "Biju Kottarakkara", "Sai Kishore Macha"],
      "result_count_ecql": 3,
      "result_sqlpp": ["Baiju Kottarakkara", "Biju Kottarakkara", "Sai Kishore Macha"],
      "result_count_sqlpp": 3
    },
    {
      "template": 48,
      "question": "List all the Sci-Fi movies which released in 2010",
      "aql": "FOR genre IN Genre FILTER genre.genre == \"Sci-Fi\" FOR movie IN 1 INBOUND genre Classification FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FILTER movie.release_year == 2010 RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR genre IN Genre ; FILTER FILTER genre.genre == \"Sci-Fi\" ; TRAVERSAL FOR movie IN 1 INBOUND genre Classification ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; FILTER FILTER movie.release_year == 2010 ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.release_year = 2010 AND movie.genre @> '[\"Sci-Fi\"]'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.release_year = 2010 AND movie.genre @> '[\"Sci-Fi\"]' ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM movie WHERE movie.release_year = 2010 AND movie.genre CONTAINS 'Sci-Fi'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.release_year = 2010 AND movie.genre CONTAINS 'Sci-Fi' ; Project movie.title ; ",
      "result_aql": "[]",
      "result_count_aql": 1653,
      "result_ecql": "[]",
      "result_count_ecql": 1653,
      "result_sqlpp": "[]",
      "result_count_sqlpp": 1653
    },
    {
      "template": 49,
      "question": "Find all movies produced by company \" Walt Disney \" after 2010",
      "aql": "FOR company IN Company FILTER company.name == \"Walt Disney\" FOR movie IN 1 OUTBOUND company Copyright FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FILTER movie.release_year > 2010 RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR company IN Company ; FILTER FILTER company.name == \"Walt Disney\" ; TRAVERSAL FOR movie IN 1 OUTBOUND company Copyright ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; FILTER FILTER movie.release_year > 2010 ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (company:Company)-[r:Copyright]->(movie:Movie) WHERE company.id = { SELECT company.id FROM company WHERE company.name = 'Walt Disney' } RETURN movie.id } AND movie.release_year > 2010",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan company ; Filter company.name = 'Walt Disney' ; Project company.id ; Match (company:Company)-[r:Copyright]->(movie:Movie) ; Filter company.id = company.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id AND movie.release_year > 2010 ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM (MATCH {class: Company, as: company, where: (name = 'Walt Disney')}.outE('Copyright').inV('Movie') {as: movie, where: (release_year > 2010)} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Company company (name = 'Walt Disney') ; Traversal OUT Copyright ; Traversal IN Movie movie (release_year > 2010) ; Return movie ; Project movie.title ; ",
      "result_aql": "[]",
      "result_count_aql": 0,
      "result_ecql": "[]",
      "result_count_ecql": 0,
      "result_sqlpp": "[]",
      "result_count_sqlpp": 0
    },
    {
      "template": 50,
      "question": "What is the number of actors in the movie \" Grumpier Old Men \" ?",
      "aql": "FOR movie IN Movie FILTER movie.title == \"Grumpier Old Men\" FOR actor IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor ) COLLECT WITH COUNT INTO cnt RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"Grumpier Old Men\" ; TRAVERSAL FOR actor IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor ) ; AGGREGATE COLLECT WITH COUNT INTO cnt ; RETURN RETURN cnt ;",
      "ecql": "MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE movie.id = { SELECT movie.id FROM movie WHERE movie.title = 'Grumpier Old Men' } WITH COUNT (*) AS cnt RETURN cnt",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ With _ Return _ | TableScan movie ; Filter movie.title = 'Grumpier Old Men' ; Project movie.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter movie.id = movie.id ; With COUNT ( * ) AS cnt ; Return cnt ; ",
      "sqlpp": "SELECT COUNT(*) AS cnt FROM ( MATCH {class: Actor, as: actor}.outE('Cast').inV('Movie') {as: movie, where: (title = 'Grumpier Old Men')} RETURN actor )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor ; Traversal OUT Cast ; Traversal IN Movie movie (title = 'Grumpier Old Men') ; Return actor ; Project COUNT ( * ) AS cnt ; ",
      "result_aql": ["55"],
      "result_count_aql": 1,
      "result_ecql": ["55"],
      "result_count_ecql": 1,
      "result_sqlpp": ["55"],
      "result_count_sqlpp": 1
    },
    {
      "template": 51,
      "question": "List all the movies directed by \" Asghar Farhadi \" in which \" Taraneh Alidoosti \" played",
      "aql": "FOR director IN Director FILTER director.name == \"Asghar Farhadi\" FOR movie IN 1 INBOUND director DirectedBy FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FOR actor IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor ) FILTER actor.name == \"Taraneh Alidoosti\" RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR director IN Director ; FILTER FILTER director.name == \"Asghar Farhadi\" ; TRAVERSAL FOR movie IN 1 INBOUND director DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; TRAVERSAL FOR actor IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor ) ; FILTER FILTER actor.name == \"Taraneh Alidoosti\" ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (actor:Actor)-[:Cast]->(movie:Movie), (movie:Movie)-[:DirectedBy]->(director:Director) WHERE actor.id = { SELECT actor.id FROM actor WHERE actor.name = 'Taraneh Alidoosti' } AND director.id = { SELECT director.id FROM director WHERE director.name = 'Asghar Farhadi' } RETURN movie.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Taraneh Alidoosti' ; Project actor.id ; TableScan director ; Filter director.name = 'Asghar Farhadi' ; Project director.id ; Match (actor:Actor)-[:Cast]->(movie:Movie), (movie:Movie)-[:DirectedBy]->(director:Director) ; Filter actor.id = actor.id AND director.id = director.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM ( MATCH {class: Actor, as: actor, where: (name = 'Taraneh Alidoosti')}.outE('Cast').inV('Movie') {as: movie}.outE('DirectedBy').inV('Director') {as: director, where: (name = 'Asghar Farhadi')} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor (name = 'Taraneh Alidoosti') ; Traversal OUT Cast ; Traversal IN Movie movie ; Traversal OUT DirectedBy ; Traversal IN Director director (name = 'Asghar Farhadi') ; Return movie ; Project movie.title ; ",
      "result_aql": "[]",
      "result_count_aql": 0,
      "result_ecql": "[]",
      "result_count_ecql": 0,
      "result_sqlpp": "[]",
      "result_count_sqlpp": 0
    },
    {
      "template": 52,
      "question": "What are the movies related to nuclear weapons",
      "aql": "FOR keyword IN Keyword FILTER CONTAINS(keyword.keyword, \"nuclear-weapons\") FOR movie IN 1 INBOUND keyword Tags FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR keyword IN Keyword ; FILTER FILTER CONTAINS ( keyword.keyword , \"nuclear-weapons\" ) ; TRAVERSAL FOR movie IN 1 INBOUND keyword Tags ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.keyword @> '[\"nuclear-weapons\"]'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.keyword @> '[\"nuclear-weapons\"]' ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM movie WHERE movie.keyword CONTAINS 'nuclear-weapons'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.keyword CONTAINS 'nuclear-weapons' ; Project movie.title ; ",
      "result_aql": ["Above and Beyond", "After the Apocalypse", "Amazing Grace and Chuck", "America's Lost Bombs: The True Story of Broken Arrows", "Armageddon", "Atomic Device", "Atomic Journeys: Welcome to Ground Zero", "Atomic Rulers", "Attack from Space", "Battlefield Earth", "Behind Enemy Lines II: Axis of Evil", "Broken Arrow", "Buried in the Backyard", "Buried on Sunday", "Captain America", "Chain of Command", "Cloak and Dagger", "Copenhagen", "Criminal", "Daikaijû Gamera", "Day One", "Deep Impact", "Desert Bloom", "Det meningsløse 2001", "Die Nervenprobe - Kuba-Krise '62", "Die Wismut", "Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb", "Edge of Darkness", "Eve of Destruction", "Fail Safe", "Falling Fire", "Fallout", "Fat Man and Little Boy", "First Strike", "Freedom Strike", "GoldenEye", "Hachi-gatsu no kyôshikyoku", "Hiroshima mon amour", "History of Nuclear Energy: Problems and Promises", "History of the National Security State", "Humanity's End", "I predatori di Atlantide", "Independence Day: Resurgence", "Infinity", "It!", "James Batman", "King Dinosaur", "Koyaanisqatsi", "Leading to War", "MacGyver: Trail to Doomsday", "Missile", "Mivtza Hamaniya", "Mobster", "Mulholland Falls", "Never Say Never Again", "Notes on Nuclear War", "Nuclear Tipping Point", "On the Brink: Doomsday", "One Night Stand", "Opoznanie", "Original Child Bomb", "Planübung", "Plutonium Circus", "Regulus: The First Nuclear Missile Submarines", "Revisiting 'Fail-Safe'", "Rocket Attack U.S.A.", "Roswell: The Aliens Attack", "Scorcher", "Seven Days in May", "Seven Islands", "Shack Out on 101", "Shadow of Terror", "Sista varningen!", "Solar Strike", "Space Cowboys", "Special Bulletin", "Spies Like Us", "Star Trek IV: The Voyage Home", "Stargate", "Starship Troopers", "Strategic Air Command", "Submarines: Sharks of Steel", "Superman", "Superman IV: The Quest for Peace", "Taiyô wo nusunda otoko", "Terminator 3: Rise of the Machines", "The Abyss", "The Atomic Cafe", "The Atomic City", "The Beginning or the End", "The Day After", "The Day After Trinity", "The Dictator", "The Expendables 2", "The Forgotten Bomb", "The Hunt for Red October", "The Last Man", "The Loch Long Monster", "The Missiles of October", "The Mouse That Roared", "The Patriot", "The Peacekeeper", "The Reflecting Skin", "The Road to Total War", "The Second Civil War", "The Spy Who Loved Me", "The Sum of All Fears", "The Time is now - Jetzt ist die Zeit", "The Trials of J. Robert Oppenheimer", "The War Game", "The World Is Not Enough", "Thirteen Days", "Thunderball", "Tomorrow Never Dies", "Trinity and Beyond: The Atomic Bomb Movie", "True Lies", "Twilight's Last Gleaming", "Under Siege", "WarGames", "What a Way to Go: Life at the End of Emmire", "Without Warning"],
      "result_count_aql": 120,
      "result_ecql": ["Above and Beyond", "After the Apocalypse", "Amazing Grace and Chuck", "America's Lost Bombs: The True Story of Broken Arrows", "Armageddon", "Atomic Device", "Atomic Journeys: Welcome to Ground Zero", "Atomic Rulers", "Attack from Space", "Battlefield Earth", "Behind Enemy Lines II: Axis of Evil", "Broken Arrow", "Buried in the Backyard", "Buried on Sunday", "Captain America", "Chain of Command", "Cloak and Dagger", "Copenhagen", "Criminal", "Daikaijû Gamera", "Day One", "Deep Impact", "Desert Bloom", "Det meningsløse 2001", "Die Nervenprobe - Kuba-Krise '62", "Die Wismut", "Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb", "Edge of Darkness", "Eve of Destruction", "Fail Safe", "Falling Fire", "Fallout", "Fat Man and Little Boy", "First Strike", "Freedom Strike", "GoldenEye", "Hachi-gatsu no kyôshikyoku", "Hiroshima mon amour", "History of Nuclear Energy: Problems and Promises", "History of the National Security State", "Humanity's End", "I predatori di Atlantide", "Independence Day: Resurgence", "Infinity", "It!", "James Batman", "King Dinosaur", "Koyaanisqatsi", "Leading to War", "MacGyver: Trail to Doomsday", "Missile", "Mivtza Hamaniya", "Mobster", "Mulholland Falls", "Never Say Never Again", "Nuclear Tipping Point", "On the Brink: Doomsday", "One Night Stand", "Opoznanie", "Original Child Bomb", "Planübung", "Plutonium Circus", "Regulus: The First Nuclear Missile Submarines", "Revisiting 'Fail-Safe'", "Rocket Attack U.S.A.", "Roswell: The Aliens Attack", "Scorcher", "Seven Days in May", "Seven Islands", "Shack Out on 101", "Shadow of Terror", "Sista varningen!", "Solar Strike", "Space Cowboys", "Special Bulletin", "Spies Like Us", "Star Trek IV: The Voyage Home", "Stargate", "Starship Troopers", "Strategic Air Command", "Submarines: Sharks of Steel", "Superman", "Superman IV: The Quest for Peace", "Taiyô wo nusunda otoko", "Terminator 3: Rise of the Machines", "The Abyss", "The Atomic Cafe", "The Atomic City", "The Beginning or the End", "The Day After", "The Day After Trinity", "The Dictator", "The Expendables 2", "The Forgotten Bomb", "The Hunt for Red October", "The Last Man", "The Loch Long Monster", "The Missiles of October", "The Mouse That Roared", "The Patriot", "The Peacekeeper", "The Reflecting Skin", "The Road to Total War", "The Second Civil War", "The Spy Who Loved Me", "The Sum of All Fears", "The Time is now - Jetzt ist die Zeit", "The Trials of J. Robert Oppenheimer", "The War Game", "The World Is Not Enough", "Thirteen Days", "Thunderball", "Tomorrow Never Dies", "Trinity and Beyond: The Atomic Bomb Movie", "True Lies", "Twilight's Last Gleaming", "Under Siege", "WarGames", "What a Way to Go: Life at the End of Emmire", "Without Warning"],
      "result_count_ecql": 120,
      "result_sqlpp": ["Above and Beyond", "After the Apocalypse", "Amazing Grace and Chuck", "America's Lost Bombs: The True Story of Broken Arrows", "Armageddon", "Atomic Device", "Atomic Journeys: Welcome to Ground Zero", "Atomic Rulers", "Attack from Space", "Battlefield Earth", "Behind Enemy Lines II: Axis of Evil", "Broken Arrow", "Buried in the Backyard", "Buried on Sunday", "Captain America", "Chain of Command", "Cloak and Dagger", "Copenhagen", "Criminal", "Daikaijû Gamera", "Day One", "Deep Impact", "Desert Bloom", "Det meningsløse 2001", "Die Nervenprobe - Kuba-Krise '62", "Die Wismut", "Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb", "Edge of Darkness", "Eve of Destruction", "Fail Safe", "Falling Fire", "Fallout", "Fat Man and Little Boy", "First Strike", "Freedom Strike", "GoldenEye", "Hachi-gatsu no kyôshikyoku", "Hiroshima mon amour", "History of Nuclear Energy: Problems and Promises", "History of the National Security State", "Humanity's End", "I predatori di Atlantide", "Independence Day: Resurgence", "Infinity", "It!", "James Batman", "King Dinosaur", "Koyaanisqatsi", "Leading to War", "MacGyver: Trail to Doomsday", "Missile", "Mivtza Hamaniya", "Mobster", "Mulholland Falls", "Never Say Never Again", "Nuclear Tipping Point", "On the Brink: Doomsday", "One Night Stand", "Opoznanie", "Original Child Bomb", "Planübung", "Plutonium Circus", "Regulus: The First Nuclear Missile Submarines", "Revisiting 'Fail-Safe'", "Rocket Attack U.S.A.", "Roswell: The Aliens Attack", "Scorcher", "Seven Days in May", "Seven Islands", "Shack Out on 101", "Shadow of Terror", "Sista varningen!", "Solar Strike", "Space Cowboys", "Special Bulletin", "Spies Like Us", "Star Trek IV: The Voyage Home", "Stargate", "Starship Troopers", "Strategic Air Command", "Submarines: Sharks of Steel", "Superman", "Superman IV: The Quest for Peace", "Taiyô wo nusunda otoko", "Terminator 3: Rise of the Machines", "The Abyss", "The Atomic Cafe", "The Atomic City", "The Beginning or the End", "The Day After", "The Day After Trinity", "The Dictator", "The Expendables 2", "The Forgotten Bomb", "The Hunt for Red October", "The Last Man", "The Loch Long Monster", "The Missiles of October", "The Mouse That Roared", "The Patriot", "The Peacekeeper", "The Reflecting Skin", "The Road to Total War", "The Second Civil War", "The Spy Who Loved Me", "The Sum of All Fears", "The Time is now - Jetzt ist die Zeit", "The Trials of J. Robert Oppenheimer", "The War Game", "The World Is Not Enough", "Thirteen Days", "Thunderball", "Tomorrow Never Dies", "Trinity and Beyond: The Atomic Bomb Movie", "True Lies", "Twilight's Last Gleaming", "Under Siege", "WarGames", "What a Way to Go: Life at the End of Emmire", "Without Warning"],
      "result_count_sqlpp": 120
    },
    {
      "template": 53,
      "question": "Find all the female actors from Austin",
      "aql": "FOR actor IN Actor FILTER actor.birth_city == \"Austin\" AND actor.gender == \"female\" RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.birth_city == \"Austin\" AND actor.gender == \"female\" ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.gender = 'female' AND actor.birth_city = 'Austin'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.gender = 'female' AND actor.birth_city = 'Austin' ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM actor WHERE actor.gender = 'female' AND actor.birth_city = 'Austin'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.gender = 'female' AND actor.birth_city = 'Austin' ; Project actor.name ; ",
      "result_aql": ["Adrienne Smiridellis", "Alecia Batson", "Alexa Doggett", "Allie Carico", "Allison Wittliff", "Amanda Hope", "Amanda Kay Goggin", "Amber Heard", "Amy Earhart", "Angela Bettis", "Angela Thompson", "Annie Bond", "Aria Whitney", "Arianne Martin", "Ashlyn Molloy", "Aurora Marie Chase", "Bobbi Billard", "Caitlin Wehrle", "Carly Fiorina", "Cheri Cabiya", "Christina Murphy", "Ciara", "Crystal Crawford", "Dakota Johnson", "Dannie Helen Loraine Knowles", "Dawn Dunlap", "Echo Johnson", "Elaine Anderson", "Elena Hurst", "Elise Ivy", "Elizabeth Gwynne Wilson", "Elizabeth Rogers", "Emma Nicolas", "Evelyn Courtney", "Grace Phipps", "Hannah Nicolas", "Heather Kafka", "Janelle Johnson Dolenz", "Jennifer Matyear", "Jennifer Rovero", "Jessica Looney", "Jill Winn", "Johanna Goldsmith", "Julia Lashae", "Kacey Jordan", "Kandace Krueger", "Karen Kuykendall", "Karina Clark", "Kate Krause", "Katherine Goodrich", "Kathy Valentine", "Katie Fountain", "Katy Dunlap", "Kelly Winn", "Kelsey Higgs", "Kimberly Barnett", "Kimi Bateman", "Kristen Noelle Devine", "Krystal Morton", "Kyle MacDonnell", "Lana Dieterich", "Lauren Eichner", "Leigh Kilton", "Lella Cuberli", "Leslie Winston", "Lexi Moeller", "Lilas Lane", "Lindsey Robertson", "Maia Petee", "Mardi DeLong", "Margaret Easley", "Marguerite Warner", "Marianne Hyatt", "May Emory", "Megan Devine", "Megan Johnson", "Micaela Phillips", "Michelle Forbes", "Morgan Farris", "Muriel Duckworth", "Natalie Hultman", "Natalie Nouri", "Nellie Connally", "Nieko Mann", "Percy Haswell", "Rachel Beth Reznick", "Robin Prough", "Sarah Hagan", "Sarah Jarosz", "Sarah Nouri", "Sarah Prikryl", "Sarah Talbot", "Shannon Morris", "Shelly Kristaponis", "Stacy Lynn Austin", "Susanna Boney", "Suzan Kaminga", "Thea Marie", "Tomi Barrett", "Tonie Perensky", "Tracy Arnold", "Trillium", "Wallis Currie-Wood", "Zoe Graham", "Zoe Keller"],
      "result_count_aql": 105,
      "result_ecql": ["Adrienne Smiridellis", "Alecia Batson", "Alexa Doggett", "Allie Carico", "Allison Wittliff", "Amanda Hope", "Amanda Kay Goggin", "Amber Heard", "Amy Earhart", "Angela Bettis", "Angela Thompson", "Annie Bond", "Aria Whitney", "Arianne Martin", "Ashlyn Molloy", "Aurora Marie Chase", "Bobbi Billard", "Caitlin Wehrle", "Carly Fiorina", "Cheri Cabiya", "Christina Murphy", "Ciara", "Crystal Crawford", "Dakota Johnson", "Dannie Helen Loraine Knowles", "Dawn Dunlap", "Echo Johnson", "Elaine Anderson", "Elena Hurst", "Elise Ivy", "Elizabeth Gwynne Wilson", "Elizabeth Rogers", "Emma Nicolas", "Evelyn Courtney", "Grace Phipps", "Hannah Nicolas", "Heather Kafka", "Janelle Johnson Dolenz", "Jennifer Matyear", "Jennifer Rovero", "Jessica Looney", "Jill Winn", "Johanna Goldsmith", "Julia Lashae", "Kacey Jordan", "Kandace Krueger", "Karen Kuykendall", "Karina Clark", "Kate Krause", "Katherine Goodrich", "Kathy Valentine", "Katie Fountain", "Katy Dunlap", "Kelly Winn", "Kelsey Higgs", "Kimberly Barnett", "Kimi Bateman", "Kristen Noelle Devine", "Krystal Morton", "Kyle MacDonnell", "Lana Dieterich", "Lauren Eichner", "Leigh Kilton", "Lella Cuberli", "Leslie Winston", "Lexi Moeller", "Lilas Lane", "Lindsey Robertson", "Maia Petee", "Mardi DeLong", "Margaret Easley", "Marguerite Warner", "Marianne Hyatt", "May Emory", "Megan Devine", "Megan Johnson", "Micaela Phillips", "Michelle Forbes", "Morgan Farris", "Muriel Duckworth", "Natalie Hultman", "Natalie Nouri", "Nellie Connally", "Nieko Mann", "Percy Haswell", "Rachel Beth Reznick", "Robin Prough", "Sarah Hagan", "Sarah Jarosz", "Sarah Nouri", "Sarah Prikryl", "Sarah Talbot", "Shannon Morris", "Shelly Kristaponis", "Stacy Lynn Austin", "Susanna Boney", "Suzan Kaminga", "Thea Marie", "Tomi Barrett", "Tonie Perensky", "Tracy Arnold", "Trillium", "Wallis Currie-Wood", "Zoe Graham", "Zoe Keller"],
      "result_count_ecql": 105,
      "result_sqlpp": ["Adrienne Smiridellis", "Alecia Batson", "Alexa Doggett", "Allie Carico", "Allison Wittliff", "Amanda Hope", "Amanda Kay Goggin", "Amber Heard", "Amy Earhart", "Angela Bettis", "Angela Thompson", "Annie Bond", "Aria Whitney", "Arianne Martin", "Ashlyn Molloy", "Aurora Marie Chase", "Bobbi Billard", "Caitlin Wehrle", "Carly Fiorina", "Cheri Cabiya", "Christina Murphy", "Ciara", "Crystal Crawford", "Dakota Johnson", "Dannie Helen Loraine Knowles", "Dawn Dunlap", "Echo Johnson", "Elaine Anderson", "Elena Hurst", "Elise Ivy", "Elizabeth Gwynne Wilson", "Elizabeth Rogers", "Emma Nicolas", "Evelyn Courtney", "Grace Phipps", "Hannah Nicolas", "Heather Kafka", "Janelle Johnson Dolenz", "Jennifer Matyear", "Jennifer Rovero", "Jessica Looney", "Jill Winn", "Johanna Goldsmith", "Julia Lashae", "Kacey Jordan", "Kandace Krueger", "Karen Kuykendall", "Karina Clark", "Kate Krause", "Katherine Goodrich", "Kathy Valentine", "Katie Fountain", "Katy Dunlap", "Kelly Winn", "Kelsey Higgs", "Kimberly Barnett", "Kimi Bateman", "Kristen Noelle Devine", "Krystal Morton", "Kyle MacDonnell", "Lana Dieterich", "Lauren Eichner", "Leigh Kilton", "Lella Cuberli", "Leslie Winston", "Lexi Moeller", "Lilas Lane", "Lindsey Robertson", "Maia Petee", "Mardi DeLong", "Margaret Easley", "Marguerite Warner", "Marianne Hyatt", "May Emory", "Megan Devine", "Megan Johnson", "Micaela Phillips", "Michelle Forbes", "Morgan Farris", "Muriel Duckworth", "Natalie Hultman", "Natalie Nouri", "Nellie Connally", "Nieko Mann", "Percy Haswell", "Rachel Beth Reznick", "Robin Prough", "Sarah Hagan", "Sarah Jarosz", "Sarah Nouri", "Sarah Prikryl", "Sarah Talbot", "Shannon Morris", "Shelly Kristaponis", "Stacy Lynn Austin", "Susanna Boney", "Suzan Kaminga", "Thea Marie", "Tomi Barrett", "Tonie Perensky", "Tracy Arnold", "Trillium", "Wallis Currie-Wood", "Zoe Graham", "Zoe Keller"],
      "result_count_sqlpp": 105
    },
    {
      "template": 54,
      "question": "Who was the actor that played \" Vinny Gambini \" in the movie \" My Cousin Vinny \" ?",
      "aql": "FOR movie IN Movie FILTER movie.title == \"My Cousin Vinny\" FOR actor, cast IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor ) FILTER cast.role == \"Vinny Gambini\" RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"My Cousin Vinny\" ; TRAVERSAL FOR actor , cast IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor ) ; FILTER FILTER cast.role == \"Vinny Gambini\" ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE r.role = 'Vinny Gambini' AND movie.id = { SELECT movie.id FROM movie WHERE movie.title = 'My Cousin Vinny' } RETURN actor.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'My Cousin Vinny' ; Project movie.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter r.role = 'Vinny Gambini' AND movie.id = movie.id ; Return actor.id ; TableScan actor ; Filter actor.id = actor.id ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM ( MATCH {class: Actor, as: actor}.outE('Cast') {where: (role = 'Vinny Gambini')}.inV('Movie') {as: movie, where: (title = 'My Cousin Vinny')} RETURN actor )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor ; Traversal OUT Cast (role = 'Vinny Gambini') ; Traversal IN Movie movie (title = 'My Cousin Vinny') ; Return actor ; Project actor.name ; ",
      "result_aql": ["Joe Pesci", "Joseph Frank Pesci"],
      "result_count_aql": 2,
      "result_ecql": ["Joe Pesci", "Joseph Frank Pesci"],
      "result_count_ecql": 2,
      "result_sqlpp": ["Joe Pesci", "Joseph Frank Pesci"],
      "result_count_sqlpp": 2
    },
    {
      "template": 55,
      "question": "Find all the female actors born in \" New York City \" after 1980",
      "aql": "FOR actor IN Actor FILTER actor.birth_city == \"New York City\" AND actor.birth_year > 1980 AND actor.gender == \"female\" RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.birth_city == \"New York City\" AND actor.birth_year > 1980 AND actor.gender == \"female\" ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.birth_city = 'New York City' AND actor.birth_year > 1980 AND actor.gender = 'female'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_city = 'New York City' AND actor.birth_year > 1980 AND actor.gender = 'female' ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM actor WHERE actor.birth_city = 'New York City' AND actor.birth_year > 1980 AND actor.gender = 'female'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_city = 'New York City' AND actor.birth_year > 1980 AND actor.gender = 'female' ; Project actor.name ; ",
      "result_aql": ["A.J. Applegate", "Abby Elliott", "Abigail Breslin", "Abigail Leib", "Adrianna Bremont", "Adrienne Bailon", "Alaina Irizarry", "Alexandra Daddario", "Alexis Dziena", "Ali Lohan", "Alice Kremelberg", "Alicia Keys", "Alisa Reyes", "Allegra Leguizamo", "Allie Calman", "Allison Hirschlag", "Alyson Leigh Rosenfeld", "Amanda Aday", "Amanda Brooks", "Amanda Evora", "Amanda Setton", "Amoni B.", "Amy Schumer", "Anastasia Konstantinou", "Andrea Gold", "Angelica Raven", "Angelina Armani", "Anne Hathaway", "Asa Akira", "Ashley Gerasimovich", "Ashley Peldon", "Audrey Elizabeth Fafard", "Azealia Banks", "Barbara Hollander", "Blair Dinucci", "Bonnie Dennison", "Brianne Berkson", "Cadence Lux", "Caitlin Van Zandt", "Calista Hill", "Candice Preau", "Capri Anderson", "Carmen Luvana", "Cassidy Ladden", "Celine Marget", "Chanty Sok", "Charlene-Vanessa Draytón", "Charli Arcouette-Martineau", "Charlie Ray", "Charlotte Simpson", "Chelsea Harkins", "Chelsea Holland", "Chelsea Logan", "Cherie Jimenez", "Christina Hernandez", "Condola Rashad", "Courtney Merritt", "Courtney Peldon", "Cyrenne Laljie", "Dana Arielle Fields", "Danielle Colangelo", "Danielle Glick", "Darian Brenner", "Deborah Ann Woll", "Denise Vasi", "Desiree Casado", "Devon Aoki", "Eileen Kovener", "Elena Franklin", "Elena Kampouris", "Elettra Wiedemann", "Elizabeth Hannah", "Elizabeth Masucci", "Emily Carmichael", "Emily Robinson", "Emmy Rossum", "Erin Patricia", "Eva Amurri Martino", "Fatima Ali", "Finise Avery", "Francesca Cecil", "Francesca Chaney", "Gabourey Sidibe", "Gabriela Aisenberg", "Gabriella Fanuele", "Gabriella Hill", "Gaby Hoffmann", "Gia Mantegna", "Gillian Zinser", "Gina Santiago", "Grace Dunham", "Grace Gummer", "Gracie Sbarge", "Greta Kline", "Haley Alexis", "Holiday Segal", "India Ennenga", "Io Tillett Wright", "Isis Harris", "Ivanka Trump", "Jackie Cruz", "Jackie Shea", "Jamie Renée Smith", "Jeanne Orr", "Jeannie Ortega", "Jenn Pinto", "Jennifer Cetrone", "Jennifer Merrill", "Jesilyn Figueroa", "Jesse Sarah Vilinsky", "Jessica Caban", "Jessica Cherniak", "Jessica Cunningham", "Jessica Jennings", "Jessica Lewis", "Jessica Munch", "Jiah Khan", "Jordan Elizabeth Gelber", "Judy Marte", "Julia Garner", "Julia Stiles", "Jurnee Smollett-Bell", "Karissa Barcelo", "Katharine Luckinbill", "Katherine Rose Riley", "Katrina Gellar", "Kayla Jane", "Kayla Maisonet", "Kea Devay", "Kelly Baugher", "Kianna Underwood", "Kim Santiago", "Kim Stolz", "Krista Ayne", "Kristin Ways", "Kt Baldassaro", "Lady Gaga", "Lana Del Rey", "Laneya Wiles", "Lea Michele", "Leanna Archer", "Leelee Sobieski", "Lena Dunham", "Lil Mama", "Lili Mirojnick", "Linda Király", "Lindsay Lohan", "Lisa Flores", "Lisa Lang", "Lisha Yakub", "Lola Bates-Campbell", "Lydia Jordan", "Mabel Pantaleon", "Madeline Hill", "Maggie Farley", "Mamie Gummer", "Mandy Leon", "Mariana Matthews", "Marié Digby", "Marlene Artov", "Maryelle DeVitto", "Maya N. Blake", "Melissa Amber", "Melissa Farman", "Melonie Diaz", "Meredith Deane", "Michaela McPherson", "Michelle Elyse", "Michelle Pascarella", "Michelle Trachtenberg", "Mulani Rivera", "Nicky Hilton Rothschild", "Nicole Patrick", "Nicole Wilson", "Nicolette Pierini", "Nina Arianda", "Noureen DeWulf", "Olivia Brown", "Olivia Luccardi", "Olivia Thirlby", "Olivia Wilde", "Paris Hilton", "Paulina Gerzon", "Paz de la Huerta", "Quinn Culkin", "Rachel Covey", "Rachel Robinson", "Rachelle Leconte", "Raelene Roberts", "Raquel Castro", "Reby Sky", "Reese Nanavati", "Renae Cruz", "Ruby Jerins", "Sabrina Ferrer", "Sally Pressman", "Samantha Gutterman", "Samantha Maldonado", "Saoirse Ronan", "Sarah Hyland", "Sarah Jonker", "Sarah Rachel Isenberg", "Sasha Allen", "Scarlett Johansson", "Scarlett Sperduto", "Serena Kerrigan", "Shanna Becker", "Shareeka Epps", "Sharron Paul", "Shelby Kovant", "Shelby O'Connell", "Sheryl Lipuma", "Shirley Henriquez", "Sienna Miller", "Sita Young", "Skai Jackson", "Sophie Auster", "Stephanie Andujar", "Stephanie Thiel", "Sterling Jerins", "Sue Redman", "Sybelle Silverphoenix", "Tai Fauci", "Tara Thompson", "Tatiana Stone", "Tatsumi Romano", "Taylor Dior", "Taylor Patterson", "Teresa Hui", "Theresa Bennett", "Tiffany Evans", "Tiffany Holiday", "Tracy Walsh", "Ursula Parker", "Valentina de Angelis", "Valerie Vasquez", "Victoria Asher", "Victoria Ng", "Whitney Vance", "Wyntergrace Williams", "Yaya DaCosta", "Yvette Bass", "Zelda Harris", "Zelda Williams", "Zoe Lister-Jones", "Zoe Sloane", "Zoë Hall"],
      "result_count_aql": 247,
      "result_ecql": ["A.J. Applegate", "Abby Elliott", "Abigail Breslin", "Abigail Leib", "Adrianna Bremont", "Adrienne Bailon", "Alaina Irizarry", "Alexandra Daddario", "Alexis Dziena", "Ali Lohan", "Alice Kremelberg", "Alicia Keys", "Alisa Reyes", "Allegra Leguizamo", "Allie Calman", "Allison Hirschlag", "Alyson Leigh Rosenfeld", "Amanda Aday", "Amanda Brooks", "Amanda Evora", "Amanda Setton", "Amoni B.", "Amy Schumer", "Anastasia Konstantinou", "Andrea Gold", "Angelica Raven", "Angelina Armani", "Anne Hathaway", "Asa Akira", "Ashley Gerasimovich", "Ashley Peldon", "Audrey Elizabeth Fafard", "Azealia Banks", "Barbara Hollander", "Blair Dinucci", "Bonnie Dennison", "Brianne Berkson", "Cadence Lux", "Caitlin Van Zandt", "Calista Hill", "Candice Preau", "Capri Anderson", "Carmen Luvana", "Cassidy Ladden", "Celine Marget", "Chanty Sok", "Charlene-Vanessa Draytón", "Charli Arcouette-Martineau", "Charlie Ray", "Charlotte Simpson", "Chelsea Harkins", "Chelsea Holland", "Chelsea Logan", "Cherie Jimenez", "Christina Hernandez", "Condola Rashad", "Courtney Merritt", "Courtney Peldon", "Cyrenne Laljie", "Dana Arielle Fields", "Danielle Colangelo", "Danielle Glick", "Darian Brenner", "Deborah Ann Woll", "Denise Vasi", "Desiree Casado", "Devon Aoki", "Eileen Kovener", "Elena Franklin", "Elena Kampouris", "Elettra Wiedemann", "Elizabeth Hannah", "Elizabeth Masucci", "Emily Carmichael", "Emily Robinson", "Emmy Rossum", "Erin Patricia", "Eva Amurri Martino", "Fatima Ali", "Finise Avery", "Francesca Cecil", "Francesca Chaney", "Gabourey Sidibe", "Gabriela Aisenberg", "Gabriella Fanuele", "Gabriella Hill", "Gaby Hoffmann", "Gia Mantegna", "Gillian Zinser", "Gina Santiago", "Grace Dunham", "Grace Gummer", "Gracie Sbarge", "Greta Kline", "Haley Alexis", "Holiday Segal", "India Ennenga", "Io Tillett Wright", "Isis Harris", "Ivanka Trump", "Jackie Cruz", "Jackie Shea", "Jamie Renée Smith", "Jeanne Orr", "Jeannie Ortega", "Jenn Pinto", "Jennifer Cetrone", "Jennifer Merrill", "Jesilyn Figueroa", "Jesse Sarah Vilinsky", "Jessica Caban", "Jessica Cherniak", "Jessica Cunningham", "Jessica Jennings", "Jessica Lewis", "Jessica Munch", "Jiah Khan", "Jordan Elizabeth Gelber", "Judy Marte", "Julia Garner", "Julia Stiles", "Jurnee Smollett-Bell", "Karissa Barcelo", "Katharine Luckinbill", "Katherine Rose Riley", "Katrina Gellar", "Kayla Jane", "Kayla Maisonet", "Kea Devay", "Kelly Baugher", "Kianna Underwood", "Kim Santiago", "Kim Stolz", "Krista Ayne", "Kristin Ways", "Kt Baldassaro", "Lady Gaga", "Lana Del Rey", "Laneya Wiles", "Lea Michele", "Leanna Archer", "Leelee Sobieski", "Lena Dunham", "Lil Mama", "Lili Mirojnick", "Linda Király", "Lindsay Lohan", "Lisa Flores", "Lisa Lang", "Lisha Yakub", "Lola Bates-Campbell", "Lydia Jordan", "Mabel Pantaleon", "Madeline Hill", "Maggie Farley", "Mamie Gummer", "Mandy Leon", "Mariana Matthews", "Marié Digby", "Marlene Artov", "Maryelle DeVitto", "Maya N. Blake", "Melissa Amber", "Melissa Farman", "Melonie Diaz", "Meredith Deane", "Michaela McPherson", "Michelle Elyse", "Michelle Pascarella", "Michelle Trachtenberg", "Mulani Rivera", "Nicky Hilton Rothschild", "Nicole Patrick", "Nicole Wilson", "Nicolette Pierini", "Nina Arianda", "Noureen DeWulf", "Olivia Brown", "Olivia Luccardi", "Olivia Thirlby", "Olivia Wilde", "Paris Hilton", "Paulina Gerzon", "Paz de la Huerta", "Quinn Culkin", "Rachel Covey", "Rachel Robinson", "Rachelle Leconte", "Raelene Roberts", "Raquel Castro", "Reby Sky", "Reese Nanavati", "Renae Cruz", "Ruby Jerins", "Sabrina Ferrer", "Sally Pressman", "Samantha Gutterman", "Samantha Maldonado", "Saoirse Ronan", "Sarah Hyland", "Sarah Jonker", "Sarah Rachel Isenberg", "Sasha Allen", "Scarlett Johansson", "Scarlett Sperduto", "Serena Kerrigan", "Shanna Becker", "Shareeka Epps", "Sharron Paul", "Shelby Kovant", "Shelby O'Connell", "Sheryl Lipuma", "Shirley Henriquez", "Sienna Miller", "Sita Young", "Skai Jackson", "Sophie Auster", "Stephanie Andujar", "Stephanie Thiel", "Sterling Jerins", "Sue Redman", "Sybelle Silverphoenix", "Tai Fauci", "Tara Thompson", "Tatiana Stone", "Tatsumi Romano", "Taylor Dior", "Taylor Patterson", "Teresa Hui", "Theresa Bennett", "Tiffany Evans", "Tiffany Holiday", "Tracy Walsh", "Ursula Parker", "Valentina de Angelis", "Valerie Vasquez", "Victoria Asher", "Victoria Ng", "Whitney Vance", "Wyntergrace Williams", "Yaya DaCosta", "Yvette Bass", "Zelda Harris", "Zelda Williams", "Zoe Lister-Jones", "Zoe Sloane", "Zoë Hall"],
      "result_count_ecql": 247,
      "result_sqlpp": ["A.J. Applegate", "Abby Elliott", "Abigail Breslin", "Abigail Leib", "Adrianna Bremont", "Adrienne Bailon", "Alaina Irizarry", "Alexandra Daddario", "Alexis Dziena", "Ali Lohan", "Alice Kremelberg", "Alicia Keys", "Alisa Reyes", "Allegra Leguizamo", "Allie Calman", "Allison Hirschlag", "Alyson Leigh Rosenfeld", "Amanda Aday", "Amanda Brooks", "Amanda Evora", "Amanda Setton", "Amoni B.", "Amy Schumer", "Anastasia Konstantinou", "Andrea Gold", "Angelica Raven", "Angelina Armani", "Anne Hathaway", "Asa Akira", "Ashley Gerasimovich", "Ashley Peldon", "Audrey Elizabeth Fafard", "Azealia Banks", "Barbara Hollander", "Blair Dinucci", "Bonnie Dennison", "Brianne Berkson", "Cadence Lux", "Caitlin Van Zandt", "Calista Hill", "Candice Preau", "Capri Anderson", "Carmen Luvana", "Cassidy Ladden", "Celine Marget", "Chanty Sok", "Charlene-Vanessa Draytón", "Charli Arcouette-Martineau", "Charlie Ray", "Charlotte Simpson", "Chelsea Harkins", "Chelsea Holland", "Chelsea Logan", "Cherie Jimenez", "Christina Hernandez", "Condola Rashad", "Courtney Merritt", "Courtney Peldon", "Cyrenne Laljie", "Dana Arielle Fields", "Danielle Colangelo", "Danielle Glick", "Darian Brenner", "Deborah Ann Woll", "Denise Vasi", "Desiree Casado", "Devon Aoki", "Eileen Kovener", "Elena Franklin", "Elena Kampouris", "Elettra Wiedemann", "Elizabeth Hannah", "Elizabeth Masucci", "Emily Carmichael", "Emily Robinson", "Emmy Rossum", "Erin Patricia", "Eva Amurri Martino", "Fatima Ali", "Finise Avery", "Francesca Cecil", "Francesca Chaney", "Gabourey Sidibe", "Gabriela Aisenberg", "Gabriella Fanuele", "Gabriella Hill", "Gaby Hoffmann", "Gia Mantegna", "Gillian Zinser", "Gina Santiago", "Grace Dunham", "Grace Gummer", "Gracie Sbarge", "Greta Kline", "Haley Alexis", "Holiday Segal", "India Ennenga", "Io Tillett Wright", "Isis Harris", "Ivanka Trump", "Jackie Cruz", "Jackie Shea", "Jamie Renée Smith", "Jeanne Orr", "Jeannie Ortega", "Jenn Pinto", "Jennifer Cetrone", "Jennifer Merrill", "Jesilyn Figueroa", "Jesse Sarah Vilinsky", "Jessica Caban", "Jessica Cherniak", "Jessica Cunningham", "Jessica Jennings", "Jessica Lewis", "Jessica Munch", "Jiah Khan", "Jordan Elizabeth Gelber", "Judy Marte", "Julia Garner", "Julia Stiles", "Jurnee Smollett-Bell", "Karissa Barcelo", "Katharine Luckinbill", "Katherine Rose Riley", "Katrina Gellar", "Kayla Jane", "Kayla Maisonet", "Kea Devay", "Kelly Baugher", "Kianna Underwood", "Kim Santiago", "Kim Stolz", "Krista Ayne", "Kristin Ways", "Kt Baldassaro", "Lady Gaga", "Lana Del Rey", "Laneya Wiles", "Lea Michele", "Leanna Archer", "Leelee Sobieski", "Lena Dunham", "Lil Mama", "Lili Mirojnick", "Linda Király", "Lindsay Lohan", "Lisa Flores", "Lisa Lang", "Lisha Yakub", "Lola Bates-Campbell", "Lydia Jordan", "Mabel Pantaleon", "Madeline Hill", "Maggie Farley", "Mamie Gummer", "Mandy Leon", "Mariana Matthews", "Marié Digby", "Marlene Artov", "Maryelle DeVitto", "Maya N. Blake", "Melissa Amber", "Melissa Farman", "Melonie Diaz", "Meredith Deane", "Michaela McPherson", "Michelle Elyse", "Michelle Pascarella", "Michelle Trachtenberg", "Mulani Rivera", "Nicky Hilton Rothschild", "Nicole Patrick", "Nicole Wilson", "Nicolette Pierini", "Nina Arianda", "Noureen DeWulf", "Olivia Brown", "Olivia Luccardi", "Olivia Thirlby", "Olivia Wilde", "Paris Hilton", "Paulina Gerzon", "Paz de la Huerta", "Quinn Culkin", "Rachel Covey", "Rachel Robinson", "Rachelle Leconte", "Raelene Roberts", "Raquel Castro", "Reby Sky", "Reese Nanavati", "Renae Cruz", "Ruby Jerins", "Sabrina Ferrer", "Sally Pressman", "Samantha Gutterman", "Samantha Maldonado", "Saoirse Ronan", "Sarah Hyland", "Sarah Jonker", "Sarah Rachel Isenberg", "Sasha Allen", "Scarlett Johansson", "Scarlett Sperduto", "Serena Kerrigan", "Shanna Becker", "Shareeka Epps", "Sharron Paul", "Shelby Kovant", "Shelby O'Connell", "Sheryl Lipuma", "Shirley Henriquez", "Sienna Miller", "Sita Young", "Skai Jackson", "Sophie Auster", "Stephanie Andujar", "Stephanie Thiel", "Sterling Jerins", "Sue Redman", "Sybelle Silverphoenix", "Tai Fauci", "Tara Thompson", "Tatiana Stone", "Tatsumi Romano", "Taylor Dior", "Taylor Patterson", "Teresa Hui", "Theresa Bennett", "Tiffany Evans", "Tiffany Holiday", "Tracy Walsh", "Ursula Parker", "Valentina de Angelis", "Valerie Vasquez", "Victoria Asher", "Victoria Ng", "Whitney Vance", "Wyntergrace Williams", "Yaya DaCosta", "Yvette Bass", "Zelda Harris", "Zelda Williams", "Zoe Lister-Jones", "Zoe Sloane", "Zoë Hall"],
      "result_count_sqlpp": 247
    },
    {
      "template": 56,
      "question": "What are the series featuring \" Kerry Washington \" ?",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Kerry Washington\" FOR tv_series IN 1 OUTBOUND actor Cast FILTER IS_SAME_COLLECTION ( \"TvSeries\", tv_series ) RETURN tv_series.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Kerry Washington\" ; TRAVERSAL FOR tv_series IN 1 OUTBOUND actor Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"TvSeries\" , tv_series ) ; RETURN RETURN tv_series.title ;",
      "ecql": "SELECT tv_series.title FROM tv_series WHERE tv_series.id = { MATCH (actor:Actor)-[r:Cast]->(tv_series:TvSeries) WHERE actor.id = { SELECT actor.id FROM actor WHERE actor.name = 'Kerry Washington' } RETURN tv_series.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Kerry Washington' ; Project actor.id ; Match (actor:Actor)-[r:Cast]->(tv_series:TvSeries) ; Filter actor.id = actor.id ; Return tv_series.id ; TableScan tv_series ; Filter tv_series.id = tv_series.id ; Project tv_series.title ; ",
      "sqlpp": "SELECT tv_series.title FROM ( MATCH {class: Actor, as: actor, where: (name = 'Kerry Washington')}.outE('Cast').inV('TvSeries') {as: tv_series} RETURN tv_series )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor (name = 'Kerry Washington') ; Traversal OUT Cast ; Traversal IN TvSeries tv_series ; Return tv_series ; Project tv_series.title ; ",
      "result_aql": ["Scandal"],
      "result_count_aql": 1,
      "result_ecql": ["Scandal"],
      "result_count_ecql": 1,
      "result_sqlpp": ["Scandal"],
      "result_count_sqlpp": 1
    },
    {
      "template": 57,
      "question": "Who is the writer of the movie \" Django Unchained \"",
      "aql": "FOR movie IN Movie FILTER movie.title == \"Django Unchained\" FOR writer IN 1 OUTBOUND movie WrittenBy FILTER IS_SAME_COLLECTION ( \"Writer\", writer ) RETURN writer.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"Django Unchained\" ; TRAVERSAL FOR writer IN 1 OUTBOUND movie WrittenBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Writer\" , writer ) ; RETURN RETURN writer.name ;",
      "ecql": "SELECT writer.name FROM writer WHERE writer.id = { MATCH (movie:Movie)-[r:WrittenBy]->(writer:Writer) WHERE movie.id = { SELECT movie.id FROM movie WHERE movie.title = 'Django Unchained' } RETURN writer.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'Django Unchained' ; Project movie.id ; Match (movie:Movie)-[r:WrittenBy]->(writer:Writer) ; Filter movie.id = movie.id ; Return writer.id ; TableScan writer ; Filter writer.id = writer.id ; Project writer.name ; ",
      "sqlpp": "SELECT writer.name FROM ( MATCH {class: Movie, as: movie, where: (title = 'Django Unchained')}.outE('WrittenBy').inV('Writer') {as: writer} RETURN writer )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Movie movie (title = 'Django Unchained') ; Traversal OUT WrittenBy ; Traversal IN Writer writer ; Return writer ; Project writer.name ; ",
      "result_aql": ["Quentin Tarantino"],
      "result_count_aql": 1,
      "result_ecql": ["Quentin Tarantino"],
      "result_count_ecql": 1,
      "result_sqlpp": ["Quentin Tarantino"],
      "result_count_sqlpp": 1
    },
    {
      "template": 58,
      "question": "Find all movies featuring \" Jason Robards \" and \" Woody Strode \"",
      "aql": "FOR actor_1 IN Actor FILTER actor_1.name == \"Jason Robards\" FOR movie IN 1 OUTBOUND actor_1 Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FOR actor_2 IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor_2 ) FILTER actor_2.name == \"Woody Strode\" RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor_1 IN Actor ; FILTER FILTER actor_1.name == \"Jason Robards\" ; TRAVERSAL FOR movie IN 1 OUTBOUND actor_1 Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; TRAVERSAL FOR actor_2 IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor_2 ) ; FILTER FILTER actor_2.name == \"Woody Strode\" ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (actor_1:Actor)-[:Cast]->(movie:Movie), (actor_2:Actor)-[:Cast]->(movie:Movie) WHERE actor_1.id = { SELECT actor.id FROM actor WHERE actor.name = 'Jason Robards' } AND actor_2.id = { SELECT actor.id FROM actor WHERE actor.name = 'Woody Strode' } RETURN movie.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Jason Robards' ; Project actor.id ; TableScan actor ; Filter actor.name = 'Woody Strode' ; Project actor.id ; Match (actor_1:Actor)-[:Cast]->(movie:Movie), (actor_2:Actor)-[:Cast]->(movie:Movie) ; Filter actor_1.id = actor_1.id AND actor_2.id = actor_2.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM ( MATCH {class: Actor, where: (name = 'Jason Robards')}.outE('Cast').inV('Movie') {as: movie}.inE('Cast').outV('Actor') {where: (name = 'Woody Strode')} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Traversal _ Traversal _ Return _ Project _ | Match Actor (name = 'Jason Robards') ; Traversal OUT Cast ; Traversal IN Movie movie ; Traversal IN Cast ; Traversal OUT Actor (name = 'Woody Strode') ; Return movie ; Project movie.title ; ",
      "result_aql": ["Storyville"],
      "result_count_aql": 1,
      "result_ecql": ["Storyville"],
      "result_count_ecql": 1,
      "result_sqlpp": ["Storyville"],
      "result_count_sqlpp": 1
    },
    {
      "template": 59,
      "question": "Who is the director of the tv series \" House of Cards \" from 2013 ?",
      "aql": "FOR tv_series IN TvSeries FILTER tv_series.title == \"House of Cards\" AND tv_series.release_year == 2013 FOR director IN 1 OUTBOUND tv_series DirectedBy FILTER IS_SAME_COLLECTION ( \"Director\", director ) RETURN director.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR tv_series IN TvSeries ; FILTER FILTER tv_series.title == \"House of Cards\" AND tv_series.release_year == 2013 ; TRAVERSAL FOR director IN 1 OUTBOUND tv_series DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Director\" , director ) ; RETURN RETURN director.name ;",
      "ecql": "SELECT director.name FROM director WHERE director.id = { MATCH (tv_series:TvSeries)-[r:DirectedBy]->(director:Director) WHERE tv_series.id = { SELECT tv_series.id FROM tv_series WHERE tv_series.title = 'House of Cards' AND tv_series.release_year = 2013 } RETURN director.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan tv_series ; Filter tv_series.title = 'House of Cards' AND tv_series.release_year = 2013 ; Project tv_series.id ; Match (tv_series:TvSeries)-[r:DirectedBy]->(director:Director) ; Filter tv_series.id = tv_series.id ; Return director.id ; TableScan director ; Filter director.id = director.id ; Project director.name ; ",
      "sqlpp": "SELECT director.name FROM ( MATCH {class: TvSeries, as: tv_series, where: (title = 'House of Cards' AND release_year = 2013)}.outE('DirectedBy').inV('Director') {as: director} RETURN director )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match TvSeries tv_series (title = 'House of Cards' AND release_year = 2013) ; Traversal OUT DirectedBy ; Traversal IN Director director ; Return director ; Project director.name ; ",
      "result_aql": "[]",
      "result_count_aql": 0,
      "result_ecql": "[]",
      "result_count_ecql": 0,
      "result_sqlpp": "[]",
      "result_count_sqlpp": 0
    },
    {
      "template": 60,
      "question": "What is the nationality of \" Kevin Spacey \" ?",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Kevin Spacey\" RETURN actor.nationality",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Kevin Spacey\" ; RETURN RETURN actor.nationality ;",
      "ecql": "SELECT actor.nationality FROM actor WHERE actor.name = 'Kevin Spacey'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Kevin Spacey' ; Project actor.nationality ; ",
      "sqlpp": "SELECT actor.nationality FROM actor WHERE actor.name = 'Kevin Spacey'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Kevin Spacey' ; Project actor.nationality ; ",
      "result_aql": ["USA"],
      "result_count_aql": 1,
      "result_ecql": ["USA"],
      "result_count_ecql": 1,
      "result_sqlpp": ["USA"],
      "result_count_sqlpp": 1
    },
    {
      "template": 61,
      "question": "Find all the directors who are from Afghanistan",
      "aql": "FOR director IN Director FILTER director.nationality == \"Afghanistan\" RETURN director.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR director IN Director ; FILTER FILTER director.nationality == \"Afghanistan\" ; RETURN RETURN director.name ;",
      "ecql": "SELECT director.name FROM director WHERE director.nationality = 'Afghanistan'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan director ; Filter director.nationality = 'Afghanistan' ; Project director.name ; ",
      "sqlpp": "SELECT director.name FROM director WHERE director.nationality = 'Afghanistan'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan director ; Filter director.nationality = 'Afghanistan' ; Project director.name ; ",
      "result_aql": ["Ali Olomi", "Atiq Rahimi", "Fazila Amiri", "Jawed Wassel", "Jem Cohen", "Khaled Ibrahimi", "Manyar I. Parwani", "Moniere", "Rangeela", "Razi Mohebi", "Roya Sadat", "Walid Nakschbandi", "Yama Rahimi"],
      "result_count_aql": 13,
      "result_ecql": ["Ali Olomi", "Atiq Rahimi", "Fazila Amiri", "Jawed Wassel", "Jem Cohen", "Khaled Ibrahimi", "Manyar I. Parwani", "Moniere", "Rangeela", "Razi Mohebi", "Roya Sadat", "Walid Nakschbandi", "Yama Rahimi"],
      "result_count_ecql": 13,
      "result_sqlpp": ["Ali Olomi", "Atiq Rahimi", "Fazila Amiri", "Jawed Wassel", "Jem Cohen", "Khaled Ibrahimi", "Manyar I. Parwani", "Moniere", "Rangeela", "Razi Mohebi", "Roya Sadat", "Walid Nakschbandi", "Yama Rahimi"],
      "result_count_sqlpp": 13
    },
    {
      "template": 62,
      "question": "How much was the budget of \" Finding Nemo \"",
      "aql": "FOR movie IN Movie FILTER movie.title == \"Finding Nemo\" RETURN movie.budget",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"Finding Nemo\" ; RETURN RETURN movie.budget ;",
      "ecql": "SELECT movie.budget FROM movie WHERE movie.title = 'Finding Nemo'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'Finding Nemo' ; Project movie.budget ; ",
      "sqlpp": "SELECT movie.budget FROM movie WHERE movie.title = 'Finding Nemo'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'Finding Nemo' ; Project movie.budget ; ",
      "result_aql": ["$94,000,000"],
      "result_count_aql": 1,
      "result_ecql": ["$94,000,000"],
      "result_count_ecql": 1,
      "result_sqlpp": ["$94,000,000"],
      "result_count_sqlpp": 1
    },
    {
      "template": 63,
      "question": "In what year was \" Benedict Cumberbatch \" born",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Benedict Cumberbatch\" RETURN actor.birth_year",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Benedict Cumberbatch\" ; RETURN RETURN actor.birth_year ;",
      "ecql": "SELECT actor.birth_year FROM actor WHERE actor.name = 'Benedict Cumberbatch'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Benedict Cumberbatch' ; Project actor.birth_year ; ",
      "sqlpp": "SELECT actor.birth_year FROM actor WHERE actor.name = 'Benedict Cumberbatch'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Benedict Cumberbatch' ; Project actor.birth_year ; ",
      "result_aql": ["1976"],
      "result_count_aql": 1,
      "result_ecql": ["1976"],
      "result_count_ecql": 1,
      "result_sqlpp": ["1976"],
      "result_count_sqlpp": 1
    },
    {
      "template": 64,
      "question": "How many movies are there that are directed by \" Steven Spielberg \" and featuring \" Matt Damon \" ?",
      "aql": "FOR director IN Director FILTER director.name == \"Steven Spielberg\" FOR movie IN 1 INBOUND director DirectedBy FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FOR actor IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor ) FILTER actor.name == \"Matt Damon\" COLLECT WITH COUNT INTO cnt RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR director IN Director ; FILTER FILTER director.name == \"Steven Spielberg\" ; TRAVERSAL FOR movie IN 1 INBOUND director DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; TRAVERSAL FOR actor IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor ) ; FILTER FILTER actor.name == \"Matt Damon\" ; AGGREGATE COLLECT WITH COUNT INTO cnt ; RETURN RETURN cnt ;",
      "ecql": "MATCH (actor:Actor)-[:Cast]->(movie:Movie), (movie:Movie)-[:DirectedBy]->(director:Director) WHERE actor.id = { SELECT actor.id FROM actor WHERE actor.name = 'Matt Damon' } AND director.id = { SELECT director.id FROM director WHERE director.name = 'Steven Spielberg' } WITH COUNT (*) AS cnt RETURN cnt",
      "ecql_mir": "TableScan _ Filter _ Project _ TableScan _ Filter _ Project _ Match _ Filter _ With _ Return _ | TableScan actor ; Filter actor.name = 'Matt Damon' ; Project actor.id ; TableScan director ; Filter director.name = 'Steven Spielberg' ; Project director.id ; Match (actor:Actor)-[:Cast]->(movie:Movie), (movie:Movie)-[:DirectedBy]->(director:Director) ; Filter actor.id = actor.id AND director.id = director.id ; With COUNT ( * ) AS cnt ; Return cnt ; ",
      "sqlpp": "SELECT COUNT(*) AS cnt FROM ( MATCH {class: Actor, as: actor, where: (name = 'Matt Damon')}.outE('Cast').inV('Movie') {as: movie}.outE('DirectedBy').inV('Director') {as: director, where: (name = 'Steven Spielberg')} RETURN movie)",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor (name = 'Matt Damon') ; Traversal OUT Cast ; Traversal IN Movie movie ; Traversal OUT DirectedBy ; Traversal IN Director director (name = 'Steven Spielberg') ; Return movie ; Project COUNT ( * ) AS cnt ; ",
      "result_aql": ["0"],
      "result_count_aql": 1,
      "result_ecql": ["0"],
      "result_count_ecql": 1,
      "result_sqlpp": ["0"],
      "result_count_sqlpp": 1
    },
    {
      "template": 65,
      "question": "Find the actors who played in the movie \" Camp X-Ray \"",
      "aql": "FOR movie IN Movie FILTER movie.title == \"Camp X-Ray\" FOR actor IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor ) RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"Camp X-Ray\" ; TRAVERSAL FOR actor IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor ) ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE movie.id = { SELECT movie.id FROM movie WHERE movie.title = 'Camp X-Ray' } RETURN actor.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'Camp X-Ray' ; Project movie.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter movie.id = movie.id ; Return actor.id ; TableScan actor ; Filter actor.id = actor.id ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM ( MATCH {class: Actor, as: actor}.outE('Cast').inV('Movie') {as: movie, where: (title = 'Camp X-Ray')} RETURN actor )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor ; Traversal OUT Cast ; Traversal IN Movie movie (title = 'Camp X-Ray') ; Return actor ; Project actor.name ; ",
      "result_aql": ["Anoop", "Anoop Shamim", "Anoop Simon", "Brandon Lee Seider", "Brandon Seider", "Buda", "Daniel Leavitt", "Holli Dean", "Jian", "Jian Leonardo", "Jian Leonardo", "Jian Peng Zhu", "John Caroll Lynch", "John Carroll Lynch", "John Lynch", "Julia Duff", "Julia Duffy", "Julia Margaret Hinds", "Kyle Bornheimer", "Kyle Edward Bornheimer", "LaDell Preston", "Ladell G. Preston", "Ladell Preston", "Lane Edward Garrison", "Lane Garrison", "Le Dell Preston", "Leo", "Leonardo", "Mark Naji", "Marwan Khouzam", "Meemo", "Nawal Bengholam", "Preston Ladell", "Richard Serio", "Robert Tarpinian", "Simon", "Yousef Azani", "Yousuf Azami"],
      "result_count_aql": 38,
      "result_ecql": ["Anoop", "Anoop Shamim", "Anoop Simon", "Brandon Lee Seider", "Brandon Seider", "Buda", "Daniel Leavitt", "Holli Dean", "Jian", "Jian Leonardo", "Jian Leonardo", "Jian Peng Zhu", "John Caroll Lynch", "John Carroll Lynch", "John Lynch", "Julia Duff", "Julia Duffy", "Julia Margaret Hinds", "Kyle Bornheimer", "Kyle Edward Bornheimer", "LaDell Preston", "Ladell G. Preston", "Ladell Preston", "Lane Edward Garrison", "Lane Garrison", "Le Dell Preston", "Leo", "Leonardo", "Mark Naji", "Marwan Khouzam", "Meemo", "Nawal Bengholam", "Preston Ladell", "Richard Serio", "Robert Tarpinian", "Simon", "Yousef Azani", "Yousuf Azami"],
      "result_count_ecql": 38,
      "result_sqlpp": ["Anoop", "Anoop Shamim", "Anoop Simon", "Brandon Lee Seider", "Brandon Seider", "Buda", "Daniel Leavitt", "Holli Dean", "Jian", "Jian Leonardo", "Jian Leonardo", "Jian Peng Zhu", "John Caroll Lynch", "John Carroll Lynch", "John Lynch", "Julia Duff", "Julia Duffy", "Julia Margaret Hinds", "Kyle Bornheimer", "Kyle Edward Bornheimer", "LaDell Preston", "Ladell G. Preston", "Ladell Preston", "Lane Edward Garrison", "Lane Garrison", "Le Dell Preston", "Leo", "Leonardo", "Mark Naji", "Marwan Khouzam", "Meemo", "Nawal Bengholam", "Preston Ladell", "Richard Serio", "Robert Tarpinian", "Simon", "Yousef Azani", "Yousuf Azami"],
      "result_count_sqlpp": 38
    },
    {
      "template": 66,
      "question": "Find all movies about Persians",
      "aql": "FOR keyword IN Keyword FILTER CONTAINS(keyword.keyword, \"Persians\") FOR movie IN 1 INBOUND keyword Tags FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR keyword IN Keyword ; FILTER FILTER CONTAINS ( keyword.keyword , \"Persians\" ) ; TRAVERSAL FOR movie IN 1 INBOUND keyword Tags ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.keyword @> '[\"Persians\"]'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.keyword @> '[\"Persians\"]' ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM movie WHERE movie.keyword CONTAINS 'Persians'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.keyword CONTAINS 'Persians' ; Project movie.title ; ",
      "result_aql": "[]",
      "result_count_aql": 0,
      "result_ecql": "[]",
      "result_count_ecql": 0,
      "result_sqlpp": "[]",
      "result_count_sqlpp": 0
    },
    {
      "template": 67,
      "question": "What are all the tv series created by \" Shonda Rhimes \" ?",
      "aql": "FOR producer IN Producer FILTER producer.name == \"Shonda Rhimes\" FOR tv_series IN 1 INBOUND producer MadeBy FILTER IS_SAME_COLLECTION ( \"TvSeries\", tv_series ) RETURN tv_series.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR producer IN Producer ; FILTER FILTER producer.name == \"Shonda Rhimes\" ; TRAVERSAL FOR tv_series IN 1 INBOUND producer MadeBy ; FILTER FILTER IS_SAME_COLLECTION ( \"TvSeries\" , tv_series ) ; RETURN RETURN tv_series.title ;",
      "ecql": "SELECT tv_series.title FROM tv_series WHERE tv_series.id = { MATCH (tv_series:TvSeries)-[r:MadeBy]->(producer:Producer) WHERE producer.id = { SELECT producer.id FROM producer WHERE producer.name = 'Shonda Rhimes' } RETURN tv_series.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan producer ; Filter producer.name = 'Shonda Rhimes' ; Project producer.id ; Match (tv_series:TvSeries)-[r:MadeBy]->(producer:Producer) ; Filter producer.id = producer.id ; Return tv_series.id ; TableScan tv_series ; Filter tv_series.id = tv_series.id ; Project tv_series.title ; ",
      "sqlpp": "SELECT tv_series.title FROM (MATCH {class: TvSeries, as: tv_series}.outE('MadeBy').inV('Producer') {as: producer, where: (name = 'Shonda Rhimes')} RETURN tv_series )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match TvSeries tv_series ; Traversal OUT MadeBy ; Traversal IN Producer producer (name = 'Shonda Rhimes') ; Return tv_series ; Project tv_series.title ; ",
      "result_aql": ["America Divided", "Seattle Grace: Message of Hope", "Seattle Grace: On Call", "Still Star-Crossed"],
      "result_count_aql": 4,
      "result_ecql": ["America Divided", "Seattle Grace: Message of Hope", "Seattle Grace: On Call", "Still Star-Crossed"],
      "result_count_ecql": 4,
      "result_sqlpp": ["America Divided", "Seattle Grace: Message of Hope", "Seattle Grace: On Call", "Still Star-Crossed"],
      "result_count_sqlpp": 4
    },
    {
      "template": 68,
      "question": "Which producer has worked with the most number of directors ?",
      "aql": "FOR producer IN Producer FOR movie IN 1 INBOUND producer MadeBy FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FOR director IN 1 OUTBOUND movie DirectedBy FILTER IS_SAME_COLLECTION ( \"Director\", director ) COLLECT producerName = producer.name WITH COUNT INTO directorCount SORT directorCount DESC LIMIT 1 RETURN producerName",
      "aql_mir": "COLLECTION _ ; TRAVERSAL _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; AGGREGATE _ ; SORT _ ; LIMIT _ ; RETURN _ ; | COLLECTION FOR producer IN Producer ; TRAVERSAL FOR movie IN 1 INBOUND producer MadeBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; TRAVERSAL FOR director IN 1 OUTBOUND movie DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Director\" , director ) ; AGGREGATE COLLECT producerName = producer.name WITH COUNT INTO directorCount ; SORT SORT directorCount DESC ; LIMIT LIMIT 1 ; RETURN RETURN producerName ;",
      "ecql": "SELECT producer.name FROM producer WHERE producer.id = { MATCH (movie:Movie)-[:MadeBy]->(producer:Producer), (movie:Movie)-[:DirectedBy]->(director:Director) WITH producer.id AS producer_id, COUNT (director) AS cnt RETURN producer_id ORDER BY cnt DESC LIMIT 1 }",
      "ecql_mir": "Match _ With _ Return _ OrderBy _ Limit _ TableScan _ Filter _ Project _ | Match (movie:Movie)-[:MadeBy]->(producer:Producer), (movie:Movie)-[:DirectedBy]->(director:Director) ; With producer.id AS producer_id COUNT ( director ) AS cnt ; Return producer_id ; OrderBy cnt DESC ; Limit 1 ; TableScan producer ; Filter producer.id = producer.id ; Project producer.name ; ",
      "sqlpp": "SELECT producer.name FROM ( SELECT producer.name, COUNT(director) AS cnt FROM ( MATCH {class: Producer, as: producer}.inE('MadeBy').outV('Movie') {as: movie}.outE('DirectedBy').inV('Director') {as: director} RETURN producer, director ) GROUP BY producer ORDER BY cnt DESC LIMIT 1 )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Traversal _ Traversal _ Return _ GroupBy _ OrderBy _ Limit _ Project _ Project _ | Match Producer producer ; Traversal IN MadeBy ; Traversal OUT Movie movie ; Traversal OUT DirectedBy ; Traversal IN Director director ; Return producer director ; GroupBy producer ; OrderBy cnt DESC ; Limit 1 ; Project producer.name COUNT ( director ) AS cnt ; Project producer.name ; ",
      "result_aql": ["Hal Roach"],
      "result_count_aql": 1,
      "result_ecql": ["Hal Roach"],
      "result_count_ecql": 1,
      "result_sqlpp": ["Hal Roach"],
      "result_count_sqlpp": 1
    },
    {
      "template": 69,
      "question": "find all films in which \" Rowan Atkinson \" acted as \" Mr. Bean \"",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Rowan Atkinson\" FOR movie, cast IN 1 OUTBOUND actor Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FILTER cast.role == \"Mr. Bean\" RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Rowan Atkinson\" ; TRAVERSAL FOR movie , cast IN 1 OUTBOUND actor Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; FILTER FILTER cast.role == \"Mr. Bean\" ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE actor.id = { SELECT actor.id FROM actor WHERE actor.name = 'Rowan Atkinson' } AND r.role = 'Mr. Bean' RETURN movie.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Rowan Atkinson' ; Project actor.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter actor.id = actor.id AND r.role = 'Mr. Bean' ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM ( MATCH {class: Actor, as: actor, where: (name = 'Rowan Atkinson')}.outE('Cast') {where: (role = 'Mr. Bean')}.inV('Movie') {as: movie} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor (name = 'Rowan Atkinson') ; Traversal OUT Cast (role = 'Mr. Bean') ; Traversal IN Movie movie ; Return movie ; Project movie.title ; ",
      "result_aql": ["Bean", "Bean: Scenes Unseen", "Comic Relief", "Comic Relief 2007: The Big One", "Comic Relief Presents the Pick of the Nose", "Comic Relief: Behind the Nose", "Comic Relief: The Invasion of the Comic Tomatoes", "Election 92", "London 2012 Olympic Opening Ceremony: Isles of Wonder", "Morir de humor", "Mr Bean: Blind Date", "Mr Bean: Funeral", "Mr Bean: The Bus Stop", "Mr Bean: The Library", "Mr Bean: Torvill and Bean", "Mr. Bean's Holiday", "Mr. Bean's Red Nose Day", "Mr. Bean's Wedding", "The Amazing Adventures of Mr. Bean", "The Exciting Escapades of Mr. Bean", "The Final Frolics of Mr. Bean", "The Merry Mishaps of Mr. Bean", "The Perilous Persuits of Mr. Bean", "Unseen Bean", "XXX Summer Olympics Opening Ceremony", "¿De qué te ríes?"],
      "result_count_aql": 26,
      "result_ecql": ["Bean", "Bean: Scenes Unseen", "Comic Relief", "Comic Relief 2007: The Big One", "Comic Relief Presents the Pick of the Nose", "Comic Relief: Behind the Nose", "Comic Relief: The Invasion of the Comic Tomatoes", "Election 92", "London 2012 Olympic Opening Ceremony: Isles of Wonder", "Morir de humor", "Mr Bean: Blind Date", "Mr Bean: Funeral", "Mr Bean: The Bus Stop", "Mr Bean: The Library", "Mr Bean: Torvill and Bean", "Mr. Bean's Holiday", "Mr. Bean's Red Nose Day", "Mr. Bean's Wedding", "The Amazing Adventures of Mr. Bean", "The Exciting Escapades of Mr. Bean", "The Final Frolics of Mr. Bean", "The Merry Mishaps of Mr. Bean", "The Perilous Persuits of Mr. Bean", "Unseen Bean", "XXX Summer Olympics Opening Ceremony", "¿De qué te ríes?"],
      "result_count_ecql": 26,
      "result_sqlpp": ["Bean", "Bean: Scenes Unseen", "Comic Relief", "Comic Relief 2007: The Big One", "Comic Relief Presents the Pick of the Nose", "Comic Relief: Behind the Nose", "Comic Relief: The Invasion of the Comic Tomatoes", "Election 92", "London 2012 Olympic Opening Ceremony: Isles of Wonder", "Morir de humor", "Mr Bean: Blind Date", "Mr Bean: Funeral", "Mr Bean: The Bus Stop", "Mr Bean: The Library", "Mr Bean: Torvill and Bean", "Mr. Bean's Holiday", "Mr. Bean's Red Nose Day", "Mr. Bean's Wedding", "The Amazing Adventures of Mr. Bean", "The Exciting Escapades of Mr. Bean", "The Final Frolics of Mr. Bean", "The Merry Mishaps of Mr. Bean", "The Perilous Persuits of Mr. Bean", "Unseen Bean", "XXX Summer Olympics Opening Ceremony", "¿De qué te ríes?"],
      "result_count_sqlpp": 26
    },
    {
      "template": 70,
      "question": "Who acted \" John Nash \" in the movie \" A Beautiful Mind \" ?",
      "aql": "FOR movie IN Movie FILTER movie.title == \"A Beautiful Mind\" FOR actor, cast IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor ) FILTER cast.role == \"John Nash\" RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"A Beautiful Mind\" ; TRAVERSAL FOR actor , cast IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor ) ; FILTER FILTER cast.role == \"John Nash\" ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE r.role = 'John Nash' AND movie.id = { SELECT movie.id FROM movie WHERE movie.title = 'A Beautiful Mind' } RETURN actor.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'A Beautiful Mind' ; Project movie.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter r.role = 'John Nash' AND movie.id = movie.id ; Return actor.id ; TableScan actor ; Filter actor.id = actor.id ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM ( MATCH {class: Actor, as: actor}.outE('Cast') {where: (role = 'John Nash')}.inV('Movie') {as: movie, where: (title = 'A Beautiful Mind')} RETURN actor )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor ; Traversal OUT Cast (role = 'John Nash') ; Traversal IN Movie movie (title = 'A Beautiful Mind') ; Return actor ; Project actor.name ; ",
      "result_aql": ["Russell Crowe"],
      "result_count_aql": 1,
      "result_ecql": ["Russell Crowe"],
      "result_count_ecql": 1,
      "result_sqlpp": ["Russell Crowe"],
      "result_count_sqlpp": 1
    },
    {
      "template": 71,
      "question": "How many movies did \" Steven Spielberg \" direct ?",
      "aql": "FOR director IN Director FILTER director.name == \"Steven Spielberg\" FOR movie IN 1 INBOUND director DirectedBy FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) COLLECT WITH COUNT INTO cnt RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR director IN Director ; FILTER FILTER director.name == \"Steven Spielberg\" ; TRAVERSAL FOR movie IN 1 INBOUND director DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; AGGREGATE COLLECT WITH COUNT INTO cnt ; RETURN RETURN cnt ;",
      "ecql": "MATCH (movie:Movie)-[r:DirectedBy]->(director:Director) WHERE director.id = { SELECT director.id FROM director WHERE director.name = 'Steven Spielberg' } WITH COUNT (*) AS cnt RETURN cnt",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ With _ Return _ | TableScan director ; Filter director.name = 'Steven Spielberg' ; Project director.id ; Match (movie:Movie)-[r:DirectedBy]->(director:Director) ; Filter director.id = director.id ; With COUNT ( * ) AS cnt ; Return cnt ; ",
      "sqlpp": "SELECT COUNT(*) AS cnt FROM ( MATCH {class: Movie, as: movie}.outE('DirectedBy').inV('Director') {as: director, where: (name = 'Steven Spielberg')} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Movie movie ; Traversal OUT DirectedBy ; Traversal IN Director director (name = 'Steven Spielberg') ; Return movie ; Project COUNT ( * ) AS cnt ; ",
      "result_aql": ["49"],
      "result_count_aql": 1,
      "result_ecql": ["49"],
      "result_count_ecql": 1,
      "result_sqlpp": ["49"],
      "result_count_sqlpp": 1
    },
    {
      "template": 72,
      "question": "where is the director of \" The Past \" from",
      "aql": "FOR movie IN Movie FILTER movie.title == \"The Past\" FOR director IN 1 OUTBOUND movie DirectedBy FILTER IS_SAME_COLLECTION ( \"Director\", director ) RETURN director.birth_city",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"The Past\" ; TRAVERSAL FOR director IN 1 OUTBOUND movie DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Director\" , director ) ; RETURN RETURN director.birth_city ;",
      "ecql": "SELECT director.birth_city FROM director WHERE director.id = { MATCH (movie:Movie)-[r:DirectedBy]->(director:Director) WHERE movie.id = { SELECT movie.id FROM movie WHERE movie.title = 'The Past' } RETURN director.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'The Past' ; Project movie.id ; Match (movie:Movie)-[r:DirectedBy]->(director:Director) ; Filter movie.id = movie.id ; Return director.id ; TableScan director ; Filter director.id = director.id ; Project director.birth_city ; ",
      "sqlpp": "SELECT director.birth_city FROM ( MATCH {class: Movie, as: movie, where: (title = 'The Past')}.outE('DirectedBy').inV('Director') {as: director} RETURN director )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Movie movie (title = 'The Past') ; Traversal OUT DirectedBy ; Traversal IN Director director ; Return director ; Project director.birth_city ; ",
      "result_aql": ["None", "None"],
      "result_count_aql": 2,
      "result_ecql": ["None", "None"],
      "result_count_ecql": 2,
      "result_sqlpp": ["None", "None"],
      "result_count_sqlpp": 2
    },
    {
      "template": 73,
      "question": "What are all the movies featuring \" Kerry Washington \" ?",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Kerry Washington\" FOR movie IN 1 OUTBOUND actor Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Kerry Washington\" ; TRAVERSAL FOR movie IN 1 OUTBOUND actor Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE actor.id = { SELECT actor.id FROM actor WHERE actor.name = 'Kerry Washington' } RETURN movie.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Kerry Washington' ; Project actor.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter actor.id = actor.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM ( MATCH {class: Actor, as: actor, where: (name = 'Kerry Washington')}.outE('Cast').inV('Movie') {as: movie} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor (name = 'Kerry Washington') ; Traversal OUT Cast ; Traversal IN Movie movie ; Return movie ; Project movie.title ; ",
      "result_aql": ["19th Annual Screen Actors Guild Awards", "2013 MTV Movie Awards", "2014 Golden Globe Arrivals Special", "20th Annual Screen Actors Guild Awards", "20th Annual Screen Actors Guild Awards", "30th Annual Film Independent Smirit Awards", "36th NAACP Image Awards", "38th Annual Kennedy Center Honors", "4: Rise of the Silver Surfer", "70th Golden Globe Awards", "71st Golden Globe Awards", "72nd Golden Globe Awards", "Capturing Idi Amin", "Django Unchained", "Fantastic Four", "Girl Rising", "I Think I Love My Wife", "Miracle at St. Anna", "Our Song", "Peeples", "Saturday Night Live: 40th Anniversary Special", "Saturday Night Live: Best of This Season", "Save the Last Dance", "She Hate Me", "TV Land Icon Awards 2016", "The 2011 Independent Smirit Awards", "The 2013 Film Independent Smirit Awards", "The 46th Annual NAACP Image Awards", "The 47th NAACP Image Awards", "The 63rd Primetime Emmy Awards", "The 64th Annual Tony Awards", "The 64th Primetime Emmy Awards", "The 65th Primetime Emmy Awards", "The 65th Primetime Emmy Awards", "The 66th Primetime Emmy Awards", "The 67th Primetime Emmy Awards", "The Details", "The Last King of Scotland", "The Oscars", "The Oscars", "The Oscars", "The Oscars", "The Oscars Red Carpet Live"],
      "result_count_aql": 41,
      "result_ecql": ["19th Annual Screen Actors Guild Awards", "2013 MTV Movie Awards", "2014 Golden Globe Arrivals Special", "20th Annual Screen Actors Guild Awards", "30th Annual Film Independent Smirit Awards", "36th NAACP Image Awards", "38th Annual Kennedy Center Honors", "4: Rise of the Silver Surfer", "70th Golden Globe Awards", "71st Golden Globe Awards", "72nd Golden Globe Awards", "Capturing Idi Amin", "Django Unchained", "Fantastic Four", "Girl Rising", "I Think I Love My Wife", "Miracle at St. Anna", "Our Song", "Peeples", "Saturday Night Live: 40th Anniversary Special", "Saturday Night Live: Best of This Season", "Save the Last Dance", "She Hate Me", "TV Land Icon Awards 2016", "The 2011 Independent Smirit Awards", "The 2013 Film Independent Smirit Awards", "The 46th Annual NAACP Image Awards", "The 47th NAACP Image Awards", "The 63rd Primetime Emmy Awards", "The 64th Annual Tony Awards", "The 64th Primetime Emmy Awards", "The 65th Primetime Emmy Awards", "The 66th Primetime Emmy Awards", "The 67th Primetime Emmy Awards", "The Details", "The Last King of Scotland", "The Oscars", "The Oscars", "The Oscars", "The Oscars", "The Oscars Red Carpet Live"],
      "result_count_ecql": 41,
      "result_sqlpp": ["19th Annual Screen Actors Guild Awards", "2013 MTV Movie Awards", "2014 Golden Globe Arrivals Special", "20th Annual Screen Actors Guild Awards", "30th Annual Film Independent Smirit Awards", "36th NAACP Image Awards", "38th Annual Kennedy Center Honors", "4: Rise of the Silver Surfer", "70th Golden Globe Awards", "71st Golden Globe Awards", "72nd Golden Globe Awards", "Capturing Idi Amin", "Django Unchained", "Fantastic Four", "Girl Rising", "I Think I Love My Wife", "Miracle at St. Anna", "Our Song", "Peeples", "Saturday Night Live: 40th Anniversary Special", "Saturday Night Live: Best of This Season", "Save the Last Dance", "She Hate Me", "TV Land Icon Awards 2016", "The 2011 Independent Smirit Awards", "The 2013 Film Independent Smirit Awards", "The 46th Annual NAACP Image Awards", "The 47th NAACP Image Awards", "The 63rd Primetime Emmy Awards", "The 64th Annual Tony Awards", "The 64th Primetime Emmy Awards", "The 65th Primetime Emmy Awards", "The 66th Primetime Emmy Awards", "The 67th Primetime Emmy Awards", "The Details", "The Last King of Scotland", "The Oscars", "The Oscars", "The Oscars", "The Oscars", "The Oscars Red Carpet Live"],
      "result_count_sqlpp": 41
    },
    {
      "template": 74,
      "question": "Find all movies produced by producer \" Walt Disney \" after 2010",
      "aql": "FOR producer IN Producer FILTER producer.name == \"Walt Disney\" FOR movie IN 1 INBOUND producer MadeBy FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FILTER movie.release_year > 2010 RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR producer IN Producer ; FILTER FILTER producer.name == \"Walt Disney\" ; TRAVERSAL FOR movie IN 1 INBOUND producer MadeBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; FILTER FILTER movie.release_year > 2010 ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (movie:Movie)-[r:MadeBy]->(producer:Producer) WHERE producer.id = { SELECT producer.id FROM producer WHERE producer.name = 'Walt Disney' } RETURN movie.id } AND movie.release_year > 2010",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan producer ; Filter producer.name = 'Walt Disney' ; Project producer.id ; Match (movie:Movie)-[r:MadeBy]->(producer:Producer) ; Filter producer.id = producer.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id AND movie.release_year > 2010 ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM (MATCH {class: Movie, as: movie, where: (release_year > 2010)}.outE('MadeBy').inV('Producer') {as: producer, where: (name = 'Walt Disney')} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Movie movie (release_year > 2010) ; Traversal OUT MadeBy ; Traversal IN Producer producer (name = 'Walt Disney') ; Return movie ; Project movie.title ; ",
      "result_aql": "[]",
      "result_count_aql": 0,
      "result_ecql": "[]",
      "result_count_ecql": 0,
      "result_sqlpp": "[]",
      "result_count_sqlpp": 0
    },
    {
      "template": 75,
      "question": "What is the number of movies in which \" Tom Cruise \" acted ?",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Tom Cruise\" FOR movie IN 1 OUTBOUND actor Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) COLLECT WITH COUNT INTO cnt RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Tom Cruise\" ; TRAVERSAL FOR movie IN 1 OUTBOUND actor Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; AGGREGATE COLLECT WITH COUNT INTO cnt ; RETURN RETURN cnt ;",
      "ecql": "MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE actor.id = { SELECT actor.id FROM actor WHERE actor.name = 'Tom Cruise' } WITH COUNT (*) AS cnt RETURN cnt",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ With _ Return _ | TableScan actor ; Filter actor.name = 'Tom Cruise' ; Project actor.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter actor.id = actor.id ; With COUNT ( * ) AS cnt ; Return cnt ; ",
      "sqlpp": "SELECT COUNT(*) AS cnt FROM ( MATCH {class: Actor, as: actor, where: (name = 'Tom Cruise')}.outE('Cast').inV('Movie') {as: movie} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor (name = 'Tom Cruise') ; Traversal OUT Cast ; Traversal IN Movie movie ; Return movie ; Project COUNT ( * ) AS cnt ; ",
      "result_aql": ["69"],
      "result_count_aql": 1,
      "result_ecql": ["69"],
      "result_count_ecql": 1,
      "result_sqlpp": ["69"],
      "result_count_sqlpp": 1
    },
    {
      "template": 76,
      "question": "How many companies participated in producing \" Camp X-Ray \"",
      "aql": "FOR movie IN Movie FILTER movie.title == \"Camp X-Ray\" FOR company IN 1 INBOUND movie Copyright FILTER IS_SAME_COLLECTION ( \"Company\", company ) COLLECT WITH COUNT INTO cnt RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"Camp X-Ray\" ; TRAVERSAL FOR company IN 1 INBOUND movie Copyright ; FILTER FILTER IS_SAME_COLLECTION ( \"Company\" , company ) ; AGGREGATE COLLECT WITH COUNT INTO cnt ; RETURN RETURN cnt ;",
      "ecql": "MATCH (company:Company)-[r:Copyright]->(movie:Movie) WHERE movie.id = { SELECT movie.id FROM movie WHERE movie.title = 'Camp X-Ray' } WITH COUNT (*) AS cnt RETURN cnt",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ With _ Return _ | TableScan movie ; Filter movie.title = 'Camp X-Ray' ; Project movie.id ; Match (company:Company)-[r:Copyright]->(movie:Movie) ; Filter movie.id = movie.id ; With COUNT ( * ) AS cnt ; Return cnt ; ",
      "sqlpp": "SELECT COUNT(*) AS cnt FROM ( MATCH {class: Company, as: company}.outE('Copyright').inV('Movie') {as: movie, where: (title = 'Camp X-Ray')} RETURN company )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Company company ; Traversal OUT Copyright ; Traversal IN Movie movie (title = 'Camp X-Ray') ; Return company ; Project COUNT ( * ) AS cnt ; ",
      "result_aql": ["5"],
      "result_count_aql": 1,
      "result_ecql": ["5"],
      "result_count_ecql": 1,
      "result_sqlpp": ["5"],
      "result_count_sqlpp": 1
    },
    {
      "template": 77,
      "question": "which company funded the \" Mickey Mouse \" series",
      "aql": "FOR tv_series IN TvSeries FILTER tv_series.title == \"Mickey Mouse\" FOR company IN 1 INBOUND tv_series Copyright FILTER IS_SAME_COLLECTION ( \"Company\", company ) RETURN company.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR tv_series IN TvSeries ; FILTER FILTER tv_series.title == \"Mickey Mouse\" ; TRAVERSAL FOR company IN 1 INBOUND tv_series Copyright ; FILTER FILTER IS_SAME_COLLECTION ( \"Company\" , company ) ; RETURN RETURN company.name ;",
      "ecql": "SELECT company.name FROM company WHERE company.id = { MATCH (company:Company)-[r:Copyright]->(tv_series:TvSeries) WHERE tv_series.id = { SELECT tv_series.id FROM tv_series WHERE tv_series.title = 'Mickey Mouse' } RETURN company.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan tv_series ; Filter tv_series.title = 'Mickey Mouse' ; Project tv_series.id ; Match (company:Company)-[r:Copyright]->(tv_series:TvSeries) ; Filter tv_series.id = tv_series.id ; Return company.id ; TableScan company ; Filter company.id = company.id ; Project company.name ; ",
      "sqlpp": "SELECT company.name FROM ( MATCH {class: Company, as: company}.outE('Copyright').inV('TvSeries') {where: (title = 'Mickey Mouse')} RETURN company )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Company company ; Traversal OUT Copyright ; Traversal IN TvSeries (title = 'Mickey Mouse') ; Return company ; Project company.name ; ",
      "result_aql": ["Disney Television Animation"],
      "result_count_aql": 1,
      "result_ecql": ["Disney Television Animation"],
      "result_count_ecql": 1,
      "result_sqlpp": ["Disney Television Animation"],
      "result_count_sqlpp": 1
    },
    {
      "template": 78,
      "question": "Find all actors born in \" Los Angeles \" after 1980",
      "aql": "FOR actor IN Actor FILTER actor.birth_city == \"Los Angeles\" AND actor.birth_year > 1980 RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.birth_city == \"Los Angeles\" AND actor.birth_year > 1980 ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.birth_city = 'Los Angeles' AND actor.birth_year > 1980",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_city = 'Los Angeles' AND actor.birth_year > 1980 ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM actor WHERE actor.birth_city = 'Los Angeles' AND actor.birth_year > 1980",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_city = 'Los Angeles' AND actor.birth_year > 1980 ; Project actor.name ; ",
      "result_aql": "[]",
      "result_count_aql": 994,
      "result_ecql": "[]",
      "result_count_ecql": 994,
      "result_sqlpp": "[]",
      "result_count_sqlpp": 994
    },
    {
      "template": 79,
      "question": "Who acted in the most number of movies directed by \" Jim Jarmusch \"",
      "aql": "FOR director IN Director FILTER director.name == \"Jim Jarmusch\" FOR movie IN 1 INBOUND director DirectedBy FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FOR actor IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor ) COLLECT actorname = actor.name WITH COUNT INTO cnt SORT cnt DESC LIMIT 1 RETURN actorname",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; AGGREGATE _ ; SORT _ ; LIMIT _ ; RETURN _ ; | COLLECTION FOR director IN Director ; FILTER FILTER director.name == \"Jim Jarmusch\" ; TRAVERSAL FOR movie IN 1 INBOUND director DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; TRAVERSAL FOR actor IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor ) ; AGGREGATE COLLECT actorname = actor.name WITH COUNT INTO cnt ; SORT SORT cnt DESC ; LIMIT LIMIT 1 ; RETURN RETURN actorname ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.id = { MATCH (actor:Actor)-[:Cast]->(movie:Movie), (movie:Movie)-[:DirectedBy]->(director:Director) WHERE director.id = { SELECT director.id FROM director WHERE director.name = 'Jim Jarmusch' } WITH actor.id AS actor_id, COUNT (movie) AS cnt RETURN actor_id ORDER BY cnt LIMIT 1 }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ With _ Return _ OrderBy _ Limit _ TableScan _ Filter _ Project _ | TableScan director ; Filter director.name = 'Jim Jarmusch' ; Project director.id ; Match (actor:Actor)-[:Cast]->(movie:Movie), (movie:Movie)-[:DirectedBy]->(director:Director) ; Filter director.id = director.id ; With actor.id AS actor_id COUNT ( movie ) AS cnt ; Return actor_id ; OrderBy cnt ASC ; Limit 1 ; TableScan actor ; Filter actor.id = actor.id ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM ( SELECT actor.name, COUNT(movie) AS cnt FROM ( MATCH {class: Actor, as: actor}.outE('Cast').inV('Movie') {as: movie}.outE('DirectedBy').inV('Director') {as: director, where: (name = 'Jim Jarmusch')} RETURN actor, movie ) GROUP BY actor ORDER BY cnt DESC LIMIT 1 )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Traversal _ Traversal _ Return _ GroupBy _ OrderBy _ Limit _ Project _ Project _ | Match Actor actor ; Traversal OUT Cast ; Traversal IN Movie movie ; Traversal OUT DirectedBy ; Traversal IN Director director (name = 'Jim Jarmusch') ; Return actor movie ; GroupBy actor ; OrderBy cnt DESC ; Limit 1 ; Project actor.name COUNT ( movie ) AS cnt ; Project actor.name ; ",
      "result_aql": ["Richard Boes"],
      "result_count_aql": 1,
      "result_ecql": ["Trikz"],
      "result_count_ecql": 1,
      "result_sqlpp": ["Trikz"],
      "result_count_sqlpp": 1
    },
    {
      "template": 80,
      "question": "How many movies did \" Ronald Reagan \" act in ?",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Ronald Reagan\" FOR movie IN 1 OUTBOUND actor Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) COLLECT WITH COUNT INTO cnt RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Ronald Reagan\" ; TRAVERSAL FOR movie IN 1 OUTBOUND actor Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; AGGREGATE COLLECT WITH COUNT INTO cnt ; RETURN RETURN cnt ;",
      "ecql": "MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE actor.id = { SELECT actor.id FROM actor WHERE actor.name = 'Ronald Reagan' } WITH COUNT (*) AS cnt RETURN cnt",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ With _ Return _ | TableScan actor ; Filter actor.name = 'Ronald Reagan' ; Project actor.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter actor.id = actor.id ; With COUNT ( * ) AS cnt ; Return cnt ; ",
      "sqlpp": "SELECT COUNT(*) AS cnt FROM ( MATCH {class: Actor, as: actor, where: (name = 'Ronald Reagan')}.outE('Cast').inV('Movie') {as: movie} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor (name = 'Ronald Reagan') ; Traversal OUT Cast ; Traversal IN Movie movie ; Return movie ; Project COUNT ( * ) AS cnt ; ",
      "result_aql": ["99"],
      "result_count_aql": 1,
      "result_ecql": ["99"],
      "result_count_ecql": 1,
      "result_sqlpp": ["99"],
      "result_count_sqlpp": 1
    },
    {
      "template": 81,
      "question": "Find all movies featuring both \" Matt Damon \" and \" Ben Affleck \"",
      "aql": "FOR actor_1 IN Actor FILTER actor_1.name == \"Matt Damon\" FOR movie IN 1 OUTBOUND actor_1 Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FOR actor_2 IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor_2 ) FILTER actor_2.name == \"Ben Affleck\" RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor_1 IN Actor ; FILTER FILTER actor_1.name == \"Matt Damon\" ; TRAVERSAL FOR movie IN 1 OUTBOUND actor_1 Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; TRAVERSAL FOR actor_2 IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor_2 ) ; FILTER FILTER actor_2.name == \"Ben Affleck\" ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (actor_1:Actor)-[:Cast]->(movie:Movie), (actor_2:Actor)-[:Cast]->(movie:Movie) WHERE actor_1.id = { SELECT actor.id FROM actor WHERE actor.name = 'Matt Damon' } AND actor_2.id = { SELECT actor.id FROM actor WHERE actor.name = 'Ben Affleck' } RETURN movie.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Matt Damon' ; Project actor.id ; TableScan actor ; Filter actor.name = 'Ben Affleck' ; Project actor.id ; Match (actor_1:Actor)-[:Cast]->(movie:Movie), (actor_2:Actor)-[:Cast]->(movie:Movie) ; Filter actor_1.id = actor_1.id AND actor_2.id = actor_2.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM ( MATCH {class: Actor, where: (name = 'Matt Damon')}.outE('Cast').inV('Movie') {as: movie}.inE('Cast').outV('Actor') {where: (name = 'Ben Affleck')} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Traversal _ Traversal _ Return _ Project _ | Match Actor (name = 'Matt Damon') ; Traversal OUT Cast ; Traversal IN Movie movie ; Traversal IN Cast ; Traversal OUT Actor (name = 'Ben Affleck') ; Return movie ; Project movie.title ; ",
      "result_aql": ["20th Annual Screen Actors Guild Awards", "20th Annual Screen Actors Guild Awards", "71st Golden Globe Awards", "71st Golden Globe Awards", "Chasing Amy", "Field of Dreams", "Good Will Hunting", "Jay and Silent Bob Strike Back", "Jersey Girl", "The 55th Annual Golden Globe Awards", "The 56th Annual Golden Globe Awards", "The 57th Annual Golden Globe Awards", "The 57th Annual Golden Globe Awards", "The 70th Annual Academy Awards", "The 71st Annual Academy Awards"],
      "result_count_aql": 12,
      "result_ecql": ["20th Annual Screen Actors Guild Awards", "71st Golden Globe Awards", "Chasing Amy", "Field of Dreams", "Good Will Hunting", "Jay and Silent Bob Strike Back", "Jersey Girl", "The 55th Annual Golden Globe Awards", "The 56th Annual Golden Globe Awards", "The 57th Annual Golden Globe Awards", "The 70th Annual Academy Awards", "The 71st Annual Academy Awards"],
      "result_count_ecql": 12,
      "result_sqlpp": ["20th Annual Screen Actors Guild Awards", "71st Golden Globe Awards", "Chasing Amy", "Field of Dreams", "Good Will Hunting", "Jay and Silent Bob Strike Back", "Jersey Girl", "The 55th Annual Golden Globe Awards", "The 56th Annual Golden Globe Awards", "The 57th Annual Golden Globe Awards", "The 70th Annual Academy Awards", "The 71st Annual Academy Awards"],
      "result_count_sqlpp": 12
    },
    {
      "template": 82,
      "question": "List all the directors of movies about nuclear weapons",
      "aql": "FOR keyword IN Keyword FILTER CONTAINS(keyword.keyword, \"nuclear-weapons\") FOR movie IN 1 INBOUND keyword Tags FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FOR director IN 1 OUTBOUND movie DirectedBy FILTER IS_SAME_COLLECTION ( \"Director\", director ) RETURN director.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR keyword IN Keyword ; FILTER FILTER CONTAINS ( keyword.keyword , \"nuclear-weapons\" ) ; TRAVERSAL FOR movie IN 1 INBOUND keyword Tags ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; TRAVERSAL FOR director IN 1 OUTBOUND movie DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Director\" , director ) ; RETURN RETURN director.name ;",
      "ecql": "SELECT director.name FROM director WHERE director.id = { MATCH (movie:Movie)-[r:DirectedBy]->(director:Director) WHERE movie.id = { SELECT movie.id FROM movie WHERE movie.keyword @> '[\"nuclear-weapons\"]' } RETURN director.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.keyword @> '[\"nuclear-weapons\"]' ; Project movie.id ; Match (movie:Movie)-[r:DirectedBy]->(director:Director) ; Filter movie.id = movie.id ; Return director.id ; TableScan director ; Filter director.id = director.id ; Project director.name ; ",
      "sqlpp": "SELECT director.name FROM ( MATCH {class: Movie, as: movie, where: (keyword CONTAINS 'nuclear-weapons')}.outE('DirectedBy').inV('Director') {as: director} RETURN director )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Movie movie (keyword CONTAINS 'nuclear-weapons') ; Traversal OUT DirectedBy ; Traversal IN Director director ; Return director ; Project director.name ; ",
      "result_aql": "[]",
      "result_count_aql": 289,
      "result_ecql": "[]",
      "result_count_ecql": 289,
      "result_sqlpp": "[]",
      "result_count_sqlpp": 289
    },
    {
      "template": 83,
      "question": "How many actors are in the movie \" Saving Private Ryan \" ?",
      "aql": "FOR movie IN Movie FILTER movie.title == \"Saving Private Ryan\" FOR actor IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor ) COLLECT WITH COUNT INTO cnt RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"Saving Private Ryan\" ; TRAVERSAL FOR actor IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor ) ; AGGREGATE COLLECT WITH COUNT INTO cnt ; RETURN RETURN cnt ;",
      "ecql": "MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE movie.id = { SELECT movie.id FROM movie WHERE movie.title = 'Saving Private Ryan' } WITH COUNT (*) AS cnt RETURN cnt",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ With _ Return _ | TableScan movie ; Filter movie.title = 'Saving Private Ryan' ; Project movie.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter movie.id = movie.id ; With COUNT ( * ) AS cnt ; Return cnt ; ",
      "sqlpp": "SELECT COUNT(*) AS cnt FROM ( MATCH {class: Actor, as: actor}.outE('Cast').inV('Movie') {as: movie, where: (title = 'Saving Private Ryan')} RETURN actor )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor ; Traversal OUT Cast ; Traversal IN Movie movie (title = 'Saving Private Ryan') ; Return actor ; Project COUNT ( * ) AS cnt ; ",
      "result_aql": ["210"],
      "result_count_aql": 1,
      "result_ecql": ["210"],
      "result_count_ecql": 1,
      "result_sqlpp": ["210"],
      "result_count_sqlpp": 1
    },
    {
      "template": 84,
      "question": "Find all actors who were born in \" New York City \" in 1984",
      "aql": "FOR actor IN Actor FILTER actor.birth_city == \"New York City\" AND actor.birth_year == 1984 RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.birth_city == \"New York City\" AND actor.birth_year == 1984 ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.birth_city = 'New York City' AND actor.birth_year = 1984",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_city = 'New York City' AND actor.birth_year = 1984 ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM actor WHERE actor.birth_city = 'New York City' AND actor.birth_year = 1984",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_city = 'New York City' AND actor.birth_year = 1984 ; Project actor.name ; ",
      "result_aql": ["Adam Lamberg", "Adrian Emmanuel", "Alex Billig", "Alexis Dziena", "Allie Calman", "Allison Hirschlag", "Amanda Evora", "Anthony Ashmore", "Anthony Fazio", "Ashley Peldon", "Barnaby De La Cruz", "Chanty Sok", "Chelsea Holland", "Chris Ferro", "Cullen Jones", "Elizabeth Masucci", "Ethan Goldsmith", "Geoff Yong", "Hunter Johansson", "Jake M. Smith", "Jake Thompson", "James Spector", "Jeff Orlowski", "Jessica Munch", "Josh Malek", "Joshua Safdie", "Lili Mirojnick", "Lisa Flores", "Max Pomeranc", "Melonie Diaz", "Michael Mcallister Jr.", "Nick Raynes", "Nicky Feliz", "Nik Tyler", "Nina Arianda", "Noureen DeWulf", "Olivia Wilde", "Orion Solarion", "Paul Dano", "Paz de la Huerta", "Quinn Culkin", "Quinton Aaron", "Reese Nanavati", "Remington Franklin", "Rob Brown", "Rocky Brito", "Samantha Maldonado", "Scarlett Johansson", "Sean Stone", "Sita Young", "Sérgio Hondjakoff", "Tom Kemnitz Jr.", "Tony Mui", "Victor Rasuk", "Wolf Hudson", "Yaniv Schulman"],
      "result_count_aql": 56,
      "result_ecql": ["Adam Lamberg", "Adrian Emmanuel", "Alex Billig", "Alexis Dziena", "Allie Calman", "Allison Hirschlag", "Amanda Evora", "Anthony Ashmore", "Anthony Fazio", "Ashley Peldon", "Barnaby De La Cruz", "Chanty Sok", "Chelsea Holland", "Chris Ferro", "Cullen Jones", "Elizabeth Masucci", "Ethan Goldsmith", "Geoff Yong", "Hunter Johansson", "Jake M. Smith", "Jake Thompson", "James Spector", "Jeff Orlowski", "Jessica Munch", "Josh Malek", "Joshua Safdie", "Lili Mirojnick", "Lisa Flores", "Max Pomeranc", "Melonie Diaz", "Michael Mcallister Jr.", "Nick Raynes", "Nicky Feliz", "Nik Tyler", "Nina Arianda", "Noureen DeWulf", "Olivia Wilde", "Orion Solarion", "Paul Dano", "Paz de la Huerta", "Quinn Culkin", "Quinton Aaron", "Reese Nanavati", "Remington Franklin", "Rob Brown", "Rocky Brito", "Samantha Maldonado", "Scarlett Johansson", "Sean Stone", "Sita Young", "Sérgio Hondjakoff", "Tom Kemnitz Jr.", "Tony Mui", "Victor Rasuk", "Wolf Hudson", "Yaniv Schulman"],
      "result_count_ecql": 56,
      "result_sqlpp": ["Adam Lamberg", "Adrian Emmanuel", "Alex Billig", "Alexis Dziena", "Allie Calman", "Allison Hirschlag", "Amanda Evora", "Anthony Ashmore", "Anthony Fazio", "Ashley Peldon", "Barnaby De La Cruz", "Chanty Sok", "Chelsea Holland", "Chris Ferro", "Cullen Jones", "Elizabeth Masucci", "Ethan Goldsmith", "Geoff Yong", "Hunter Johansson", "Jake M. Smith", "Jake Thompson", "James Spector", "Jeff Orlowski", "Jessica Munch", "Josh Malek", "Joshua Safdie", "Lili Mirojnick", "Lisa Flores", "Max Pomeranc", "Melonie Diaz", "Michael Mcallister Jr.", "Nick Raynes", "Nicky Feliz", "Nik Tyler", "Nina Arianda", "Noureen DeWulf", "Olivia Wilde", "Orion Solarion", "Paul Dano", "Paz de la Huerta", "Quinn Culkin", "Quinton Aaron", "Reese Nanavati", "Remington Franklin", "Rob Brown", "Rocky Brito", "Samantha Maldonado", "Scarlett Johansson", "Sean Stone", "Sita Young", "Sérgio Hondjakoff", "Tom Kemnitz Jr.", "Tony Mui", "Victor Rasuk", "Wolf Hudson", "Yaniv Schulman"],
      "result_count_sqlpp": 56
    },
    {
      "template": 85,
      "question": "Who is the writer of \" The Truman Show \"",
      "aql": "FOR movie IN Movie FILTER movie.title == \"The Truman Show\" FOR writer IN 1 OUTBOUND movie WrittenBy FILTER IS_SAME_COLLECTION ( \"Writer\", writer ) RETURN writer.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"The Truman Show\" ; TRAVERSAL FOR writer IN 1 OUTBOUND movie WrittenBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Writer\" , writer ) ; RETURN RETURN writer.name ;",
      "ecql": "SELECT writer.name FROM writer WHERE writer.id = { MATCH (movie:Movie)-[r:WrittenBy]->(writer:Writer) WHERE movie.id = { SELECT movie.id FROM movie WHERE movie.title = 'The Truman Show' } RETURN writer.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'The Truman Show' ; Project movie.id ; Match (movie:Movie)-[r:WrittenBy]->(writer:Writer) ; Filter movie.id = movie.id ; Return writer.id ; TableScan writer ; Filter writer.id = writer.id ; Project writer.name ; ",
      "sqlpp": "SELECT writer.name FROM ( MATCH {class: Movie, as: movie, where: (title = 'The Truman Show')}.outE('WrittenBy').inV('Writer') {as: writer} RETURN writer )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Movie movie (title = 'The Truman Show') ; Traversal OUT WrittenBy ; Traversal IN Writer writer ; Return writer ; Project writer.name ; ",
      "result_aql": ["Andrew Niccol"],
      "result_count_aql": 1,
      "result_ecql": ["Andrew Niccol"],
      "result_count_ecql": 1,
      "result_sqlpp": ["Andrew Niccol"],
      "result_count_sqlpp": 1
    },
    {
      "template": 86,
      "question": "Who acts as \" Alan Turing \" in the movie \" The Imitation Game \" ?",
      "aql": "FOR movie IN Movie FILTER movie.title == \"The Imitation Game\" FOR actor, cast IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor ) FILTER cast.role == \"Alan Turing\" RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"The Imitation Game\" ; TRAVERSAL FOR actor , cast IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor ) ; FILTER FILTER cast.role == \"Alan Turing\" ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE r.role = 'Alan Turing' AND movie.id = { SELECT movie.id FROM movie WHERE movie.title = 'The Imitation Game' } RETURN actor.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'The Imitation Game' ; Project movie.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter r.role = 'Alan Turing' AND movie.id = movie.id ; Return actor.id ; TableScan actor ; Filter actor.id = actor.id ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM ( MATCH {class: Actor, as: actor}.outE('Cast') {where: (role = 'Alan Turing')}.inV('Movie') {as: movie, where: (title = 'The Imitation Game')} RETURN actor )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor ; Traversal OUT Cast (role = 'Alan Turing') ; Traversal IN Movie movie (title = 'The Imitation Game') ; Return actor ; Project actor.name ; ",
      "result_aql": ["Alex Lawther"],
      "result_count_aql": 1,
      "result_ecql": ["Alex Lawther"],
      "result_count_ecql": 1,
      "result_sqlpp": ["Alex Lawther"],
      "result_count_sqlpp": 1
    },
    {
      "template": 87,
      "question": "Find all movies in which \" Robin Wright \" appears",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Robin Wright\" FOR movie IN 1 OUTBOUND actor Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Robin Wright\" ; TRAVERSAL FOR movie IN 1 OUTBOUND actor Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE actor.id = { SELECT actor.id FROM actor WHERE actor.name = 'Robin Wright' } RETURN movie.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Robin Wright' ; Project actor.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter actor.id = actor.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM ( MATCH {class: Actor, as: actor, where: (name = 'Robin Wright')}.outE('Cast').inV('Movie') {as: movie} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor (name = 'Robin Wright') ; Traversal OUT Cast ; Traversal IN Movie movie ; Return movie ; Project movie.title ; ",
      "result_aql": ["71st Golden Globe Awards", "72nd Golden Globe Awards", "73rd Golden Globe Awards", "A Sky News Tonight Special: Muhammad Ali's Funeral", "Beowulf", "Boffo! Tinseltown's Bombs and Blockbusters", "CBS News Special Report: Iraq Study Group News Conference", "Crisis Guide: Iran", "Everest", "Forrest Gump", "Hollywood Vice Squad", "Home", "Hounddog", "How to Kill Your Neighbor's Dog", "Loved", "Message in a Bottle", "Moll Flanders", "Rampart", "She's So Lovely", "Sorry, Haters", "The 20th IFP Independent Smirit Awards", "The 21st Annual Screen Actors Guild Awards", "The 52nd Annual Golden Globe Awards", "The 65th Primetime Emmy Awards", "The 66th Primetime Emmy Awards", "The 67th Primetime Emmy Awards", "The 76th Annual Academy Awards", "The 81st Annual Academy Awards", "The Consmirator", "The Last Castle", "The Princess Bride", "The Private Lives of Pippa Lee", "The Singing Detective", "Through the Eyes of Forrest Gump", "Toys", "Unbreakable", "Wonder Woman"],
      "result_count_aql": 37,
      "result_ecql": ["71st Golden Globe Awards", "72nd Golden Globe Awards", "73rd Golden Globe Awards", "A Sky News Tonight Special: Muhammad Ali's Funeral", "Beowulf", "Boffo! Tinseltown's Bombs and Blockbusters", "CBS News Special Report: Iraq Study Group News Conference", "Crisis Guide: Iran", "Everest", "Forrest Gump", "Hollywood Vice Squad", "Home", "Hounddog", "How to Kill Your Neighbor's Dog", "Loved", "Message in a Bottle", "Moll Flanders", "Rampart", "She's So Lovely", "Sorry, Haters", "The 20th IFP Independent Smirit Awards", "The 21st Annual Screen Actors Guild Awards", "The 52nd Annual Golden Globe Awards", "The 65th Primetime Emmy Awards", "The 66th Primetime Emmy Awards", "The 67th Primetime Emmy Awards", "The 76th Annual Academy Awards", "The 81st Annual Academy Awards", "The Consmirator", "The Last Castle", "The Princess Bride", "The Private Lives of Pippa Lee", "The Singing Detective", "Through the Eyes of Forrest Gump", "Toys", "Unbreakable", "Wonder Woman"],
      "result_count_ecql": 37,
      "result_sqlpp": ["71st Golden Globe Awards", "72nd Golden Globe Awards", "73rd Golden Globe Awards", "A Sky News Tonight Special: Muhammad Ali's Funeral", "Beowulf", "Boffo! Tinseltown's Bombs and Blockbusters", "CBS News Special Report: Iraq Study Group News Conference", "Crisis Guide: Iran", "Everest", "Forrest Gump", "Hollywood Vice Squad", "Home", "Hounddog", "How to Kill Your Neighbor's Dog", "Loved", "Message in a Bottle", "Moll Flanders", "Rampart", "She's So Lovely", "Sorry, Haters", "The 20th IFP Independent Smirit Awards", "The 21st Annual Screen Actors Guild Awards", "The 52nd Annual Golden Globe Awards", "The 65th Primetime Emmy Awards", "The 66th Primetime Emmy Awards", "The 67th Primetime Emmy Awards", "The 76th Annual Academy Awards", "The 81st Annual Academy Awards", "The Consmirator", "The Last Castle", "The Princess Bride", "The Private Lives of Pippa Lee", "The Singing Detective", "Through the Eyes of Forrest Gump", "Toys", "Unbreakable", "Wonder Woman"],
      "result_count_sqlpp": 37
    },
    {
      "template": 88,
      "question": "what are the genres of movies directed by \" Asghar Farhadi \"",
      "aql": "FOR director IN Director FILTER director.name == \"Asghar Farhadi\" FOR movie IN 1 INBOUND director DirectedBy FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FOR genre IN 1 OUTBOUND movie Classification FILTER IS_SAME_COLLECTION ( \"Genre\", genre ) RETURN genre.genre",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR director IN Director ; FILTER FILTER director.name == \"Asghar Farhadi\" ; TRAVERSAL FOR movie IN 1 INBOUND director DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; TRAVERSAL FOR genre IN 1 OUTBOUND movie Classification ; FILTER FILTER IS_SAME_COLLECTION ( \"Genre\" , genre ) ; RETURN RETURN genre.genre ;",
      "ecql": "SELECT JSONB_ARRAY_ELEMENTS(movie.genre) AS genre FROM movie WHERE movie.id = { MATCH (movie:Movie)-[r:DirectedBy]->(director:Director) WHERE director.id = { SELECT director.id FROM director WHERE director.name = 'Asghar Farhadi' } RETURN movie.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan director ; Filter director.name = 'Asghar Farhadi' ; Project director.id ; Match (movie:Movie)-[r:DirectedBy]->(director:Director) ; Filter director.id = director.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; Project JSONB_ARRAY_ELEMENTS ( movie.genre ) AS genre ; ",
      "sqlpp": "SELECT movie.genre FROM ( MATCH {class: Movie, as: movie}.outE('DirectedBy').inV('Director') {as: director, where: (name = 'Asghar Farhadi')} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Movie movie ; Traversal OUT DirectedBy ; Traversal IN Director director (name = 'Asghar Farhadi') ; Return movie ; Project movie.genre ; ",
      "result_aql": ["Drama", "Drama", "Drama", "Drama", "Drama", "Drama", "Drama", "Drama", "Mystery", "Mystery", "Mystery", "Mystery", "Romance", "Thriller", "Thriller"],
      "result_count_aql": 15,
      "result_ecql": ["Drama", "Drama", "Drama", "Drama", "Drama", "Drama", "Drama", "Drama", "Mystery", "Mystery", "Mystery", "Mystery", "Romance", "Thriller", "Thriller"],
      "result_count_ecql": 15,
      "result_sqlpp": ["Drama", "Drama", "Drama", "Drama", "Drama", "Drama", "Drama", "Drama", "Mystery", "Mystery", "Mystery", "Mystery", "Romance", "Thriller", "Thriller"],
      "result_count_sqlpp": 15
    },
    {
      "template": 89,
      "question": "Who is the director of the movie \" Catch Me If You Can \" ?",
      "aql": "FOR movie IN Movie FILTER movie.title == \"Catch Me If You Can\" FOR director IN 1 OUTBOUND movie DirectedBy FILTER IS_SAME_COLLECTION ( \"Director\", director ) RETURN director.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"Catch Me If You Can\" ; TRAVERSAL FOR director IN 1 OUTBOUND movie DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Director\" , director ) ; RETURN RETURN director.name ;",
      "ecql": "SELECT director.name FROM director WHERE director.id = { MATCH (movie:Movie)-[r:DirectedBy]->(director:Director) WHERE movie.id = { SELECT movie.id FROM movie WHERE movie.title = 'Catch Me If You Can' } RETURN director.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'Catch Me If You Can' ; Project movie.id ; Match (movie:Movie)-[r:DirectedBy]->(director:Director) ; Filter movie.id = movie.id ; Return director.id ; TableScan director ; Filter director.id = director.id ; Project director.name ; ",
      "sqlpp": "SELECT director.name FROM ( MATCH {class: Movie, as: movie, where: (title = 'Catch Me If You Can')}.outE('DirectedBy').inV('Director') {as: director} RETURN director )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Movie movie (title = 'Catch Me If You Can') ; Traversal OUT DirectedBy ; Traversal IN Director director ; Return director ; Project director.name ; ",
      "result_aql": ["Don Weis", "Donald Weiss", "Jeff Reiner", "Jeffrey Reiner", "Rick Davies", "Rick Davis", "Spielberg", "Stephen Sommers", "Stephen Spielberg", "Steve Sommers", "Steve Spielberg", "Steven", "Steven Allan Spielberg", "Steven Sommers", "Steven Speilberg", "Steven Spielberg", "Steven Spielrock"],
      "result_count_aql": 17,
      "result_ecql": ["Don Weis", "Donald Weiss", "Jeff Reiner", "Jeffrey Reiner", "Rick Davies", "Rick Davis", "Spielberg", "Stephen Sommers", "Stephen Spielberg", "Steve Sommers", "Steve Spielberg", "Steven", "Steven Allan Spielberg", "Steven Sommers", "Steven Speilberg", "Steven Spielberg", "Steven Spielrock"],
      "result_count_ecql": 17,
      "result_sqlpp": ["Don Weis", "Donald Weiss", "Jeff Reiner", "Jeffrey Reiner", "Rick Davies", "Rick Davis", "Spielberg", "Stephen Sommers", "Stephen Spielberg", "Steve Sommers", "Steve Spielberg", "Steven", "Steven Allan Spielberg", "Steven Sommers", "Steven Speilberg", "Steven Spielberg", "Steven Spielrock"],
      "result_count_sqlpp": 17
    },
    {
      "template": 90,
      "question": "What is the nationality of the actress \" Ellen Page \" ?",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Ellen Page\" RETURN actor.nationality",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Ellen Page\" ; RETURN RETURN actor.nationality ;",
      "ecql": "SELECT actor.nationality FROM actor WHERE actor.name = 'Ellen Page'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Ellen Page' ; Project actor.nationality ; ",
      "sqlpp": "SELECT actor.nationality FROM actor WHERE actor.name = 'Ellen Page'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Ellen Page' ; Project actor.nationality ; ",
      "result_aql": ["Canada"],
      "result_count_aql": 1,
      "result_ecql": ["Canada"],
      "result_count_ecql": 1,
      "result_sqlpp": ["Canada"],
      "result_count_sqlpp": 1
    },
    {
      "template": 91,
      "question": "Who was the director of the movie \" Joy \" from 2015 ?",
      "aql": "FOR movie IN Movie FILTER movie.title == \"Joy\" AND movie.release_year == 2015 FOR director IN 1 OUTBOUND movie DirectedBy FILTER IS_SAME_COLLECTION ( \"Director\", director ) RETURN director.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"Joy\" AND movie.release_year == 2015 ; TRAVERSAL FOR director IN 1 OUTBOUND movie DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Director\" , director ) ; RETURN RETURN director.name ;",
      "ecql": "SELECT director.name FROM director WHERE director.id = { MATCH (movie:Movie)-[r:DirectedBy]->(director:Director) WHERE movie.id = { SELECT movie.id FROM movie WHERE movie.title = 'Joy' AND movie.release_year = 2015 } RETURN director.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'Joy' AND movie.release_year = 2015 ; Project movie.id ; Match (movie:Movie)-[r:DirectedBy]->(director:Director) ; Filter movie.id = movie.id ; Return director.id ; TableScan director ; Filter director.id = director.id ; Project director.name ; ",
      "sqlpp": "SELECT director.name FROM ( MATCH {class: Movie, as: movie, where: (title = 'Joy' AND release_year = 2015)}.outE('DirectedBy').inV('Director') {as: director} RETURN director )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Movie movie (title = 'Joy' AND release_year = 2015) ; Traversal OUT DirectedBy ; Traversal IN Director director ; Return director ; Project director.name ; ",
      "result_aql": ["D. Russell", "David O'Russell", "David O. Russell", "David Owen Russell", "David Russell", "Heyishi Zhang", "Leigh Powis", "Solomon Onita", "Solomon Onita Jr.", "Stephen Greene", "Tony Delerme"],
      "result_count_aql": 11,
      "result_ecql": ["D. Russell", "David O'Russell", "David O. Russell", "David Owen Russell", "David Russell", "Heyishi Zhang", "Leigh Powis", "Solomon Onita", "Solomon Onita Jr.", "Stephen Greene", "Tony Delerme"],
      "result_count_ecql": 11,
      "result_sqlpp": ["D. Russell", "David O'Russell", "David O. Russell", "David Owen Russell", "David Russell", "Heyishi Zhang", "Leigh Powis", "Solomon Onita", "Solomon Onita Jr.", "Stephen Greene", "Tony Delerme"],
      "result_count_sqlpp": 11
    },
    {
      "template": 92,
      "question": "How many movies did Netflix produce ?",
      "aql": "FOR company IN Company FILTER company.name == \"Netflix\" FOR movie IN 1 OUTBOUND company Copyright FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) COLLECT WITH COUNT INTO cnt RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR company IN Company ; FILTER FILTER company.name == \"Netflix\" ; TRAVERSAL FOR movie IN 1 OUTBOUND company Copyright ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; AGGREGATE COLLECT WITH COUNT INTO cnt ; RETURN RETURN cnt ;",
      "ecql": "MATCH (company:Company)-[r:Copyright]->(movie:Movie) WHERE company.id = { SELECT company.id FROM company WHERE company.name = 'Netflix' } WITH COUNT (*) AS cnt RETURN cnt",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ With _ Return _ | TableScan company ; Filter company.name = 'Netflix' ; Project company.id ; Match (company:Company)-[r:Copyright]->(movie:Movie) ; Filter company.id = company.id ; With COUNT ( * ) AS cnt ; Return cnt ; ",
      "sqlpp": "SELECT COUNT(*) AS cnt FROM (MATCH {class: Company, as: company, where: (name = 'Netflix')}.outE('Copyright').inV('Movie') {as: movie} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Company company (name = 'Netflix') ; Traversal OUT Copyright ; Traversal IN Movie movie ; Return movie ; Project COUNT ( * ) AS cnt ; ",
      "result_aql": ["26"],
      "result_count_aql": 1,
      "result_ecql": ["26"],
      "result_count_ecql": 1,
      "result_sqlpp": ["26"],
      "result_count_sqlpp": 1
    },
    {
      "template": 93,
      "question": "What year was the movie \" The Imitation Game \" produced",
      "aql": "FOR movie IN Movie FILTER movie.title == \"The Imitation Game\" RETURN movie.release_year",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"The Imitation Game\" ; RETURN RETURN movie.release_year ;",
      "ecql": "SELECT movie.release_year FROM movie WHERE movie.title = 'The Imitation Game'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'The Imitation Game' ; Project movie.release_year ; ",
      "sqlpp": "SELECT movie.release_year FROM movie WHERE movie.title = 'The Imitation Game'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'The Imitation Game' ; Project movie.release_year ; ",
      "result_aql": ["2008", "2014"],
      "result_count_aql": 2,
      "result_ecql": ["2008", "2014"],
      "result_count_ecql": 2,
      "result_sqlpp": ["2008", "2014"],
      "result_count_sqlpp": 2
    },
    {
      "template": 94,
      "question": "How many movies about Iraq war were produced in 2015 ?",
      "aql": "FOR keyword IN Keyword FILTER CONTAINS(keyword.keyword, \"iraq-war\") FOR movie IN 1 INBOUND keyword Tags FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FILTER movie.release_year == 2015 COLLECT WITH COUNT INTO cnt RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR keyword IN Keyword ; FILTER FILTER CONTAINS ( keyword.keyword , \"iraq-war\" ) ; TRAVERSAL FOR movie IN 1 INBOUND keyword Tags ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; FILTER FILTER movie.release_year == 2015 ; AGGREGATE COLLECT WITH COUNT INTO cnt ; RETURN RETURN cnt ;",
      "ecql": "SELECT COUNT (*) AS cnt FROM movie WHERE movie.keyword @> '[\"iraq-war\"]' AND movie.release_year = 2015",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.keyword @> '[\"iraq-war\"]' AND movie.release_year = 2015 ; Project COUNT ( * ) AS cnt ; ",
      "sqlpp": "SELECT COUNT (*) AS cnt FROM movie WHERE movie.keyword CONTAINS 'iraq-war' AND movie.release_year = 2015",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.keyword CONTAINS 'iraq-war' AND movie.release_year = 2015 ; Project COUNT ( * ) AS cnt ; ",
      "result_aql": ["5"],
      "result_count_aql": 1,
      "result_ecql": ["4"],
      "result_count_ecql": 1,
      "result_sqlpp": ["4"],
      "result_count_sqlpp": 1
    },
    {
      "template": 95,
      "question": "What are the major roles in the movie \" Daddy Long Legs \"",
      "aql": "FOR movie IN Movie FILTER movie.title == \"Daddy Long Legs\" FOR actor, cast IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor ) RETURN cast.role",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"Daddy Long Legs\" ; TRAVERSAL FOR actor , cast IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor ) ; RETURN RETURN cast.role ;",
      "ecql": "MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE movie.id = { SELECT movie.id FROM movie WHERE movie.title = 'Daddy Long Legs' } RETURN r.role",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ | TableScan movie ; Filter movie.title = 'Daddy Long Legs' ; Project movie.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter movie.id = movie.id ; Return r.role ; ",
      "sqlpp": "SELECT cast.role FROM ( MATCH {class: Actor, as: actor}.outE('Cast') {as: cast}.inV('Movie') {as: movie, where: (title = 'Daddy Long Legs')} RETURN cast )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor ; Traversal OUT Cast cast ; Traversal IN Movie movie (title = 'Daddy Long Legs') ; Return cast ; Project cast.role ; ",
      "result_aql": ["Airport Extra", "Airport Extra", "Airport Extra", "Alicia Pritchard", "Ambassador Alexander Williamson", "Ambassador Alexander Williamson", "Ambassador Alexander Williamson", "Army Sergeant", "Army Sergeant", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Asst. Hotel Manager", "Asst. Hotel Manager", "Asst. Hotel Manager", "Asst. Hotel Manager", "Asst. Hotel Manager", "Asst. Hotel Manager", "Asst. Hotel Manager", "Athetic Girl Dancer", "Bellhop", "Billy - Orphan", "Billy - Orphan", "Billy - Orphan", "Billy - Orphan", "Blonde dancer", "Cab Driver", "Chauffeur", "Chauffeur", "Chauffeur", "Chauffeur", "Chauffeur", "Chauffeur", "Codene, Orphan Girl", "Codene, Orphan Girl", "Codene, Orphan Girl", "College Dean", "College Dean", "College Dean", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "Commission Member", "Commission Member", "Commission Member", "Commission Member", "Commission Member", "Commission Member", "Commission Member", "Deliveryman", "Deliveryman", "Deliveryman", "Deliveryman", "Deliveryman", "Deliveryman", "Deliveryman", "Dignified Woman", "Dignified Woman", "Dignified Woman", "Freddie Perkins", "Freddie Perkins", "Freddie Perkins", "French Farmer", "French Farmer", "French Lieutenant", "Gertrude Pendleton", "Gertrude Pendleton", "Gertrude Pendleton", "Graduation Extra", "Graduation Extra", "Graduation Extra", "Graduation Extra", "Graduation Extra", "Graduation Extra", "Griggs", "Griggs", "Guide", "Guide", "Hotel Manager", "Hotel Manager", "Hotel Manager", "Hotel Manager", "Hotel Manager", "Hotel Manager", "Hotel Manager", "Hotel Waiter", "Hotel Waiter", "Hotel Waiter", "Hotel Waiter", "Inquisitive Woman", "Inquisitive Woman", "Inquisitive Woman", "Inquisitive Woman", "Inquisitive Woman", "Jervis Pendleton", "Jervis Pendleton", "Jervis Pendleton III", "Jervis Pendleton III", "Jeweler", "Linda Pendleton", "Linda Pendleton", "Linda Pendleton", "Linda Pendleton", "Madame Sevanne", "Madame Sevanne", "Man in Elevator", "Man in Elevator", "Man in White Suit, Ballet Nightmare Sequence", "Man in White Suit, Ballet Nightmare Sequence", "Man in White Suit, Ballet Nightmare Sequence", "Man in White Suit, Ballet Nightmare Sequence", "Minister at Commencement", "Minister at Commencement", "Minister at Commencement", "Minister at Commencement", "Minister at Commencement", "Minister at Commencement", "Minister at Commencement", "Minister at Commencement", "Miss Carrington", "Miss Carrington", "Miss Pritchard", "Miss Pritchard", "Miss Pritchard", "Mr. Bronson", "Mr. Bronson", "Mr. Bronson", "Mr. Bronson", "Mr. Bronson", "Mrs. Lippett", "Mrs. Lippett", "Mrs. Lippett", "Mrs. Paula Pendleton", "Mrs. Paula Pendleton", "Mrs. Paula Pendleton", "Mrs. Semple", "Mrs. Semple", "Orphan", "Orphan", "Orphan", "Orphan", "Orphan", "Orphan", "Orphan", "Orphan", "Orphan", "Orphan", "Prom Attendee", "Sally's Beau", "Sally's Beau", "Sally's Beau", "Sally's Beau", "Sally's Beau", "Second Jeweler", "Second Jeweler", "Student in 'Sluefoot' Dance Sequence", "Student in 'Sluefoot' Dance Sequence", "Student in 'Sluefoot' Dance Sequence", "Wykoff"],
      "result_count_aql": 188,
      "result_ecql": ["Airport Extra", "Airport Extra", "Airport Extra", "Alicia Pritchard", "Ambassador Alexander Williamson", "Ambassador Alexander Williamson", "Ambassador Alexander Williamson", "Army Sergeant", "Army Sergeant", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Asst. Hotel Manager", "Asst. Hotel Manager", "Asst. Hotel Manager", "Asst. Hotel Manager", "Asst. Hotel Manager", "Asst. Hotel Manager", "Asst. Hotel Manager", "Athetic Girl Dancer", "Bellhop", "Billy - Orphan", "Billy - Orphan", "Billy - Orphan", "Billy - Orphan", "Blonde dancer", "Cab Driver", "Chauffeur", "Chauffeur", "Chauffeur", "Chauffeur", "Chauffeur", "Chauffeur", "Codene, Orphan Girl", "Codene, Orphan Girl", "Codene, Orphan Girl", "College Dean", "College Dean", "College Dean", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "Commission Member", "Commission Member", "Commission Member", "Commission Member", "Commission Member", "Commission Member", "Commission Member", "Deliveryman", "Deliveryman", "Deliveryman", "Deliveryman", "Deliveryman", "Deliveryman", "Deliveryman", "Dignified Woman", "Dignified Woman", "Dignified Woman", "Freddie Perkins", "Freddie Perkins", "Freddie Perkins", "French Farmer", "French Farmer", "French Lieutenant", "Gertrude Pendleton", "Gertrude Pendleton", "Gertrude Pendleton", "Graduation Extra", "Graduation Extra", "Graduation Extra", "Graduation Extra", "Graduation Extra", "Graduation Extra", "Griggs", "Griggs", "Guide", "Guide", "Hotel Manager", "Hotel Manager", "Hotel Manager", "Hotel Manager", "Hotel Manager", "Hotel Manager", "Hotel Manager", "Hotel Waiter", "Hotel Waiter", "Hotel Waiter", "Hotel Waiter", "Inquisitive Woman", "Inquisitive Woman", "Inquisitive Woman", "Inquisitive Woman", "Inquisitive Woman", "Jervis Pendleton", "Jervis Pendleton", "Jervis Pendleton III", "Jervis Pendleton III", "Jeweler", "Linda Pendleton", "Linda Pendleton", "Linda Pendleton", "Linda Pendleton", "Madame Sevanne", "Madame Sevanne", "Man in Elevator", "Man in Elevator", "Man in White Suit, Ballet Nightmare Sequence", "Man in White Suit, Ballet Nightmare Sequence", "Man in White Suit, Ballet Nightmare Sequence", "Man in White Suit, Ballet Nightmare Sequence", "Minister at Commencement", "Minister at Commencement", "Minister at Commencement", "Minister at Commencement", "Minister at Commencement", "Minister at Commencement", "Minister at Commencement", "Minister at Commencement", "Miss Carrington", "Miss Carrington", "Miss Pritchard", "Miss Pritchard", "Miss Pritchard", "Mr. Bronson", "Mr. Bronson", "Mr. Bronson", "Mr. Bronson", "Mr. Bronson", "Mrs. Lippett", "Mrs. Lippett", "Mrs. Lippett", "Mrs. Paula Pendleton", "Mrs. Paula Pendleton", "Mrs. Paula Pendleton", "Mrs. Semple", "Mrs. Semple", "Orphan", "Orphan", "Orphan", "Orphan", "Orphan", "Orphan", "Orphan", "Orphan", "Orphan", "Orphan", "Prom Attendee", "Sally's Beau", "Sally's Beau", "Sally's Beau", "Sally's Beau", "Sally's Beau", "Second Jeweler", "Second Jeweler", "Student in 'Sluefoot' Dance Sequence", "Student in 'Sluefoot' Dance Sequence", "Student in 'Sluefoot' Dance Sequence", "Wykoff"],
      "result_count_ecql": 188,
      "result_sqlpp": ["Airport Extra", "Airport Extra", "Airport Extra", "Alicia Pritchard", "Ambassador Alexander Williamson", "Ambassador Alexander Williamson", "Ambassador Alexander Williamson", "Army Sergeant", "Army Sergeant", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Art Gallery Patron", "Asst. Hotel Manager", "Asst. Hotel Manager", "Asst. Hotel Manager", "Asst. Hotel Manager", "Asst. Hotel Manager", "Asst. Hotel Manager", "Asst. Hotel Manager", "Athetic Girl Dancer", "Bellhop", "Billy - Orphan", "Billy - Orphan", "Billy - Orphan", "Billy - Orphan", "Blonde dancer", "Cab Driver", "Chauffeur", "Chauffeur", "Chauffeur", "Chauffeur", "Chauffeur", "Chauffeur", "Codene, Orphan Girl", "Codene, Orphan Girl", "Codene, Orphan Girl", "College Dean", "College Dean", "College Dean", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "College Girl", "Commission Member", "Commission Member", "Commission Member", "Commission Member", "Commission Member", "Commission Member", "Commission Member", "Deliveryman", "Deliveryman", "Deliveryman", "Deliveryman", "Deliveryman", "Deliveryman", "Deliveryman", "Dignified Woman", "Dignified Woman", "Dignified Woman", "Freddie Perkins", "Freddie Perkins", "Freddie Perkins", "French Farmer", "French Farmer", "French Lieutenant", "Gertrude Pendleton", "Gertrude Pendleton", "Gertrude Pendleton", "Graduation Extra", "Graduation Extra", "Graduation Extra", "Graduation Extra", "Graduation Extra", "Graduation Extra", "Griggs", "Griggs", "Guide", "Guide", "Hotel Manager", "Hotel Manager", "Hotel Manager", "Hotel Manager", "Hotel Manager", "Hotel Manager", "Hotel Manager", "Hotel Waiter", "Hotel Waiter", "Hotel Waiter", "Hotel Waiter", "Inquisitive Woman", "Inquisitive Woman", "Inquisitive Woman", "Inquisitive Woman", "Inquisitive Woman", "Jervis Pendleton", "Jervis Pendleton", "Jervis Pendleton III", "Jervis Pendleton III", "Jeweler", "Linda Pendleton", "Linda Pendleton", "Linda Pendleton", "Linda Pendleton", "Madame Sevanne", "Madame Sevanne", "Man in Elevator", "Man in Elevator", "Man in White Suit, Ballet Nightmare Sequence", "Man in White Suit, Ballet Nightmare Sequence", "Man in White Suit, Ballet Nightmare Sequence", "Man in White Suit, Ballet Nightmare Sequence", "Minister at Commencement", "Minister at Commencement", "Minister at Commencement", "Minister at Commencement", "Minister at Commencement", "Minister at Commencement", "Minister at Commencement", "Minister at Commencement", "Miss Carrington", "Miss Carrington", "Miss Pritchard", "Miss Pritchard", "Miss Pritchard", "Mr. Bronson", "Mr. Bronson", "Mr. Bronson", "Mr. Bronson", "Mr. Bronson", "Mrs. Lippett", "Mrs. Lippett", "Mrs. Lippett", "Mrs. Paula Pendleton", "Mrs. Paula Pendleton", "Mrs. Paula Pendleton", "Mrs. Semple", "Mrs. Semple", "Orphan", "Orphan", "Orphan", "Orphan", "Orphan", "Orphan", "Orphan", "Orphan", "Orphan", "Orphan", "Prom Attendee", "Sally's Beau", "Sally's Beau", "Sally's Beau", "Sally's Beau", "Sally's Beau", "Second Jeweler", "Second Jeweler", "Student in 'Sluefoot' Dance Sequence", "Student in 'Sluefoot' Dance Sequence", "Student in 'Sluefoot' Dance Sequence", "Wykoff"],
      "result_count_sqlpp": 188
    },
    {
      "template": 96,
      "question": "What was the budget of the movie Juno from 2007 ?",
      "aql": "FOR movie IN Movie FILTER movie.release_year == 2007 AND movie.title == \"Juno\" RETURN movie.budget",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.release_year == 2007 AND movie.title == \"Juno\" ; RETURN RETURN movie.budget ;",
      "ecql": "SELECT movie.budget FROM movie WHERE movie.title = 'Juno' AND movie.release_year = 2007",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'Juno' AND movie.release_year = 2007 ; Project movie.budget ; ",
      "sqlpp": "SELECT movie.budget FROM movie WHERE movie.title = 'Juno' AND movie.release_year = 2007",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'Juno' AND movie.release_year = 2007 ; Project movie.budget ; ",
      "result_aql": ["$7,500,000"],
      "result_count_aql": 1,
      "result_ecql": ["$7,500,000"],
      "result_count_ecql": 1,
      "result_sqlpp": ["$7,500,000"],
      "result_count_sqlpp": 1
    },
    {
      "template": 97,
      "question": "What is the latest movie by \" Jim Jarmusch \"",
      "aql": "FOR director IN Director FILTER director.name == \"Jim Jarmusch\" FOR movie IN 1 INBOUND director DirectedBy FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) SORT movie.release_year DESC LIMIT 1 RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; SORT _ ; LIMIT _ ; RETURN _ ; | COLLECTION FOR director IN Director ; FILTER FILTER director.name == \"Jim Jarmusch\" ; TRAVERSAL FOR movie IN 1 INBOUND director DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; SORT SORT movie.release_year DESC ; LIMIT LIMIT 1 ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (movie:Movie)-[r:DirectedBy]->(director:Director) WHERE director.id = { SELECT director.id FROM director WHERE director.name = 'Jim Jarmusch' } RETURN movie.id } ORDER BY movie.release_year DESC LIMIT 1",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ OrderBy _ Limit _ Project _ | TableScan director ; Filter director.name = 'Jim Jarmusch' ; Project director.id ; Match (movie:Movie)-[r:DirectedBy]->(director:Director) ; Filter director.id = director.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; OrderBy movie.release_year DESC ; Limit 1 ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM (MATCH {class: Movie, as: movie}.outE('DirectedBy').inV('Director') {as: director, where: (name = 'Jim Jarmusch')} RETURN movie ) ORDER BY movie.release_year DESC LIMIT 1",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ OrderBy _ Limit _ Project _ | Match Movie movie ; Traversal OUT DirectedBy ; Traversal IN Director director (name = 'Jim Jarmusch') ; Return movie ; OrderBy movie.release_year DESC ; Limit 1 ; Project movie.title ; ",
      "result_aql": ["Gimme Danger"],
      "result_count_aql": 1,
      "result_ecql": ["Gimme Danger"],
      "result_count_ecql": 1,
      "result_sqlpp": ["Gimme Danger"],
      "result_count_sqlpp": 1
    },
    {
      "template": 98,
      "question": "Find all actors born in Milan",
      "aql": "FOR actor IN Actor FILTER actor.birth_city == \"Milan\" RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.birth_city == \"Milan\" ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.birth_city = 'Milan'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_city = 'Milan' ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM actor WHERE actor.birth_city = 'Milan'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_city = 'Milan' ; Project actor.name ; ",
      "result_aql": "[]",
      "result_count_aql": 441,
      "result_ecql": "[]",
      "result_count_ecql": 441,
      "result_sqlpp": "[]",
      "result_count_sqlpp": 441
    },
    {
      "template": 99,
      "question": "Find the name and budget of the latest movie by \" Quentin Tarantino \"",
      "aql": "FOR director IN Director FILTER director.name == \"Quentin Tarantino\" FOR movie IN 1 INBOUND director DirectedBy FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) SORT movie.release_year DESC LIMIT 1 RETURN { name: movie.title, budget: movie.budget }",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; SORT _ ; LIMIT _ ; RETURN _ ; | COLLECTION FOR director IN Director ; FILTER FILTER director.name == \"Quentin Tarantino\" ; TRAVERSAL FOR movie IN 1 INBOUND director DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; SORT SORT movie.release_year DESC ; LIMIT LIMIT 1 ; RETURN RETURN { name : movie.title , budget : movie.budget } ;",
      "ecql": "SELECT movie.title, movie.budget FROM movie WHERE movie.id = { MATCH (movie:Movie)-[r:DirectedBy]->(director:Director) WHERE director.id = { SELECT director.id FROM director WHERE director.name = 'Quentin Tarantino' } RETURN movie.id } ORDER BY movie.release_year LIMIT 1",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ OrderBy _ Limit _ Project _ | TableScan director ; Filter director.name = 'Quentin Tarantino' ; Project director.id ; Match (movie:Movie)-[r:DirectedBy]->(director:Director) ; Filter director.id = director.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; OrderBy movie.release_year ASC ; Limit 1 ; Project movie.title movie.budget ; ",
      "sqlpp": "SELECT movie.title, movie.budget FROM ( MATCH {class: Movie, as: movie}.outE('DirectedBy').inV('Director') {as: director, where: (name = 'Quentin Tarantino')} RETURN movie ) ORDER BY movie.release_year DESC LIMIT 1",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ OrderBy _ Limit _ Project _ | Match Movie movie ; Traversal OUT DirectedBy ; Traversal IN Director director (name = 'Quentin Tarantino') ; Return movie ; OrderBy movie.release_year DESC ; Limit 1 ; Project movie.title movie.budget ; ",
      "result_aql": ["The Hateful Eight,$44,000,000"],
      "result_count_aql": 1,
      "result_ecql": ["Faster, Pussycat Kill Kill,None"],
      "result_count_ecql": 1,
      "result_sqlpp": ["Faster, Pussycat Kill Kill,None"],
      "result_count_sqlpp": 1
    },
    {
      "template": 100,
      "question": "How many movies did \" Quentin Tarantino \" direct after 2010 ?",
      "aql": "FOR director IN Director FILTER director.name == \"Quentin Tarantino\" FOR movie IN 1 INBOUND director DirectedBy FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FILTER movie.release_year > 2010 COLLECT WITH COUNT INTO cnt RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR director IN Director ; FILTER FILTER director.name == \"Quentin Tarantino\" ; TRAVERSAL FOR movie IN 1 INBOUND director DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; FILTER FILTER movie.release_year > 2010 ; AGGREGATE COLLECT WITH COUNT INTO cnt ; RETURN RETURN cnt ;",
      "ecql": "MATCH (movie:Movie)-[r:DirectedBy]->(director:Director) WHERE director.id = { SELECT director.id FROM director WHERE director.name = 'Quentin Tarantino' } AND movie.id = { SELECT movie.id FROM movie WHERE movie.release_year > 2010 } WITH COUNT (*) AS cnt RETURN cnt",
      "ecql_mir": "TableScan _ Filter _ Project _ TableScan _ Filter _ Project _ Match _ Filter _ With _ Return _ | TableScan director ; Filter director.name = 'Quentin Tarantino' ; Project director.id ; TableScan movie ; Filter movie.release_year > 2010 ; Project movie.id ; Match (movie:Movie)-[r:DirectedBy]->(director:Director) ; Filter director.id = director.id AND movie.id = movie.id ; With COUNT ( * ) AS cnt ; Return cnt ; ",
      "sqlpp": "SELECT COUNT(*) AS cnt FROM ( MATCH {class: Movie, as: movie, where: (release_year > 2010)}.outE('DirectedBy').inV('Director') {as: director, where: (name = 'Quentin Tarantino')} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Movie movie (release_year > 2010) ; Traversal OUT DirectedBy ; Traversal IN Director director (name = 'Quentin Tarantino') ; Return movie ; Project COUNT ( * ) AS cnt ; ",
      "result_aql": ["2"],
      "result_count_aql": 1,
      "result_ecql": ["2"],
      "result_count_ecql": 1,
      "result_sqlpp": ["2"],
      "result_count_sqlpp": 1
    },
    {
      "template": 101,
      "question": "What year was \" Ellen Page \" born ?",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Ellen Page\" RETURN actor.birth_year",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Ellen Page\" ; RETURN RETURN actor.birth_year ;",
      "ecql": "SELECT actor.birth_year FROM actor WHERE actor.name = 'Ellen Page'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Ellen Page' ; Project actor.birth_year ; ",
      "sqlpp": "SELECT actor.birth_year FROM actor WHERE actor.name = 'Ellen Page'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Ellen Page' ; Project actor.birth_year ; ",
      "result_aql": ["1987"],
      "result_count_aql": 1,
      "result_ecql": ["1987"],
      "result_count_ecql": 1,
      "result_sqlpp": ["1987"],
      "result_count_sqlpp": 1
    },
    {
      "template": 102,
      "question": "How many movies did \" Matt Damon \" direct ?",
      "aql": "FOR director IN Director FILTER director.name == \"Matt Damon\" FOR movie IN 1 INBOUND director DirectedBy FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) COLLECT WITH COUNT INTO cnt RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR director IN Director ; FILTER FILTER director.name == \"Matt Damon\" ; TRAVERSAL FOR movie IN 1 INBOUND director DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; AGGREGATE COLLECT WITH COUNT INTO cnt ; RETURN RETURN cnt ;",
      "ecql": "MATCH (movie:Movie)-[r:DirectedBy]->(director:Director) WHERE director.id = { SELECT director.id FROM director WHERE director.name = 'Matt Damon' } WITH COUNT (*) AS cnt RETURN cnt",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ With _ Return _ | TableScan director ; Filter director.name = 'Matt Damon' ; Project director.id ; Match (movie:Movie)-[r:DirectedBy]->(director:Director) ; Filter director.id = director.id ; With COUNT ( * ) AS cnt ; Return cnt ; ",
      "sqlpp": "SELECT COUNT(*) AS cnt FROM ( MATCH {class: Movie, as: movie}.outE('DirectedBy').inV('Director') {as: director, where: (name = 'Matt Damon')} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Movie movie ; Traversal OUT DirectedBy ; Traversal IN Director director (name = 'Matt Damon') ; Return movie ; Project COUNT ( * ) AS cnt ; ",
      "result_aql": ["0"],
      "result_count_aql": 1,
      "result_ecql": ["0"],
      "result_count_ecql": 1,
      "result_sqlpp": ["0"],
      "result_count_sqlpp": 1
    },
    {
      "template": 103,
      "question": "Find all movies featuring \" Kevin Spacey \"",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Kevin Spacey\" FOR movie IN 1 OUTBOUND actor Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Kevin Spacey\" ; TRAVERSAL FOR movie IN 1 OUTBOUND actor Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE actor.id = { SELECT actor.id FROM actor WHERE actor.name = 'Kevin Spacey' } RETURN movie.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Kevin Spacey' ; Project actor.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter actor.id = actor.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM ( MATCH {class: Actor, as: actor, where: (name = 'Kevin Spacey')}.outE('Cast').inV('Movie') {as: movie} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor (name = 'Kevin Spacey') ; Traversal OUT Cast ; Traversal IN Movie movie ; Return movie ; Project movie.title ; ",
      "result_aql": ["16th Annual Critics' Choice Movie Awards", "20th Annual Screen Actors Guild Awards", "20th Annual Screen Actors Guild Awards", "21", "22nd Annual Screen Actors Guild Awards", "2nd Annual Directors Guild of Great Britain DGGB Awards", "2nd Annual Screen Actors Guild Awards", "71st Golden Globe Awards", "72nd Golden Globe Awards", "A Time to Kill", "American Beauty", "Austin Powers in Goldmember", "Being Mean Is So Much Fun", "Breakthrough Prize 2013", "Comedy Central Roast of Denis Leary", "Consenting Adults", "David Blaine: Frozen in Time", "Envelope", "Father of Invention", "Freedom2speak v2.0", "Hackers Wanted", "Heartburn", "Horrible Bosses", "Horrible Bosses 2", "K-PAX", "L.A. Confidential: Off the Record...", "Long Day's Journey Into Night", "My Least Favorite Career", "NOW: In the Wings on a World Stage", "Nine Lives", "Outbreak", "Pay It Forward", "Rebel in the Rye", "Rocket Gibraltar", "SNL: 25 Years of Music", "Saturday Night Live: The Best of Chris Kattan", "See No Evil, Hear No Evil", "Smirit of a Denture", "Superman Returns", "Swimming with Sharks", "Telstar: The Joe Meek Story", "The 21st Annual Screen Actors Guild Awards", "The 45th Annual Tony Awards", "The 50th British Academy Film Awards", "The 53rd Annual Golden Globe Awards", "The 53rd Annual Tony Awards", "The 55th Annual Golden Globe Awards", "The 57th Annual Golden Globe Awards", "The 58th Annual Golden Globe Awards", "The 59th Annual Golden Globe Awards", "The 5th Annual GQ Men of the Year Awards", "The 60th Primetime Emmy Awards", "The 61st Annual Tony Awards", "The 62nd Annual Golden Globe Awards", "The 65th Primetime Emmy Awards", "The 66th Primetime Emmy Awards", "The 67th Primetime Emmy Awards", "The 68th Annual Academy Awards", "The 68th Annual Golden Globe Awards", "The 69th Annual Academy Awards", "The 72nd Annual Academy Awards", "The 73rd Annual Academy Awards", "The 74th Annual Academy Awards", "The 75th Annual Academy Awards", "The 83rd Annual Academy Awards", "The Applicant", "The Curse of Superman", "The EE British Academy Film Awards", "The European Film Awards", "The Interrogation of Leo and Lisa", "The Negotiator", "The Orange British Academy Film Awards", "The Oscars", "The Shipping News", "The United States of Leland", "The Variety Club Showbiz Awards 2009", "The Ventriloquist", "Working Girl"],
      "result_count_aql": 77,
      "result_ecql": ["16th Annual Critics' Choice Movie Awards", "20th Annual Screen Actors Guild Awards", "21", "22nd Annual Screen Actors Guild Awards", "2nd Annual Directors Guild of Great Britain DGGB Awards", "2nd Annual Screen Actors Guild Awards", "71st Golden Globe Awards", "72nd Golden Globe Awards", "A Time to Kill", "American Beauty", "Austin Powers in Goldmember", "Being Mean Is So Much Fun", "Breakthrough Prize 2013", "Comedy Central Roast of Denis Leary", "Consenting Adults", "David Blaine: Frozen in Time", "Envelope", "Father of Invention", "Freedom2speak v2.0", "Hackers Wanted", "Heartburn", "Horrible Bosses", "Horrible Bosses 2", "K-PAX", "L.A. Confidential: Off the Record...", "Long Day's Journey Into Night", "My Least Favorite Career", "NOW: In the Wings on a World Stage", "Nine Lives", "Outbreak", "Pay It Forward", "Rebel in the Rye", "Rocket Gibraltar", "SNL: 25 Years of Music", "Saturday Night Live: The Best of Chris Kattan", "See No Evil, Hear No Evil", "Smirit of a Denture", "Superman Returns", "Swimming with Sharks", "Telstar: The Joe Meek Story", "The 21st Annual Screen Actors Guild Awards", "The 45th Annual Tony Awards", "The 50th British Academy Film Awards", "The 53rd Annual Golden Globe Awards", "The 53rd Annual Tony Awards", "The 55th Annual Golden Globe Awards", "The 57th Annual Golden Globe Awards", "The 58th Annual Golden Globe Awards", "The 59th Annual Golden Globe Awards", "The 5th Annual GQ Men of the Year Awards", "The 60th Primetime Emmy Awards", "The 61st Annual Tony Awards", "The 62nd Annual Golden Globe Awards", "The 65th Primetime Emmy Awards", "The 66th Primetime Emmy Awards", "The 67th Primetime Emmy Awards", "The 68th Annual Academy Awards", "The 68th Annual Golden Globe Awards", "The 69th Annual Academy Awards", "The 72nd Annual Academy Awards", "The 73rd Annual Academy Awards", "The 74th Annual Academy Awards", "The 75th Annual Academy Awards", "The 83rd Annual Academy Awards", "The Applicant", "The Curse of Superman", "The EE British Academy Film Awards", "The European Film Awards", "The Interrogation of Leo and Lisa", "The Negotiator", "The Orange British Academy Film Awards", "The Oscars", "The Shipping News", "The United States of Leland", "The Variety Club Showbiz Awards 2009", "The Ventriloquist", "Working Girl"],
      "result_count_ecql": 77,
      "result_sqlpp": ["16th Annual Critics' Choice Movie Awards", "20th Annual Screen Actors Guild Awards", "21", "22nd Annual Screen Actors Guild Awards", "2nd Annual Directors Guild of Great Britain DGGB Awards", "2nd Annual Screen Actors Guild Awards", "71st Golden Globe Awards", "72nd Golden Globe Awards", "A Time to Kill", "American Beauty", "Austin Powers in Goldmember", "Being Mean Is So Much Fun", "Breakthrough Prize 2013", "Comedy Central Roast of Denis Leary", "Consenting Adults", "David Blaine: Frozen in Time", "Envelope", "Father of Invention", "Freedom2speak v2.0", "Hackers Wanted", "Heartburn", "Horrible Bosses", "Horrible Bosses 2", "K-PAX", "L.A. Confidential: Off the Record...", "Long Day's Journey Into Night", "My Least Favorite Career", "NOW: In the Wings on a World Stage", "Nine Lives", "Outbreak", "Pay It Forward", "Rebel in the Rye", "Rocket Gibraltar", "SNL: 25 Years of Music", "Saturday Night Live: The Best of Chris Kattan", "See No Evil, Hear No Evil", "Smirit of a Denture", "Superman Returns", "Swimming with Sharks", "Telstar: The Joe Meek Story", "The 21st Annual Screen Actors Guild Awards", "The 45th Annual Tony Awards", "The 50th British Academy Film Awards", "The 53rd Annual Golden Globe Awards", "The 53rd Annual Tony Awards", "The 55th Annual Golden Globe Awards", "The 57th Annual Golden Globe Awards", "The 58th Annual Golden Globe Awards", "The 59th Annual Golden Globe Awards", "The 5th Annual GQ Men of the Year Awards", "The 60th Primetime Emmy Awards", "The 61st Annual Tony Awards", "The 62nd Annual Golden Globe Awards", "The 65th Primetime Emmy Awards", "The 66th Primetime Emmy Awards", "The 67th Primetime Emmy Awards", "The 68th Annual Academy Awards", "The 68th Annual Golden Globe Awards", "The 69th Annual Academy Awards", "The 72nd Annual Academy Awards", "The 73rd Annual Academy Awards", "The 74th Annual Academy Awards", "The 75th Annual Academy Awards", "The 83rd Annual Academy Awards", "The Applicant", "The Curse of Superman", "The EE British Academy Film Awards", "The European Film Awards", "The Interrogation of Leo and Lisa", "The Negotiator", "The Orange British Academy Film Awards", "The Oscars", "The Shipping News", "The United States of Leland", "The Variety Club Showbiz Awards 2009", "The Ventriloquist", "Working Girl"],
      "result_count_sqlpp": 77
    },
    {
      "template": 104,
      "question": "Find the latest movie which \" Gabriele Ferzetti \" acted in",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Gabriele Ferzetti\" FOR movie IN 1 OUTBOUND actor Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) SORT movie.release_year DESC LIMIT 1 RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; SORT _ ; LIMIT _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Gabriele Ferzetti\" ; TRAVERSAL FOR movie IN 1 OUTBOUND actor Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; SORT SORT movie.release_year DESC ; LIMIT LIMIT 1 ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE actor.id = { SELECT actor.id FROM actor WHERE actor.name = 'Gabriele Ferzetti' } RETURN movie.id } ORDER BY movie.release_year DESC LIMIT 1",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ OrderBy _ Limit _ Project _ | TableScan actor ; Filter actor.name = 'Gabriele Ferzetti' ; Project actor.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter actor.id = actor.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; OrderBy movie.release_year DESC ; Limit 1 ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM ( MATCH {class: Actor, as: actor, where: (name = 'Gabriele Ferzetti')}.outE('Cast').inV('Movie') {as: movie} RETURN movie ) ORDER BY movie.release_year DESC LIMIT 1",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ OrderBy _ Limit _ Project _ | Match Actor actor (name = 'Gabriele Ferzetti') ; Traversal OUT Cast ; Traversal IN Movie movie ; Return movie ; OrderBy movie.release_year DESC ; Limit 1 ; Project movie.title ; ",
      "result_aql": ["Io sono l'amore"],
      "result_count_aql": 1,
      "result_ecql": ["Io sono l'amore"],
      "result_count_ecql": 1,
      "result_sqlpp": ["Io sono l'amore"],
      "result_count_sqlpp": 1
    },
    {
      "template": 105,
      "question": "Find all actors from Italy born after 1980",
      "aql": "FOR actor IN Actor FILTER actor.birth_year > 1980 AND actor.nationality == \"Italy\" RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.birth_year > 1980 AND actor.nationality == \"Italy\" ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.birth_year > 1980 AND actor.nationality = 'Italy'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_year > 1980 AND actor.nationality = 'Italy' ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM actor WHERE actor.birth_year > 1980 AND actor.nationality = 'Italy'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_year > 1980 AND actor.nationality = 'Italy' ; Project actor.name ; ",
      "result_aql": "[]",
      "result_count_aql": 330,
      "result_ecql": "[]",
      "result_count_ecql": 330,
      "result_sqlpp": "[]",
      "result_count_sqlpp": 330
    },
    {
      "template": 106,
      "question": "Find all movies directed by \" Woody Allen \" and featuring \" Scarlett Johansson \"",
      "aql": "FOR director IN Director FILTER director.name == \"Woody Allen\" FOR movie IN 1 INBOUND director DirectedBy FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FOR actor IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor ) FILTER actor.name == \"Scarlett Johansson\" RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR director IN Director ; FILTER FILTER director.name == \"Woody Allen\" ; TRAVERSAL FOR movie IN 1 INBOUND director DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; TRAVERSAL FOR actor IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor ) ; FILTER FILTER actor.name == \"Scarlett Johansson\" ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (actor:Actor)-[:Cast]->(movie:Movie), (movie:Movie)-[:DirectedBy]->(director:Director) WHERE actor.id = { SELECT actor.id FROM actor WHERE actor.name = 'Scarlett Johansson' } AND director.id = { SELECT director.id FROM director WHERE director.name = 'Woody Allen' } RETURN movie.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Scarlett Johansson' ; Project actor.id ; TableScan director ; Filter director.name = 'Woody Allen' ; Project director.id ; Match (actor:Actor)-[:Cast]->(movie:Movie), (movie:Movie)-[:DirectedBy]->(director:Director) ; Filter actor.id = actor.id AND director.id = director.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM ( MATCH {class: Actor, as: actor, where: (name = 'Scarlett Johansson')}.outE('Cast').inV('Movie') {as: movie}.outE('DirectedBy').inV('Director') {as: director, where: (name = 'Woody Allen')} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor (name = 'Scarlett Johansson') ; Traversal OUT Cast ; Traversal IN Movie movie ; Traversal OUT DirectedBy ; Traversal IN Director director (name = 'Woody Allen') ; Return movie ; Project movie.title ; ",
      "result_aql": ["Match Point", "Scoop"],
      "result_count_aql": 2,
      "result_ecql": ["Match Point", "Scoop"],
      "result_count_ecql": 2,
      "result_sqlpp": ["Match Point", "Scoop"],
      "result_count_sqlpp": 2
    },
    {
      "template": 107,
      "question": "What is the nationality of the actor \" Christoph Waltz \" ?",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Christoph Waltz\" RETURN actor.nationality",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Christoph Waltz\" ; RETURN RETURN actor.nationality ;",
      "ecql": "SELECT actor.nationality FROM actor WHERE actor.name = 'Christoph Waltz'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Christoph Waltz' ; Project actor.nationality ; ",
      "sqlpp": "SELECT actor.nationality FROM actor WHERE actor.name = 'Christoph Waltz'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Christoph Waltz' ; Project actor.nationality ; ",
      "result_aql": ["Austria"],
      "result_count_aql": 1,
      "result_ecql": ["Austria"],
      "result_count_ecql": 1,
      "result_sqlpp": ["Austria"],
      "result_count_sqlpp": 1
    },
    {
      "template": 108,
      "question": "Find all actors from Austin born after 1980",
      "aql": "FOR actor IN Actor FILTER actor.birth_city == \"Austin\" AND actor.birth_year > 1980 RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.birth_city == \"Austin\" AND actor.birth_year > 1980 ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.birth_city = 'Austin' AND actor.birth_year > 1980",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_city = 'Austin' AND actor.birth_year > 1980 ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM actor WHERE actor.birth_city = 'Austin' AND actor.birth_year > 1980",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_city = 'Austin' AND actor.birth_year > 1980 ; Project actor.name ; ",
      "result_aql": ["Aaron Burns", "Adam Alvarez", "Alexa Doggett", "Allie Carico", "Amanda Kay Goggin", "Amber Heard", "Andrew Washington", "Angus T. Jones", "Annie Bond", "Aria Whitney", "Arianne Martin", "Ashlyn Molloy", "Aurora Marie Chase", "Azure D. Osborne-Lee", "Bobby Gaston", "Brian Bogart", "Caitlin Wehrle", "Chris Gouker", "Christina Murphy", "Christopher Hurt", "Ciara", "Cole Fowler", "Crystal Crawford", "D.J. Castillo", "Dakota Johnson", "Dannie Helen Loraine Knowles", "Dominik Chilleri", "Elena Hurst", "Elise Ivy", "Elizabeth Gwynne Wilson", "Ellar Coltrane", "Emma Nicolas", "Evan Stern", "Evelyn Courtney", "Gabriel Luna", "Glen Powell", "Grace Phipps", "Hannah Nicolas", "Herman Whitney III", "Jack Kyser", "James Leonardo Mayberry", "James Merryman", "Joe Vargas", "John Chilleri", "John Hawthorne Smith", "Jonny Riojas", "Justin Mentell", "Kacey Jordan", "Kanin Howell", "Karina Clark", "Kate Krause", "Katie Fountain", "Katy Dunlap", "Kelsey Higgs", "Kimberly Barnett", "Kristen Noelle Devine", "Krystal Morton", "Lauren Eichner", "Lexi Moeller", "Lindsey Robertson", "Luke Broadlick", "Maia Petee", "Marshall Allman", "Max Kruemcke", "Megan Devine", "Micaela Phillips", "Michael Ted Ferris", "Morgan Farris", "Natalie Nouri", "Nick Krause", "Nieko Mann", "Omid Kalantari", "Paul Galvan", "Pedro Campos", "Racer Rodriguez", "Rachel Beth Reznick", "Rebel Rodriguez", "Ricky Lee", "Robin Prough", "Rocket Rodriguez", "Rowdy Brown", "Sarah Hagan", "Sarah Jarosz", "Sarah Nouri", "Sarah Talbot", "Seth Lee", "Sonny Castillo", "Spencer Greenwood", "Stacy Lynn Austin", "Susanna Boney", "Thea Marie", "Trev", "Trevor Doyle Nelson", "Trillium", "Vincent James Prendergast", "Wallis Currie-Wood", "Will Martin", "Zach Freeman", "Zoe Graham", "Zoe Keller"],
      "result_count_aql": 100,
      "result_ecql": ["Aaron Burns", "Adam Alvarez", "Alexa Doggett", "Allie Carico", "Amanda Kay Goggin", "Amber Heard", "Andrew Washington", "Angus T. Jones", "Annie Bond", "Aria Whitney", "Arianne Martin", "Ashlyn Molloy", "Aurora Marie Chase", "Azure D. Osborne-Lee", "Bobby Gaston", "Brian Bogart", "Caitlin Wehrle", "Chris Gouker", "Christina Murphy", "Christopher Hurt", "Ciara", "Cole Fowler", "Crystal Crawford", "D.J. Castillo", "Dakota Johnson", "Dannie Helen Loraine Knowles", "Dominik Chilleri", "Elena Hurst", "Elise Ivy", "Elizabeth Gwynne Wilson", "Ellar Coltrane", "Emma Nicolas", "Evan Stern", "Evelyn Courtney", "Gabriel Luna", "Glen Powell", "Grace Phipps", "Hannah Nicolas", "Herman Whitney III", "Jack Kyser", "James Leonardo Mayberry", "James Merryman", "Joe Vargas", "John Chilleri", "John Hawthorne Smith", "Jonny Riojas", "Justin Mentell", "Kacey Jordan", "Kanin Howell", "Karina Clark", "Kate Krause", "Katie Fountain", "Katy Dunlap", "Kelsey Higgs", "Kimberly Barnett", "Kristen Noelle Devine", "Krystal Morton", "Lauren Eichner", "Lexi Moeller", "Lindsey Robertson", "Luke Broadlick", "Maia Petee", "Marshall Allman", "Max Kruemcke", "Megan Devine", "Micaela Phillips", "Michael Ted Ferris", "Morgan Farris", "Natalie Nouri", "Nick Krause", "Nieko Mann", "Omid Kalantari", "Paul Galvan", "Pedro Campos", "Racer Rodriguez", "Rachel Beth Reznick", "Rebel Rodriguez", "Ricky Lee", "Robin Prough", "Rocket Rodriguez", "Rowdy Brown", "Sarah Hagan", "Sarah Jarosz", "Sarah Nouri", "Sarah Talbot", "Seth Lee", "Sonny Castillo", "Spencer Greenwood", "Stacy Lynn Austin", "Susanna Boney", "Thea Marie", "Trev", "Trevor Doyle Nelson", "Trillium", "Vincent James Prendergast", "Wallis Currie-Wood", "Will Martin", "Zach Freeman", "Zoe Graham", "Zoe Keller"],
      "result_count_ecql": 100,
      "result_sqlpp": ["Aaron Burns", "Adam Alvarez", "Alexa Doggett", "Allie Carico", "Amanda Kay Goggin", "Amber Heard", "Andrew Washington", "Angus T. Jones", "Annie Bond", "Aria Whitney", "Arianne Martin", "Ashlyn Molloy", "Aurora Marie Chase", "Azure D. Osborne-Lee", "Bobby Gaston", "Brian Bogart", "Caitlin Wehrle", "Chris Gouker", "Christina Murphy", "Christopher Hurt", "Ciara", "Cole Fowler", "Crystal Crawford", "D.J. Castillo", "Dakota Johnson", "Dannie Helen Loraine Knowles", "Dominik Chilleri", "Elena Hurst", "Elise Ivy", "Elizabeth Gwynne Wilson", "Ellar Coltrane", "Emma Nicolas", "Evan Stern", "Evelyn Courtney", "Gabriel Luna", "Glen Powell", "Grace Phipps", "Hannah Nicolas", "Herman Whitney III", "Jack Kyser", "James Leonardo Mayberry", "James Merryman", "Joe Vargas", "John Chilleri", "John Hawthorne Smith", "Jonny Riojas", "Justin Mentell", "Kacey Jordan", "Kanin Howell", "Karina Clark", "Kate Krause", "Katie Fountain", "Katy Dunlap", "Kelsey Higgs", "Kimberly Barnett", "Kristen Noelle Devine", "Krystal Morton", "Lauren Eichner", "Lexi Moeller", "Lindsey Robertson", "Luke Broadlick", "Maia Petee", "Marshall Allman", "Max Kruemcke", "Megan Devine", "Micaela Phillips", "Michael Ted Ferris", "Morgan Farris", "Natalie Nouri", "Nick Krause", "Nieko Mann", "Omid Kalantari", "Paul Galvan", "Pedro Campos", "Racer Rodriguez", "Rachel Beth Reznick", "Rebel Rodriguez", "Ricky Lee", "Robin Prough", "Rocket Rodriguez", "Rowdy Brown", "Sarah Hagan", "Sarah Jarosz", "Sarah Nouri", "Sarah Talbot", "Seth Lee", "Sonny Castillo", "Spencer Greenwood", "Stacy Lynn Austin", "Susanna Boney", "Thea Marie", "Trev", "Trevor Doyle Nelson", "Trillium", "Vincent James Prendergast", "Wallis Currie-Wood", "Will Martin", "Zach Freeman", "Zoe Graham", "Zoe Keller"],
      "result_count_sqlpp": 100
    },
    {
      "template": 109,
      "question": "Find all movies featuring \" Benedict Cumberbatch \" and \" Keira Knightley \"",
      "aql": "FOR actor_1 IN Actor FILTER actor_1.name == \"Benedict Cumberbatch\" FOR movie IN 1 OUTBOUND actor_1 Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FOR actor_2 IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor_2 ) FILTER actor_2.name == \"Keira Knightley\" RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor_1 IN Actor ; FILTER FILTER actor_1.name == \"Benedict Cumberbatch\" ; TRAVERSAL FOR movie IN 1 OUTBOUND actor_1 Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; TRAVERSAL FOR actor_2 IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor_2 ) ; FILTER FILTER actor_2.name == \"Keira Knightley\" ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (actor_1:Actor)-[:Cast]->(movie:Movie), (actor_2:Actor)-[:Cast]->(movie:Movie) WHERE actor_1.id = { SELECT actor.id FROM actor WHERE actor.name = 'Benedict Cumberbatch' } AND actor_2.id = { SELECT actor.id FROM actor WHERE actor.name = 'Keira Knightley' } RETURN movie.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Benedict Cumberbatch' ; Project actor.id ; TableScan actor ; Filter actor.name = 'Keira Knightley' ; Project actor.id ; Match (actor_1:Actor)-[:Cast]->(movie:Movie), (actor_2:Actor)-[:Cast]->(movie:Movie) ; Filter actor_1.id = actor_1.id AND actor_2.id = actor_2.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM ( MATCH {class: Actor, where: (name = 'Benedict Cumberbatch')}.outE('Cast').inV('Movie') {as: movie}.inE('Cast').outV('Actor') {where: (name = 'Keira Knightley')} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Traversal _ Traversal _ Return _ Project _ | Match Actor (name = 'Benedict Cumberbatch') ; Traversal OUT Cast ; Traversal IN Movie movie ; Traversal IN Cast ; Traversal OUT Actor (name = 'Keira Knightley') ; Return movie ; Project movie.title ; ",
      "result_aql": ["72nd Golden Globe Awards", "72nd Golden Globe Awards", "The 21st Annual Screen Actors Guild Awards", "The Oscars"],
      "result_count_aql": 3,
      "result_ecql": ["72nd Golden Globe Awards", "The 21st Annual Screen Actors Guild Awards", "The Oscars"],
      "result_count_ecql": 3,
      "result_sqlpp": ["72nd Golden Globe Awards", "The 21st Annual Screen Actors Guild Awards", "The Oscars"],
      "result_count_sqlpp": 3
    },
    {
      "template": 110,
      "question": "Find all actors born in \" Los Angeles \"",
      "aql": "FOR actor IN Actor FILTER actor.birth_city == \"Los Angeles\" RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.birth_city == \"Los Angeles\" ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.birth_city = 'Los Angeles'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_city = 'Los Angeles' ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM actor WHERE actor.birth_city = 'Los Angeles'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_city = 'Los Angeles' ; Project actor.name ; ",
      "result_aql": "[]",
      "result_count_aql": 5131,
      "result_ecql": "[]",
      "result_count_ecql": 5131,
      "result_sqlpp": "[]",
      "result_count_sqlpp": 5131
    },
    {
      "template": 111,
      "question": "In what year was \" Kevin Spacey \" born ?",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Kevin Spacey\" RETURN actor.birth_year",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Kevin Spacey\" ; RETURN RETURN actor.birth_year ;",
      "ecql": "SELECT actor.birth_year FROM actor WHERE actor.name = 'Kevin Spacey'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Kevin Spacey' ; Project actor.birth_year ; ",
      "sqlpp": "SELECT actor.birth_year FROM actor WHERE actor.name = 'Kevin Spacey'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Kevin Spacey' ; Project actor.birth_year ; ",
      "result_aql": ["1959"],
      "result_count_aql": 1,
      "result_ecql": ["1959"],
      "result_count_ecql": 1,
      "result_sqlpp": ["1959"],
      "result_count_sqlpp": 1
    },
    {
      "template": 112,
      "question": "How many movies did \" Quentin Tarantino \" direct after 2002 and before 2010 ?",
      "aql": "FOR director IN Director FILTER director.name == \"Quentin Tarantino\" FOR movie IN 1 INBOUND director DirectedBy FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FILTER movie.release_year < 2010 AND movie.release_year > 2002 COLLECT WITH COUNT INTO cnt RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR director IN Director ; FILTER FILTER director.name == \"Quentin Tarantino\" ; TRAVERSAL FOR movie IN 1 INBOUND director DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; FILTER FILTER movie.release_year < 2010 AND movie.release_year > 2002 ; AGGREGATE COLLECT WITH COUNT INTO cnt ; RETURN RETURN cnt ;",
      "ecql": "SELECT COUNT (*) AS cnt FROM movie WHERE movie.id = { MATCH (movie:Movie)-[r:DirectedBy]->(director:Director) WHERE director.id = { SELECT director.id FROM director WHERE director.name = 'Quentin Tarantino' } RETURN movie.id } AND movie.release_year < 2010 AND movie.release_year > 2002",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan director ; Filter director.name = 'Quentin Tarantino' ; Project director.id ; Match (movie:Movie)-[r:DirectedBy]->(director:Director) ; Filter director.id = director.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id AND movie.release_year < 2010 AND movie.release_year > 2002 ; Project COUNT ( * ) AS cnt ; ",
      "sqlpp": "SELECT COUNT(*) AS cnt FROM ( MATCH {class: Movie, as: movie, where: (movie.release_year < 2010 AND movie.release_year > 2002)}.outE('DirectedBy').inV('Director') {as: director, where: (name = 'Quentin Tarantino')} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Movie movie (movie.release_year < 2010 AND movie.release_year > 2002) ; Traversal OUT DirectedBy ; Traversal IN Director director (name = 'Quentin Tarantino') ; Return movie ; Project COUNT ( * ) AS cnt ; ",
      "result_aql": ["6"],
      "result_count_aql": 1,
      "result_ecql": ["6"],
      "result_count_ecql": 1,
      "result_sqlpp": ["6"],
      "result_count_sqlpp": 1
    },
    {
      "template": 113,
      "question": "What are all the movies directed by \" Quentin Tarantino \" featuring \" Christoph Waltz \" ?",
      "aql": "FOR director IN Director FILTER director.name == \"Quentin Tarantino\" FOR movie IN 1 INBOUND director DirectedBy FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FOR actor IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor ) FILTER actor.name == \"Christoph Waltz\" RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR director IN Director ; FILTER FILTER director.name == \"Quentin Tarantino\" ; TRAVERSAL FOR movie IN 1 INBOUND director DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; TRAVERSAL FOR actor IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor ) ; FILTER FILTER actor.name == \"Christoph Waltz\" ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (actor:Actor)-[:Cast]->(movie:Movie), (movie:Movie)-[:DirectedBy]->(director:Director) WHERE actor.id = { SELECT actor.id FROM actor WHERE actor.name = 'Christoph Waltz' } AND director.id = { SELECT director.id FROM director WHERE director.name = 'Quentin Tarantino' } RETURN movie.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Christoph Waltz' ; Project actor.id ; TableScan director ; Filter director.name = 'Quentin Tarantino' ; Project director.id ; Match (actor:Actor)-[:Cast]->(movie:Movie), (movie:Movie)-[:DirectedBy]->(director:Director) ; Filter actor.id = actor.id AND director.id = director.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM ( MATCH {class: Actor, as: actor, where: (name = 'Christoph Waltz')}.outE('Cast').inV('Movie') {as: movie}.outE('DirectedBy').inV('Director') {as: director, where: (name = 'Quentin Tarantino')} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor (name = 'Christoph Waltz') ; Traversal OUT Cast ; Traversal IN Movie movie ; Traversal OUT DirectedBy ; Traversal IN Director director (name = 'Quentin Tarantino') ; Return movie ; Project movie.title ; ",
      "result_aql": ["Django Unchained", "Inglourious Basterds"],
      "result_count_aql": 2,
      "result_ecql": ["Django Unchained", "Inglourious Basterds"],
      "result_count_ecql": 2,
      "result_sqlpp": ["Django Unchained", "Inglourious Basterds"],
      "result_count_sqlpp": 2
    },
    {
      "template": 114,
      "question": "List all male directors who worked with the \" NBC Universal \" company",
      "aql": "FOR company IN Company FILTER company.name == \"NBC Universal\" FOR movie IN 1 OUTBOUND company Copyright FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FOR director IN 1 OUTBOUND movie DirectedBy FILTER IS_SAME_COLLECTION ( \"Director\", director ) FILTER director.gender == \"male\" RETURN director.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR company IN Company ; FILTER FILTER company.name == \"NBC Universal\" ; TRAVERSAL FOR movie IN 1 OUTBOUND company Copyright ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; TRAVERSAL FOR director IN 1 OUTBOUND movie DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Director\" , director ) ; FILTER FILTER director.gender == \"male\" ; RETURN RETURN director.name ;",
      "ecql": "SELECT director.name FROM director WHERE director.gender = 'male' AND director.id = { MATCH (movie:Movie)-[:DirectedBy]->(director:Director), (company:Company)-[:Copyright]->(movie:Movie) WHERE company.id = { SELECT company.id FROM company WHERE company.name = 'NBC Universal' } RETURN director.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan company ; Filter company.name = 'NBC Universal' ; Project company.id ; Match (movie:Movie)-[:DirectedBy]->(director:Director), (company:Company)-[:Copyright]->(movie:Movie) ; Filter company.id = company.id ; Return director.id ; TableScan director ; Filter director.gender = 'male' AND director.id = director.id ; Project director.name ; ",
      "sqlpp": "SELECT director.name FROM ( MATCH {class: Company, as: company, where: (name = 'NBC Universal')}.outE('Copyright') {as: r}.inV('Movie') {as: movie}.outE('DirectedBy') {as: r}.inV('Director') {as: director, where: (gender = 'male')} RETURN director )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Traversal _ Traversal _ Return _ Project _ | Match Company company (name = 'NBC Universal') ; Traversal OUT Copyright r ; Traversal IN Movie movie ; Traversal OUT DirectedBy r ; Traversal IN Director director (gender = 'male') ; Return director ; Project director.name ; ",
      "result_aql": ["Benjamin Eicher", "Benjo", "David Hare", "David Hare", "David Hare", "Logan Leistikow", "Logan Leistikow", "Logan Leistikow", "Sir David Hare", "Sir David Hare", "Sir David Hare", "Timo Joh. Mayer"],
      "result_count_aql": 6,
      "result_ecql": ["Benjamin Eicher", "Benjo", "David Hare", "Logan Leistikow", "Sir David Hare", "Timo Joh. Mayer"],
      "result_count_ecql": 6,
      "result_sqlpp": ["Benjamin Eicher", "Benjo", "David Hare", "Logan Leistikow", "Sir David Hare", "Timo Joh. Mayer"],
      "result_count_sqlpp": 6
    },
    {
      "template": 115,
      "question": "What company produced the series Scandal ?",
      "aql": "FOR tv_series IN TvSeries FILTER tv_series.title == \"Scandal\" FOR company IN 1 INBOUND tv_series Copyright FILTER IS_SAME_COLLECTION ( \"Company\", company ) RETURN company.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR tv_series IN TvSeries ; FILTER FILTER tv_series.title == \"Scandal\" ; TRAVERSAL FOR company IN 1 INBOUND tv_series Copyright ; FILTER FILTER IS_SAME_COLLECTION ( \"Company\" , company ) ; RETURN RETURN company.name ;",
      "ecql": "SELECT company.name FROM company WHERE company.id = { MATCH (company:Company)-[r:Copyright]->(tv_series:TvSeries) WHERE tv_series.id = { SELECT tv_series.id FROM tv_series WHERE tv_series.title = 'Scandal' } RETURN company.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan tv_series ; Filter tv_series.title = 'Scandal' ; Project tv_series.id ; Match (company:Company)-[r:Copyright]->(tv_series:TvSeries) ; Filter tv_series.id = tv_series.id ; Return company.id ; TableScan company ; Filter company.id = company.id ; Project company.name ; ",
      "sqlpp": "SELECT company.name FROM ( MATCH {class: Company, as: company}.outE('Copyright').inV('TvSeries') {where: (title = 'Scandal')} RETURN company )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Company company ; Traversal OUT Copyright ; Traversal IN TvSeries (title = 'Scandal') ; Return company ; Project company.name ; ",
      "result_aql": ["ABC Studios", "Central Independent Television", "Clive Morris Productions", "ShondaLand"],
      "result_count_aql": 4,
      "result_ecql": ["ABC Studios", "Central Independent Television", "Clive Morris Productions", "ShondaLand"],
      "result_count_ecql": 4,
      "result_sqlpp": ["ABC Studios", "Central Independent Television", "Clive Morris Productions", "ShondaLand"],
      "result_count_sqlpp": 4
    },
    {
      "template": 116,
      "question": "Who is the actor playing \" Alan Turing \" in \" The Imitation Game \" ?",
      "aql": "FOR movie IN Movie FILTER movie.title == \"The Imitation Game\" FOR actor, cast IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor ) FILTER cast.role == \"Alan Turing\" RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"The Imitation Game\" ; TRAVERSAL FOR actor , cast IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor ) ; FILTER FILTER cast.role == \"Alan Turing\" ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE r.role = 'Alan Turing' AND movie.id = { SELECT movie.id FROM movie WHERE movie.title = 'The Imitation Game' } RETURN actor.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'The Imitation Game' ; Project movie.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter r.role = 'Alan Turing' AND movie.id = movie.id ; Return actor.id ; TableScan actor ; Filter actor.id = actor.id ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM ( MATCH {class: Actor, as: actor}.outE('Cast') {where: (role = 'Alan Turing')}.inV('Movie') {as: movie, where: (title = 'The Imitation Game')} RETURN actor )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor ; Traversal OUT Cast (role = 'Alan Turing') ; Traversal IN Movie movie (title = 'The Imitation Game') ; Return actor ; Project actor.name ; ",
      "result_aql": ["Alex Lawther"],
      "result_count_aql": 1,
      "result_ecql": ["Alex Lawther"],
      "result_count_ecql": 1,
      "result_sqlpp": ["Alex Lawther"],
      "result_count_sqlpp": 1
    },
    {
      "template": 117,
      "question": "What is the number of movies in which \" Jennifer Aniston \" acted after 2010 ?",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Jennifer Aniston\" FOR movie IN 1 OUTBOUND actor Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FILTER movie.release_year > 2010 COLLECT WITH COUNT INTO cnt RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Jennifer Aniston\" ; TRAVERSAL FOR movie IN 1 OUTBOUND actor Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; FILTER FILTER movie.release_year > 2010 ; AGGREGATE COLLECT WITH COUNT INTO cnt ; RETURN RETURN cnt ;",
      "ecql": "SELECT COUNT (*) AS cnt FROM movie WHERE movie.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE actor.id = { SELECT actor.id FROM actor WHERE actor.name = 'Jennifer Aniston' } RETURN movie.id } AND movie.release_year > 2010",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Jennifer Aniston' ; Project actor.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter actor.id = actor.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id AND movie.release_year > 2010 ; Project COUNT ( * ) AS cnt ; ",
      "sqlpp": "SELECT COUNT(*) FROM ( MATCH {class: Actor, as: actor, where: (name = 'Jennifer Aniston')}.outE('Cast').inV('Movie') {as: movie, where: (release_year > 2010)} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor (name = 'Jennifer Aniston') ; Traversal OUT Cast ; Traversal IN Movie movie (release_year > 2010) ; Return movie ; Project COUNT ( * ) ; ",
      "result_aql": ["17"],
      "result_count_aql": 1,
      "result_ecql": ["15"],
      "result_count_ecql": 1,
      "result_sqlpp": ["15"],
      "result_count_sqlpp": 1
    },
    {
      "template": 118,
      "question": "Which actors were born in Tehran",
      "aql": "FOR actor IN Actor FILTER actor.birth_city == \"Tehran\" RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.birth_city == \"Tehran\" ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.birth_city = 'Tehran'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_city = 'Tehran' ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM actor WHERE actor.birth_city = 'Tehran'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_city = 'Tehran' ; Project actor.name ; ",
      "result_aql": ["Adel Shirazy", "Afsaneh Bayegan", "Afshin Hashemi", "Ahmad Shamlu", "Ali Mosaffa", "Alireza Amini", "Amir Badri", "Amir Khalighi", "Amir Vahedi", "Anita Khalatbari", "Antonio Esfandiari", "Arash", "Asal Badii", "Ata Servati", "Atoosa Rubenstein", "Aylar Lie", "Azam Ali", "Bahar Soomekh", "Bahman Mofid", "Bahram Radan", "Baran Kosari", "Barbet Schroeder", "Bijan Zaimi", "Bita Farahi", "Bobby Naderi", "Bruce Tavakkol", "Camila Batmanghelidjh", "Carolena Sabah", "Claudia Lynx", "Dar Dixon", "Daryush Shokof", "David Diaan", "David King-Wood", "Dominic Rains", "Ebrahim Hatamikia", "Eddie Kanani", "Edwin Avaness", "Elnaz Shakerdust", "Ethan Rains", "Ezzatolah Entezami", "Fahimeh Rahimnia", "Fahimeh Rastegar", "Faramarz Gharibian", "Fariborz Arabnia", "Farimah Farjami", "Farrokh Sajedi", "Farshid Seilatani", "Fatemah Motamed-Aria", "Fatemeh Taheri", "Forugh Farrokhzad", "Garen Petrossian", "Garshasb Raoufi", "Gegard Mousasi", "Gholamhossein Naghshineh", "Golshifteh Farahani", "Googoosh", "Hamed Pouresfandyani", "Hamid Ghanbari", "Hana Makhmalbaf", "Hediyeh Tehrani", "Hesam Navabsafavi", "Hossein Alizadeh", "Hossein Kazbian", "Hossein Sarshar", "Houchang Allahyari", "Iraj Ghaderi", "Jamshid Hashempur", "Jamshid Layegh", "Jamshid Shah Mohammadi", "Jamshid Sheibani", "Javad Hashemi", "Kambiz Shabankare", "Kamshad Kooshan", "Khosro Shakibai", "Khosrow Vaziri", "Kiarash Anvari", "Leia Zanganeh", "Leila Hatami", "Leyla Zareh", "Mahdad Rezaujan", "Mahnaz Afshar", "Mahtab Keramati", "Majid Majidi", "Manoochehr Valizade", "Marco Khan", "Maria Petros", "Marina Ghane", "Marjan Neshat", "Mary Apick", "Matin Dadfar", "Maz Jobrani", "Maziar Rezai", "Mehran Ghafoorian", "Mehran Modiri", "Mehraveh Sharifinia", "Mehrdad Sedighian", "Merila Zare'i", "Michael Farnia", "Michael Pavlisan", "Michelle Franklin", "Mohamad Ali Fardin", "Mohammad Coochaki", "Mohammad Reza Forutan", "Mohammad Reza Golzar", "Mohammad Varshochi", "Mohammed Mossadegh", "Mohsen Makhmalbaf", "Morteza Tavakoli", "Nare Bell", "Nasim Pedrad", "Navid Navid", "Nazanin Afshin-Jam", "Negar Javaherian", "Nematollah Gorji", "Niki Karimi", "Nima Safei", "Parsa mirouzfar", "Parvin Solaymani", "Pegah Ferydoni", "miran Zarifian", "Poulad Kimiayi", "Rabeah Ghaffari", "Rakhshan Bani-Etemad", "Ramin Karimloo", "Ramin Shafiai", "Ray Aghayan", "Reza Aslan", "Reza Farahan", "Reza Kianian", "Rita", "Rosie Malek-Yonan", "Rouzbeh Rashidi", "Roya Nonahali", "Roya Taymourian", "Rozita Ghaffari", "Sadaf Foroughi", "Saeed Kangarani", "Saman Yaghmai-Aledavoud", "Samira Makhmalbaf", "Sara Saidy", "Sareh Bayat", "Satiar Pourvasei", "Saye Yabandeh", "Shabnam Safarzadeh", "Shaghayegh Farahani", "Shah Mohammad Reza Pahlavi", "Shahab Hosseini", "Shahai Khademi", "Shahram Shabpareh", "Shappi Khorsandi", "Shaun Hasas", "Shaun Toub", "Shebly Niavarani", "Shervin Shadmehr", "Shirin Ebadi", "Shiva Gordon", "Shohreh Aghdashloo", "Shohreh Lorestani", "Sirr D'Kay", "Soghra Obeisi", "Taghi Zohuri", "Taies Farzan", "Tami Stronach", "Taraneh Alidoosti", "Taymaz Saba", "Valentin Siroon", "Vida Ghahremani", "Yvonne D'Angers"],
      "result_count_aql": 168,
      "result_ecql": ["Adel Shirazy", "Afsaneh Bayegan", "Afshin Hashemi", "Ahmad Shamlu", "Ali Mosaffa", "Alireza Amini", "Amir Badri", "Amir Khalighi", "Amir Vahedi", "Anita Khalatbari", "Antonio Esfandiari", "Arash", "Asal Badii", "Ata Servati", "Atoosa Rubenstein", "Aylar Lie", "Azam Ali", "Bahar Soomekh", "Bahman Mofid", "Bahram Radan", "Baran Kosari", "Barbet Schroeder", "Bijan Zaimi", "Bita Farahi", "Bobby Naderi", "Bruce Tavakkol", "Camila Batmanghelidjh", "Carolena Sabah", "Claudia Lynx", "Dar Dixon", "Daryush Shokof", "David Diaan", "David King-Wood", "Dominic Rains", "Ebrahim Hatamikia", "Eddie Kanani", "Edwin Avaness", "Elnaz Shakerdust", "Ethan Rains", "Ezzatolah Entezami", "Fahimeh Rahimnia", "Fahimeh Rastegar", "Faramarz Gharibian", "Fariborz Arabnia", "Farimah Farjami", "Farrokh Sajedi", "Farshid Seilatani", "Fatemah Motamed-Aria", "Fatemeh Taheri", "Forugh Farrokhzad", "Garen Petrossian", "Garshasb Raoufi", "Gegard Mousasi", "Gholamhossein Naghshineh", "Golshifteh Farahani", "Googoosh", "Hamed Pouresfandyani", "Hamid Ghanbari", "Hana Makhmalbaf", "Hediyeh Tehrani", "Hesam Navabsafavi", "Hossein Alizadeh", "Hossein Kazbian", "Hossein Sarshar", "Houchang Allahyari", "Iraj Ghaderi", "Jamshid Hashempur", "Jamshid Layegh", "Jamshid Shah Mohammadi", "Jamshid Sheibani", "Javad Hashemi", "Kambiz Shabankare", "Kamshad Kooshan", "Khosro Shakibai", "Khosrow Vaziri", "Kiarash Anvari", "Leia Zanganeh", "Leila Hatami", "Leyla Zareh", "Mahdad Rezaujan", "Mahnaz Afshar", "Mahtab Keramati", "Majid Majidi", "Manoochehr Valizade", "Marco Khan", "Maria Petros", "Marina Ghane", "Marjan Neshat", "Mary Apick", "Matin Dadfar", "Maz Jobrani", "Maziar Rezai", "Mehran Ghafoorian", "Mehran Modiri", "Mehraveh Sharifinia", "Mehrdad Sedighian", "Merila Zare'i", "Michael Farnia", "Michael Pavlisan", "Michelle Franklin", "Mohamad Ali Fardin", "Mohammad Coochaki", "Mohammad Reza Forutan", "Mohammad Reza Golzar", "Mohammad Varshochi", "Mohammed Mossadegh", "Mohsen Makhmalbaf", "Morteza Tavakoli", "Nare Bell", "Nasim Pedrad", "Navid Navid", "Nazanin Afshin-Jam", "Negar Javaherian", "Nematollah Gorji", "Niki Karimi", "Nima Safei", "Parsa mirouzfar", "Parvin Solaymani", "Pegah Ferydoni", "miran Zarifian", "Poulad Kimiayi", "Rabeah Ghaffari", "Rakhshan Bani-Etemad", "Ramin Karimloo", "Ramin Shafiai", "Ray Aghayan", "Reza Aslan", "Reza Farahan", "Reza Kianian", "Rita", "Rosie Malek-Yonan", "Rouzbeh Rashidi", "Roya Nonahali", "Roya Taymourian", "Rozita Ghaffari", "Sadaf Foroughi", "Saeed Kangarani", "Saman Yaghmai-Aledavoud", "Samira Makhmalbaf", "Sara Saidy", "Sareh Bayat", "Satiar Pourvasei", "Saye Yabandeh", "Shabnam Safarzadeh", "Shaghayegh Farahani", "Shah Mohammad Reza Pahlavi", "Shahab Hosseini", "Shahai Khademi", "Shahram Shabpareh", "Shappi Khorsandi", "Shaun Hasas", "Shaun Toub", "Shebly Niavarani", "Shervin Shadmehr", "Shirin Ebadi", "Shiva Gordon", "Shohreh Aghdashloo", "Shohreh Lorestani", "Sirr D'Kay", "Soghra Obeisi", "Taghi Zohuri", "Taies Farzan", "Tami Stronach", "Taraneh Alidoosti", "Taymaz Saba", "Valentin Siroon", "Vida Ghahremani", "Yvonne D'Angers"],
      "result_count_ecql": 168,
      "result_sqlpp": ["Adel Shirazy", "Afsaneh Bayegan", "Afshin Hashemi", "Ahmad Shamlu", "Ali Mosaffa", "Alireza Amini", "Amir Badri", "Amir Khalighi", "Amir Vahedi", "Anita Khalatbari", "Antonio Esfandiari", "Arash", "Asal Badii", "Ata Servati", "Atoosa Rubenstein", "Aylar Lie", "Azam Ali", "Bahar Soomekh", "Bahman Mofid", "Bahram Radan", "Baran Kosari", "Barbet Schroeder", "Bijan Zaimi", "Bita Farahi", "Bobby Naderi", "Bruce Tavakkol", "Camila Batmanghelidjh", "Carolena Sabah", "Claudia Lynx", "Dar Dixon", "Daryush Shokof", "David Diaan", "David King-Wood", "Dominic Rains", "Ebrahim Hatamikia", "Eddie Kanani", "Edwin Avaness", "Elnaz Shakerdust", "Ethan Rains", "Ezzatolah Entezami", "Fahimeh Rahimnia", "Fahimeh Rastegar", "Faramarz Gharibian", "Fariborz Arabnia", "Farimah Farjami", "Farrokh Sajedi", "Farshid Seilatani", "Fatemah Motamed-Aria", "Fatemeh Taheri", "Forugh Farrokhzad", "Garen Petrossian", "Garshasb Raoufi", "Gegard Mousasi", "Gholamhossein Naghshineh", "Golshifteh Farahani", "Googoosh", "Hamed Pouresfandyani", "Hamid Ghanbari", "Hana Makhmalbaf", "Hediyeh Tehrani", "Hesam Navabsafavi", "Hossein Alizadeh", "Hossein Kazbian", "Hossein Sarshar", "Houchang Allahyari", "Iraj Ghaderi", "Jamshid Hashempur", "Jamshid Layegh", "Jamshid Shah Mohammadi", "Jamshid Sheibani", "Javad Hashemi", "Kambiz Shabankare", "Kamshad Kooshan", "Khosro Shakibai", "Khosrow Vaziri", "Kiarash Anvari", "Leia Zanganeh", "Leila Hatami", "Leyla Zareh", "Mahdad Rezaujan", "Mahnaz Afshar", "Mahtab Keramati", "Majid Majidi", "Manoochehr Valizade", "Marco Khan", "Maria Petros", "Marina Ghane", "Marjan Neshat", "Mary Apick", "Matin Dadfar", "Maz Jobrani", "Maziar Rezai", "Mehran Ghafoorian", "Mehran Modiri", "Mehraveh Sharifinia", "Mehrdad Sedighian", "Merila Zare'i", "Michael Farnia", "Michael Pavlisan", "Michelle Franklin", "Mohamad Ali Fardin", "Mohammad Coochaki", "Mohammad Reza Forutan", "Mohammad Reza Golzar", "Mohammad Varshochi", "Mohammed Mossadegh", "Mohsen Makhmalbaf", "Morteza Tavakoli", "Nare Bell", "Nasim Pedrad", "Navid Navid", "Nazanin Afshin-Jam", "Negar Javaherian", "Nematollah Gorji", "Niki Karimi", "Nima Safei", "Parsa mirouzfar", "Parvin Solaymani", "Pegah Ferydoni", "miran Zarifian", "Poulad Kimiayi", "Rabeah Ghaffari", "Rakhshan Bani-Etemad", "Ramin Karimloo", "Ramin Shafiai", "Ray Aghayan", "Reza Aslan", "Reza Farahan", "Reza Kianian", "Rita", "Rosie Malek-Yonan", "Rouzbeh Rashidi", "Roya Nonahali", "Roya Taymourian", "Rozita Ghaffari", "Sadaf Foroughi", "Saeed Kangarani", "Saman Yaghmai-Aledavoud", "Samira Makhmalbaf", "Sara Saidy", "Sareh Bayat", "Satiar Pourvasei", "Saye Yabandeh", "Shabnam Safarzadeh", "Shaghayegh Farahani", "Shah Mohammad Reza Pahlavi", "Shahab Hosseini", "Shahai Khademi", "Shahram Shabpareh", "Shappi Khorsandi", "Shaun Hasas", "Shaun Toub", "Shebly Niavarani", "Shervin Shadmehr", "Shirin Ebadi", "Shiva Gordon", "Shohreh Aghdashloo", "Shohreh Lorestani", "Sirr D'Kay", "Soghra Obeisi", "Taghi Zohuri", "Taies Farzan", "Tami Stronach", "Taraneh Alidoosti", "Taymaz Saba", "Valentin Siroon", "Vida Ghahremani", "Yvonne D'Angers"],
      "result_count_sqlpp": 168
    },
    {
      "template": 119,
      "question": "who acted the role of \" Mr. Bean \"",
      "aql": "FOR actor IN Actor FOR movie, cast IN 1 OUTBOUND actor Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) FILTER cast.role == \"Mr. Bean\" RETURN actor.name",
      "aql_mir": "COLLECTION _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; TRAVERSAL FOR movie , cast IN 1 OUTBOUND actor Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; FILTER FILTER cast.role == \"Mr. Bean\" ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE r.role = 'Mr. Bean' RETURN actor.id }",
      "ecql_mir": "Match _ Filter _ Return _ TableScan _ Filter _ Project _ | Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter r.role = 'Mr. Bean' ; Return actor.id ; TableScan actor ; Filter actor.id = actor.id ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM ( MATCH {class: Actor, as: actor}.outE('Cast') {where: (role = 'Mr. Bean')}.inV('Movie') {as: movie} RETURN actor )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor ; Traversal OUT Cast (role = 'Mr. Bean') ; Traversal IN Movie movie ; Return actor ; Project actor.name ; ",
      "result_aql": ["Ed Sedgwick", "Ed Segwick", "Edgar Sedgwick", "Edward Sedgwick", "Frank Forsyth", "Frank Forsythe", "Ivan Purser", "Jasper van der Put", "Marc Cameron", "Matthew Leonard-Lesniak", "Matthew Lesniak", "Moro", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Mr. Rowan Atkinson", "Rajiv Khilnani", "Ro Atkinson", "Ro Atkinson", "Ro Atkinson", "Ro Atkinson", "Ro Atkinson", "Ro Atkinson", "Ro Atkinson", "Ro Atkinson", "Ro Atkinson", "Ro Atkinson", "Ro Atkinson", "Ro Atkinson", "Ro Atkinson", "Ro Atkinson", "Ro Atkinson", "Ro Atkinson", "Ro Atkinson", "Ro Atkinson", "Ro Atkinson", "Ro Atkinson", "Ro Atkinson", "Ro Atkinson", "Ro Atkinson", "Ro Atkinson", "Ro Atkinson", "Row", "Row", "Row", "Row", "Row", "Row", "Row", "Row", "Row", "Row", "Row", "Row", "Row", "Row", "Row", "Row", "Row", "Row", "Row", "Row", "Row", "Row", "Row", "Row", "Row", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Rowan Sebastian Atkinson", "Takahiro Morooka"],
      "result_count_aql": 19,
      "result_ecql": ["Ed Sedgwick", "Ed Segwick", "Edgar Sedgwick", "Edward Sedgwick", "Frank Forsyth", "Frank Forsythe", "Ivan Purser", "Jasper van der Put", "Marc Cameron", "Matthew Leonard-Lesniak", "Matthew Lesniak", "Moro", "Mr. Rowan Atkinson", "Rajiv Khilnani", "Ro Atkinson", "Row", "Rowan Atkinson", "Rowan Sebastian Atkinson", "Takahiro Morooka"],
      "result_count_ecql": 19,
      "result_sqlpp": ["Ed Sedgwick", "Ed Segwick", "Edgar Sedgwick", "Edward Sedgwick", "Frank Forsyth", "Frank Forsythe", "Ivan Purser", "Jasper van der Put", "Marc Cameron", "Matthew Leonard-Lesniak", "Matthew Lesniak", "Moro", "Mr. Rowan Atkinson", "Rajiv Khilnani", "Ro Atkinson", "Row", "Rowan Atkinson", "Rowan Sebastian Atkinson", "Takahiro Morooka"],
      "result_count_sqlpp": 19
    },
    {
      "template": 120,
      "question": "Find all movies featuring \" Benedict Cumberbatch \"",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Benedict Cumberbatch\" FOR movie IN 1 OUTBOUND actor Cast FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Benedict Cumberbatch\" ; TRAVERSAL FOR movie IN 1 OUTBOUND actor Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE actor.id = { SELECT actor.id FROM actor WHERE actor.name = 'Benedict Cumberbatch' } RETURN movie.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Benedict Cumberbatch' ; Project actor.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter actor.id = actor.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM ( MATCH {class: Actor, as: actor, where: (name = 'Benedict Cumberbatch')}.outE('Cast').inV('Movie') {as: movie} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor (name = 'Benedict Cumberbatch') ; Traversal OUT Cast ; Traversal IN Movie movie ; Return movie ; Project movie.title ; ",
      "result_aql": ["2014 Laureus World Sports Awards", "2014 MTV Movie Awards", "20th Annual Screen Actors Guild Awards", "70th Golden Globe Awards", "72nd Golden Globe Awards", "72nd Golden Globe Awards", "9 Kisses", "August: Osage County", "Black Mass", "Breakthrough Prize 2014", "Creation", "Doctor Strange", "Dunkirk", "Four Lions", "Hawking", "National Theatre Live: Frankenstein", "National Theatre Live: Frankenstein", "National Theatre Live: Hamlet", "Shakespeare Live! From the RSC", "Sherlock Uncovered", "The 21st Annual Screen Actors Guild Awards", "The 64th Primetime Emmy Awards", "The 65th Primetime Emmy Awards", "The 66th Primetime Emmy Awards", "The 8th Annual CNN Heroes: An All-Star Tribute", "The Big Fat Quiz of the Year", "The Big Fat Quiz of the Year", "The Oscars", "The Oscars", "The Real Sherlock Holmes", "Tinker Tailor Soldier Spy", "To Kill a King", "War Horse", "Zoolander 2"],
      "result_count_aql": 32,
      "result_ecql": ["2014 Laureus World Sports Awards", "2014 MTV Movie Awards", "20th Annual Screen Actors Guild Awards", "70th Golden Globe Awards", "72nd Golden Globe Awards", "9 Kisses", "August: Osage County", "Black Mass", "Breakthrough Prize 2014", "Creation", "Doctor Strange", "Dunkirk", "Four Lions", "Hawking", "National Theatre Live: Frankenstein", "National Theatre Live: Hamlet", "Shakespeare Live! From the RSC", "Sherlock Uncovered", "The 21st Annual Screen Actors Guild Awards", "The 64th Primetime Emmy Awards", "The 65th Primetime Emmy Awards", "The 66th Primetime Emmy Awards", "The 8th Annual CNN Heroes: An All-Star Tribute", "The Big Fat Quiz of the Year", "The Big Fat Quiz of the Year", "The Oscars", "The Oscars", "The Real Sherlock Holmes", "Tinker Tailor Soldier Spy", "To Kill a King", "War Horse", "Zoolander 2"],
      "result_count_ecql": 32,
      "result_sqlpp": ["2014 Laureus World Sports Awards", "2014 MTV Movie Awards", "20th Annual Screen Actors Guild Awards", "70th Golden Globe Awards", "72nd Golden Globe Awards", "9 Kisses", "August: Osage County", "Black Mass", "Breakthrough Prize 2014", "Creation", "Doctor Strange", "Dunkirk", "Four Lions", "Hawking", "National Theatre Live: Frankenstein", "National Theatre Live: Hamlet", "Shakespeare Live! From the RSC", "Sherlock Uncovered", "The 21st Annual Screen Actors Guild Awards", "The 64th Primetime Emmy Awards", "The 65th Primetime Emmy Awards", "The 66th Primetime Emmy Awards", "The 8th Annual CNN Heroes: An All-Star Tribute", "The Big Fat Quiz of the Year", "The Big Fat Quiz of the Year", "The Oscars", "The Oscars", "The Real Sherlock Holmes", "Tinker Tailor Soldier Spy", "To Kill a King", "War Horse", "Zoolander 2"],
      "result_count_sqlpp": 32
    },
    {
      "template": 121,
      "question": "Who acts \" Olivia Pope \" in the series Scandal ?",
      "aql": "FOR tv_series IN TvSeries FILTER tv_series.title == \"Scandal\" FOR actor, cast IN 1 INBOUND tv_series Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor ) FILTER cast.role == \"Olivia Pope\" RETURN actor.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR tv_series IN TvSeries ; FILTER FILTER tv_series.title == \"Scandal\" ; TRAVERSAL FOR actor , cast IN 1 INBOUND tv_series Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor ) ; FILTER FILTER cast.role == \"Olivia Pope\" ; RETURN RETURN actor.name ;",
      "ecql": "SELECT actor.name FROM actor WHERE actor.id = { MATCH (actor:Actor)-[r:Cast]->(tv_series:TvSeries) WHERE r.role = 'Olivia Pope' AND tv_series.id = { SELECT tv_series.id FROM tv_series WHERE tv_series.title = 'Scandal' } RETURN actor.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan tv_series ; Filter tv_series.title = 'Scandal' ; Project tv_series.id ; Match (actor:Actor)-[r:Cast]->(tv_series:TvSeries) ; Filter r.role = 'Olivia Pope' AND tv_series.id = tv_series.id ; Return actor.id ; TableScan actor ; Filter actor.id = actor.id ; Project actor.name ; ",
      "sqlpp": "SELECT actor.name FROM ( MATCH {class: Actor, as: actor}.outE('Cast') {where: (role = 'Olivia Pope')}.inV('TvSeries') {as: tv_series, where: (title = 'Scandal')} RETURN actor )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor ; Traversal OUT Cast (role = 'Olivia Pope') ; Traversal IN TvSeries tv_series (title = 'Scandal') ; Return actor ; Project actor.name ; ",
      "result_aql": ["Kerry Washington"],
      "result_count_aql": 1,
      "result_ecql": ["Kerry Washington"],
      "result_count_ecql": 1,
      "result_sqlpp": ["Kerry Washington"],
      "result_count_sqlpp": 1
    },
    {
      "template": 122,
      "question": "What are the series in which \" Scott Foley \" is an actor ?",
      "aql": "FOR actor IN Actor FILTER actor.name == \"Scott Foley\" FOR tv_series IN 1 OUTBOUND actor Cast FILTER IS_SAME_COLLECTION ( \"TvSeries\", tv_series ) RETURN tv_series.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.name == \"Scott Foley\" ; TRAVERSAL FOR tv_series IN 1 OUTBOUND actor Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"TvSeries\" , tv_series ) ; RETURN RETURN tv_series.title ;",
      "ecql": "SELECT tv_series.title FROM tv_series WHERE tv_series.id = { MATCH (actor:Actor)-[r:Cast]->(tv_series:TvSeries) WHERE actor.id = { SELECT actor.id FROM actor WHERE actor.name = 'Scott Foley' } RETURN tv_series.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.name = 'Scott Foley' ; Project actor.id ; Match (actor:Actor)-[r:Cast]->(tv_series:TvSeries) ; Filter actor.id = actor.id ; Return tv_series.id ; TableScan tv_series ; Filter tv_series.id = tv_series.id ; Project tv_series.title ; ",
      "sqlpp": "SELECT tv_series.title FROM ( MATCH {class: Actor, as: actor, where: (name = 'Scott Foley')}.outE('Cast').inV('TvSeries') {as: tv_series} RETURN tv_series )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor (name = 'Scott Foley') ; Traversal OUT Cast ; Traversal IN TvSeries tv_series ; Return tv_series ; Project tv_series.title ; ",
      "result_aql": "[]",
      "result_count_aql": 0,
      "result_ecql": "[]",
      "result_count_ecql": 0,
      "result_sqlpp": "[]",
      "result_count_sqlpp": 0
    },
    {
      "template": 123,
      "question": "Find all movies by directors born in \" Los Angeles \"",
      "aql": "FOR director IN Director FILTER director.birth_city == \"Los Angeles\" FOR movie IN 1 INBOUND director DirectedBy FILTER IS_SAME_COLLECTION ( \"Movie\", movie ) RETURN movie.title",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR director IN Director ; FILTER FILTER director.birth_city == \"Los Angeles\" ; TRAVERSAL FOR movie IN 1 INBOUND director DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Movie\" , movie ) ; RETURN RETURN movie.title ;",
      "ecql": "SELECT movie.title FROM movie WHERE movie.id = { MATCH (movie:Movie)-[r:DirectedBy]->(director:Director) WHERE director.id = { SELECT director.id FROM director WHERE director.birth_city = 'Los Angeles' } RETURN movie.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan director ; Filter director.birth_city = 'Los Angeles' ; Project director.id ; Match (movie:Movie)-[r:DirectedBy]->(director:Director) ; Filter director.id = director.id ; Return movie.id ; TableScan movie ; Filter movie.id = movie.id ; Project movie.title ; ",
      "sqlpp": "SELECT movie.title FROM ( MATCH {class: Movie, as: movie}.outE('DirectedBy').inV('Director') {as: director, where: (birth_city = 'Los Angeles')} RETURN movie )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Movie movie ; Traversal OUT DirectedBy ; Traversal IN Director director (birth_city = 'Los Angeles') ; Return movie ; Project movie.title ; ",
      "result_aql": "[]",
      "result_count_aql": 5878,
      "result_ecql": "[]",
      "result_count_ecql": 5878,
      "result_sqlpp": "[]",
      "result_count_sqlpp": 5878
    },
    {
      "template": 124,
      "question": "How many female actors were born in \" New York City \" after 1980 ?",
      "aql": "FOR actor IN Actor FILTER actor.birth_city == \"New York City\" AND actor.birth_year > 1980 AND actor.gender == \"female\" COLLECT WITH COUNT INTO cnt RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR actor IN Actor ; FILTER FILTER actor.birth_city == \"New York City\" AND actor.birth_year > 1980 AND actor.gender == \"female\" ; AGGREGATE COLLECT WITH COUNT INTO cnt ; RETURN RETURN cnt ;",
      "ecql": "SELECT COUNT (*) AS cnt FROM actor WHERE actor.birth_city = 'New York City' AND actor.gender = 'female'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_city = 'New York City' AND actor.gender = 'female' ; Project COUNT ( * ) AS cnt ; ",
      "sqlpp": "SELECT COUNT (*) AS cnt FROM actor WHERE actor.birth_city = 'New York City' AND actor.gender = 'female' AND actor.birth_year > 1980",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan actor ; Filter actor.birth_city = 'New York City' AND actor.gender = 'female' AND actor.birth_year > 1980 ; Project COUNT ( * ) AS cnt ; ",
      "result_aql": ["247"],
      "result_count_aql": 1,
      "result_ecql": ["2003"],
      "result_count_ecql": 1,
      "result_sqlpp": ["2003"],
      "result_count_sqlpp": 1
    },
    {
      "template": 125,
      "question": "What year is the movie \" Dead Poets Society \" from ?",
      "aql": "FOR movie IN Movie FILTER movie.title == \"Dead Poets Society\" RETURN movie.release_year",
      "aql_mir": "COLLECTION _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"Dead Poets Society\" ; RETURN RETURN movie.release_year ;",
      "ecql": "SELECT movie.release_year FROM movie WHERE movie.title = 'Dead Poets Society'",
      "ecql_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'Dead Poets Society' ; Project movie.release_year ; ",
      "sqlpp": "SELECT movie.release_year FROM movie WHERE movie.title = 'Dead Poets Society'",
      "sqlpp_mir": "TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'Dead Poets Society' ; Project movie.release_year ; ",
      "result_aql": ["1989"],
      "result_count_aql": 1,
      "result_ecql": ["1989"],
      "result_count_ecql": 1,
      "result_sqlpp": ["1989"],
      "result_count_sqlpp": 1
    },
    {
      "template": 126,
      "question": "Who is the director of the series \" House of Cards \" produced by Netflix ?",
      "aql": "FOR tv_series IN TvSeries FILTER tv_series.title == \"House of Cards\" FOR company IN 1 INBOUND tv_series Copyright FILTER IS_SAME_COLLECTION ( \"Company\", company ) FILTER company.name == \"Netflix\" FOR director IN 1 INBOUND tv_series DirectedBy FILTER IS_SAME_COLLECTION ( \"Director\", director ) RETURN director.name",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; RETURN _ ; | COLLECTION FOR tv_series IN TvSeries ; FILTER FILTER tv_series.title == \"House of Cards\" ; TRAVERSAL FOR company IN 1 INBOUND tv_series Copyright ; FILTER FILTER IS_SAME_COLLECTION ( \"Company\" , company ) ; FILTER FILTER company.name == \"Netflix\" ; TRAVERSAL FOR director IN 1 INBOUND tv_series DirectedBy ; FILTER FILTER IS_SAME_COLLECTION ( \"Director\" , director ) ; RETURN RETURN director.name ;",
      "ecql": "SELECT director.name FROM director WHERE director.id = { MATCH (tv_series:TvSeries)-[:DirectedBy]->(director:Director), (tv_series:TvSeries)-[:MadeBy]->(producer:Producer) WHERE tv_series.id = { SELECT tv_series.id FROM tv_series WHERE tv_series.title = 'House of Cards' } AND producer.id = { SELECT producer.id FROM producer WHERE producer.name = 'Netflix' } RETURN director.id }",
      "ecql_mir": "TableScan _ Filter _ Project _ TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan tv_series ; Filter tv_series.title = 'House of Cards' ; Project tv_series.id ; TableScan producer ; Filter producer.name = 'Netflix' ; Project producer.id ; Match (tv_series:TvSeries)-[:DirectedBy]->(director:Director), (tv_series:TvSeries)-[:MadeBy]->(producer:Producer) ; Filter tv_series.id = tv_series.id AND producer.id = producer.id ; Return director.id ; TableScan director ; Filter director.id = director.id ; Project director.name ; ",
      "sqlpp": "SELECT director.name FROM ( MATCH {class: Producer, as: producer, where: (name = 'Netflix')}.inE('MadeBy').outV('TvSeries') {as: tv_series, where: (title = 'House of Cards')}.outE('DirectedBy').inV('Director') {as: director} RETURN director )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Traversal _ Traversal _ Return _ Project _ | Match Producer producer (name = 'Netflix') ; Traversal IN MadeBy ; Traversal OUT TvSeries tv_series (title = 'House of Cards') ; Traversal OUT DirectedBy ; Traversal IN Director director ; Return director ; Project director.name ; ",
      "result_aql": "[]",
      "result_count_aql": 0,
      "result_ecql": "[]",
      "result_count_ecql": 0,
      "result_sqlpp": "[]",
      "result_count_sqlpp": 0
    },
    {
      "template": 127,
      "question": "How many actors from China have acted in \" Rush Hour 3 \"",
      "aql": "FOR movie IN Movie FILTER movie.title == \"Rush Hour 3\" FOR actor IN 1 INBOUND movie Cast FILTER IS_SAME_COLLECTION ( \"Actor\", actor ) FILTER actor.nationality == \"China\" COLLECT WITH COUNT INTO cnt RETURN cnt",
      "aql_mir": "COLLECTION _ ; FILTER _ ; TRAVERSAL _ ; FILTER _ ; FILTER _ ; AGGREGATE _ ; RETURN _ ; | COLLECTION FOR movie IN Movie ; FILTER FILTER movie.title == \"Rush Hour 3\" ; TRAVERSAL FOR actor IN 1 INBOUND movie Cast ; FILTER FILTER IS_SAME_COLLECTION ( \"Actor\" , actor ) ; FILTER FILTER actor.nationality == \"China\" ; AGGREGATE COLLECT WITH COUNT INTO cnt ; RETURN RETURN cnt ;",
      "ecql": "SELECT COUNT (*) AS cnt FROM actor WHERE actor.id = { MATCH (actor:Actor)-[r:Cast]->(movie:Movie) WHERE movie.id = { SELECT movie.id FROM movie WHERE movie.title = 'Rush Hour 3' } RETURN actor.id } AND actor.nationality = 'China'",
      "ecql_mir": "TableScan _ Filter _ Project _ Match _ Filter _ Return _ TableScan _ Filter _ Project _ | TableScan movie ; Filter movie.title = 'Rush Hour 3' ; Project movie.id ; Match (actor:Actor)-[r:Cast]->(movie:Movie) ; Filter movie.id = movie.id ; Return actor.id ; TableScan actor ; Filter actor.id = actor.id AND actor.nationality = 'China' ; Project COUNT ( * ) AS cnt ; ",
      "sqlpp": "SELECT COUNT(*) AS cnt FROM ( MATCH {class: Actor, as: actor, where: (nationality = 'China')}.outE('Cast').inV('Movie') {as: movie, where: (title = 'Rush Hour 3')} RETURN actor )",
      "sqlpp_mir": "Match _ Traversal _ Traversal _ Return _ Project _ | Match Actor actor (nationality = 'China') ; Traversal OUT Cast ; Traversal IN Movie movie (title = 'Rush Hour 3') ; Return actor ; Project COUNT ( * ) AS cnt ; ",
      "result_aql": ["3"],
      "result_count_aql": 1,
      "result_ecql": ["3"],
      "result_count_ecql": 1,
      "result_sqlpp": ["3"],
      "result_count_sqlpp": 1
    }
  ],
  "schema": {
    "sequence": "movie : movie.title, movie.release_year, movie.title_aka, movie.budget | tv_series : tv_series.title, tv_series.release_year, tv_series.num_of_seasons, tv_series.num_of_episodes, tv_series.title_aka, tv_series.budget | actor : actor.gender, actor.name, actor.nationality, actor.birth_city, actor.birth_year | cast : cast.actor -> cast.movie, cast.actor -> cast.tv_series, cast.role | company : company.name, company.country_code | copyright : copyright.company -> copyright.movie, copyright.copmany -> copyright.tv_series | director : director.gender, director.name, director.nationality, director.birth_city, director.birth_year | directed_by : directed_by.movie -> directed_by.director, directed_by.tv_series -> directed_by.director | genre : genre.genre | classification : classification.movie -> classification.genre, classification.tv_series -> classification.genre | keyword : keyword.keyword | tags : tags.movie -> tags.keyword, tags.tv_series -> tags.keyword | producer : producer.gender, producer.name, producer.nationality, producer.birth_city, producer.birth_year | made_by : made_by.movie -> made_by.producer, made_by.tv_series -> made_by.producer | writer : writer.gender, writer.name, writer.nationality, writer.birth_city, writer.birth_year | written_by : written_by.movie -> written_by.writer, written_by.tv_series -> written_by.writer",
    "cols": {
      "movie": [
        "title_aka",
        "budget",
        "release_year",
        "title"
      ],
      "TvSeries": [
        "num_of_seasons",
        "title_aka",
        "num_of_episodes",
        "release_year",
        "budget",
        "title"
      ],
      "actor": [
        "nationality",
        "name",
        "birth_year",
        "birth_city",
        "gender"
      ],
      "cast": [
        "tv_series",
        "actor",
        "movie",
        "role"
      ],
      "company": [
        "name",
        "country_code"
      ],
      "copyright": [
        "tv_series",
        "copmany",
        "company",
        "movie"
      ],
      "director": [
        "nationality",
        "name",
        "birth_year",
        "birth_city",
        "gender"
      ],
      "directed_by": [
        "tv_series",
        "movie",
        "director"
      ],
      "genre": [
        "genre"
      ],
      "classification": [
        "tv_series",
        "genre",
        "movie"
      ],
      "keyword": [
        "keyword"
      ],
      "tags": [
        "tv_series",
        "keyword",
        "movie"
      ],
      "producer": [
        "nationality",
        "name",
        "birth_year",
        "birth_city",
        "gender"
      ],
      "made_by": [
        "tv_series",
        "producer",
        "movie"
      ],
      "writer": [
        "nationality",
        "name",
        "birth_year",
        "birth_city",
        "gender"
      ],
      "written_by": [
        "tv_series",
        "writer",
        "movie"
      ]
    },
    "indices": [
      {
        "index": 0,
        "item": "Movie"
      },
      {
        "index": 1,
        "item": "Movie.title_aka"
      },
      {
        "index": 2,
        "item": "Movie.budget"
      },
      {
        "index": 3,
        "item": "Movie.release_year"
      },
      {
        "index": 4,
        "item": "Movie.title"
      },
      {
        "index": 5,
        "item": "Tvseries"
      },
      {
        "index": 6,
        "item": "Tvseries.num_of_seasons"
      },
      {
        "index": 7,
        "item": "Tvseries.title_aka"
      },
      {
        "index": 8,
        "item": "Tvseries.num_of_episodes"
      },
      {
        "index": 9,
        "item": "Tvseries.release_year"
      },
      {
        "index": 10,
        "item": "Tvseries.budget"
      },
      {
        "index": 11,
        "item": "Tvseries.title"
      },
      {
        "index": 12,
        "item": "Actor"
      },
      {
        "index": 13,
        "item": "Actor.nationality"
      },
      {
        "index": 14,
        "item": "Actor.name"
      },
      {
        "index": 15,
        "item": "Actor.birth_year"
      },
      {
        "index": 16,
        "item": "Actor.birth_city"
      },
      {
        "index": 17,
        "item": "Actor.gender"
      },
      {
        "index": 18,
        "item": "Cast"
      },
      {
        "index": 19,
        "item": "Cast.tv_series"
      },
      {
        "index": 20,
        "item": "Cast.actor"
      },
      {
        "index": 21,
        "item": "Cast.movie"
      },
      {
        "index": 22,
        "item": "Cast.role"
      },
      {
        "index": 23,
        "item": "Company"
      },
      {
        "index": 24,
        "item": "Company.name"
      },
      {
        "index": 25,
        "item": "Company.country_code"
      },
      {
        "index": 26,
        "item": "Copyright"
      },
      {
        "index": 27,
        "item": "Copyright.tv_series"
      },
      {
        "index": 28,
        "item": "Copyright.copmany"
      },
      {
        "index": 29,
        "item": "Copyright.company"
      },
      {
        "index": 30,
        "item": "Copyright.movie"
      },
      {
        "index": 31,
        "item": "Director"
      },
      {
        "index": 32,
        "item": "Director.nationality"
      },
      {
        "index": 33,
        "item": "Director.name"
      },
      {
        "index": 34,
        "item": "Director.birth_year"
      },
      {
        "index": 35,
        "item": "Director.birth_city"
      },
      {
        "index": 36,
        "item": "Director.gender"
      },
      {
        "index": 37,
        "item": "Directed_by"
      },
      {
        "index": 38,
        "item": "Directed_by.tv_series"
      },
      {
        "index": 39,
        "item": "Directed_by.movie"
      },
      {
        "index": 40,
        "item": "Directed_by.director"
      },
      {
        "index": 41,
        "item": "Genre"
      },
      {
        "index": 42,
        "item": "Genre.genre"
      },
      {
        "index": 43,
        "item": "Classification"
      },
      {
        "index": 44,
        "item": "Classification.tv_series"
      },
      {
        "index": 45,
        "item": "Classification.genre"
      },
      {
        "index": 46,
        "item": "Classification.movie"
      },
      {
        "index": 47,
        "item": "Keyword"
      },
      {
        "index": 48,
        "item": "Keyword.keyword"
      },
      {
        "index": 49,
        "item": "Tags"
      },
      {
        "index": 50,
        "item": "Tags.tv_series"
      },
      {
        "index": 51,
        "item": "Tags.keyword"
      },
      {
        "index": 52,
        "item": "Tags.movie"
      },
      {
        "index": 53,
        "item": "Producer"
      },
      {
        "index": 54,
        "item": "Producer.nationality"
      },
      {
        "index": 55,
        "item": "Producer.name"
      },
      {
        "index": 56,
        "item": "Producer.birth_year"
      },
      {
        "index": 57,
        "item": "Producer.birth_city"
      },
      {
        "index": 58,
        "item": "Producer.gender"
      },
      {
        "index": 59,
        "item": "Made_by"
      },
      {
        "index": 60,
        "item": "Made_by.tv_series"
      },
      {
        "index": 61,
        "item": "Made_by.producer"
      },
      {
        "index": 62,
        "item": "Made_by.movie"
      },
      {
        "index": 63,
        "item": "Writer"
      },
      {
        "index": 64,
        "item": "Writer.nationality"
      },
      {
        "index": 65,
        "item": "Writer.name"
      },
      {
        "index": 66,
        "item": "Writer.birth_year"
      },
      {
        "index": 67,
        "item": "Writer.birth_city"
      },
      {
        "index": 68,
        "item": "Writer.gender"
      },
      {
        "index": 69,
        "item": "Written_by"
      },
      {
        "index": 70,
        "item": "Written_by.tv_series"
      },
      {
        "index": 71,
        "item": "Written_by.writer"
      },
      {
        "index": 72,
        "item": "Written_by.movie"
      }
    ]
  },
  "samples": [
    {
      "question": "Find all tv series produced by Netflix",
      "fold": 2,
      "id": 1,
      "template": 32
    },
    {
      "question": "What is the number of movies produced in 2013 ?",
      "fold": 2,
      "id": 2,
      "template": 33
    },
    {
      "question": "Find the actor with most number of films",
      "fold": 2,
      "id": 3,
      "template": 34
    },
    {
      "question": "Find all movies that were produced by Netflix",
      "fold": 2,
      "id": 4,
      "template": 35
    },
    {
      "question": "How many movies about Persians were released after 1990 ?",
      "fold": 2,
      "id": 5,
      "template": 36
    },
    {
      "question": "Find all the female actors in the movie \" Saving Private Ryan \"",
      "fold": 2,
      "id": 6,
      "template": 37
    },
    {
      "question": "Find all actors from Canada who acted in \" James Bond \" movies",
      "fold": 2,
      "id": 7,
      "template": 38
    },
    {
      "question": "Find all actors who are from Canada",
      "fold": 2,
      "id": 8,
      "template": 39
    },
    {
      "question": "Which movies did \" Alfred Hitchcock \" direct ?",
      "fold": 2,
      "id": 9,
      "template": 40
    },
    {
      "question": "How many movies did \" Humphrey Bogart \" act in before 1942 ?",
      "fold": 2,
      "id": 10,
      "template": 41
    },
    {
      "question": "How many movies did \" Shahab Hosseini \" act in",
      "fold": 2,
      "id": 11,
      "template": 42
    },
    {
      "question": "What is the genre of the movie \" Jurassic Park \" ?",
      "fold": 2,
      "id": 12,
      "template": 43
    },
    {
      "question": "What is the number of movies that \" Brad Pitt \" acts in per year ?",
      "fold": 2,
      "id": 13,
      "template": 44
    },
    {
      "question": "Find the movie which is classified in the most number of genres",
      "fold": 2,
      "id": 14,
      "template": 45
    },
    {
      "question": "In what city was \" Kevin Spacey \" born ?",
      "fold": 2,
      "id": 15,
      "template": 46
    },
    {
      "question": "List \" James Bond \" directors",
      "fold": 2,
      "id": 16,
      "template": 47
    },
    {
      "question": "List all the Sci-Fi movies which released in 2010",
      "fold": 2,
      "id": 17,
      "template": 48
    },
    {
      "question": "Find all movies produced by company \" Walt Disney \" after 2010",
      "fold": 2,
      "id": 18,
      "template": 49
    },
    {
      "question": "What is the number of actors in the movie \" Grumpier Old Men \" ?",
      "fold": 2,
      "id": 19,
      "template": 50
    },
    {
      "question": "List all the movies directed by \" Asghar Farhadi \" in which \" Taraneh Alidoosti \" played",
      "fold": 2,
      "id": 20,
      "template": 51
    },
    {
      "question": "What are the movies related to nuclear weapons",
      "fold": 2,
      "id": 21,
      "template": 52
    },
    {
      "question": "Find all the female actors from Austin",
      "fold": 2,
      "id": 22,
      "template": 53
    },
    {
      "question": "Who was the actor that played \" Vinny Gambini \" in the movie \" My Cousin Vinny \" ?",
      "fold": 2,
      "id": 23,
      "template": 54
    },
    {
      "question": "Find all the female actors born in \" New York City \" after 1980",
      "fold": 2,
      "id": 24,
      "template": 55
    },
    {
      "question": "What are the series featuring \" Kerry Washington \" ?",
      "fold": 2,
      "id": 25,
      "template": 56
    },
    {
      "question": "Who is the writer of the movie \" Django Unchained \"",
      "fold": 2,
      "id": 26,
      "template": 57
    },
    {
      "question": "Find all movies featuring \" Jason Robards \" and \" Woody Strode \"",
      "fold": 2,
      "id": 27,
      "template": 58
    },
    {
      "question": "Who is the director of the tv series \" House of Cards \" from 2013 ?",
      "fold": 2,
      "id": 28,
      "template": 59
    },
    {
      "question": "What is the nationality of \" Kevin Spacey \" ?",
      "fold": 2,
      "id": 29,
      "template": 60
    },
    {
      "question": "Find all the directors who are from Afghanistan",
      "fold": 2,
      "id": 30,
      "template": 61
    },
    {
      "question": "How much was the budget of \" Finding Nemo \"",
      "fold": 2,
      "id": 31,
      "template": 62
    },
    {
      "question": "In what year was \" Benedict Cumberbatch \" born",
      "fold": 3,
      "id": 32,
      "template": 63
    },
    {
      "question": "How many movies are there that are directed by \" Steven Spielberg \" and featuring \" Matt Damon \" ?",
      "fold": 3,
      "id": 33,
      "template": 64
    },
    {
      "question": "Find the actors who played in the movie \" Camp X-Ray \"",
      "fold": 3,
      "id": 34,
      "template": 65
    },
    {
      "question": "Find all movies about Persians",
      "fold": 3,
      "id": 35,
      "template": 66
    },
    {
      "question": "What are all the tv series created by \" Shonda Rhimes \" ?",
      "fold": 3,
      "id": 36,
      "template": 67
    },
    {
      "question": "Which producer has worked with the most number of directors ?",
      "fold": 3,
      "id": 37,
      "template": 68
    },
    {
      "question": "find all films in which \" Rowan Atkinson \" acted as \" Mr. Bean \"",
      "fold": 3,
      "id": 38,
      "template": 69
    },
    {
      "question": "Who acted \" John Nash \" in the movie \" A Beautiful Mind \" ?",
      "fold": 3,
      "id": 39,
      "template": 70
    },
    {
      "question": "How many movies did \" Steven Spielberg \" direct ?",
      "fold": 3,
      "id": 40,
      "template": 71
    },
    {
      "question": "where is the director of \" The Past \" from",
      "fold": 3,
      "id": 41,
      "template": 72
    },
    {
      "question": "What are all the movies featuring \" Kerry Washington \" ?",
      "fold": 3,
      "id": 42,
      "template": 73
    },
    {
      "question": "Find all movies produced by producer \" Walt Disney \" after 2010",
      "fold": 3,
      "id": 43,
      "template": 74
    },
    {
      "question": "What is the number of movies in which \" Tom Cruise \" acted ?",
      "fold": 3,
      "id": 44,
      "template": 75
    },
    {
      "question": "How many companies participated in producing \" Camp X-Ray \"",
      "fold": 3,
      "id": 45,
      "template": 76
    },
    {
      "question": "which company funded the \" Mickey Mouse \" series",
      "fold": 3,
      "id": 46,
      "template": 77
    },
    {
      "question": "Find all actors born in \" Los Angeles \" after 1980",
      "fold": 3,
      "id": 47,
      "template": 78
    },
    {
      "question": "Who acted in the most number of movies directed by \" Jim Jarmusch \"",
      "fold": 3,
      "id": 48,
      "template": 79
    },
    {
      "question": "How many movies did \" Ronald Reagan \" act in ?",
      "fold": 3,
      "id": 49,
      "template": 80
    },
    {
      "question": "Find all movies featuring both \" Matt Damon \" and \" Ben Affleck \"",
      "fold": 3,
      "id": 50,
      "template": 81
    },
    {
      "question": "List all the directors of movies about nuclear weapons",
      "fold": 3,
      "id": 51,
      "template": 82
    },
    {
      "question": "How many actors are in the movie \" Saving Private Ryan \" ?",
      "fold": 3,
      "id": 52,
      "template": 83
    },
    {
      "question": "Find all actors who were born in \" New York City \" in 1984",
      "fold": 3,
      "id": 53,
      "template": 84
    },
    {
      "question": "Who is the writer of \" The Truman Show \"",
      "fold": 3,
      "id": 54,
      "template": 85
    },
    {
      "question": "Who acts as \" Alan Turing \" in the movie \" The Imitation Game \" ?",
      "fold": 3,
      "id": 55,
      "template": 86
    },
    {
      "question": "Find all movies in which \" Robin Wright \" appears",
      "fold": 3,
      "id": 56,
      "template": 87
    },
    {
      "question": "what are the genres of movies directed by \" Asghar Farhadi \"",
      "fold": 3,
      "id": 57,
      "template": 88
    },
    {
      "question": "Who is the director of the movie \" Catch Me If You Can \" ?",
      "fold": 3,
      "id": 58,
      "template": 89
    },
    {
      "question": "What is the nationality of the actress \" Ellen Page \" ?",
      "fold": 3,
      "id": 59,
      "template": 90
    },
    {
      "question": "Who was the director of the movie \" Joy \" from 2015 ?",
      "fold": 3,
      "id": 60,
      "template": 91
    },
    {
      "question": "How many movies did Netflix produce ?",
      "fold": 3,
      "id": 61,
      "template": 92
    },
    {
      "question": "What year was the movie \" The Imitation Game \" produced",
      "fold": 3,
      "id": 62,
      "template": 93
    },
    {
      "question": "How many movies about Iraq war were produced in 2015 ?",
      "fold": 4,
      "id": 63,
      "template": 94
    },
    {
      "question": "What are the major roles in the movie \" Daddy Long Legs \"",
      "fold": 4,
      "id": 64,
      "template": 95
    },
    {
      "question": "What was the budget of the movie Juno from 2007 ?",
      "fold": 4,
      "id": 65,
      "template": 96
    },
    {
      "question": "What is the latest movie by \" Jim Jarmusch \"",
      "fold": 4,
      "id": 66,
      "template": 97
    },
    {
      "question": "Find all actors born in Milan",
      "fold": 4,
      "id": 67,
      "template": 98
    },
    {
      "question": "Find the name and budget of the latest movie by \" Quentin Tarantino \"",
      "fold": 4,
      "id": 68,
      "template": 99
    },
    {
      "question": "How many movies did \" Quentin Tarantino \" direct after 2010 ?",
      "fold": 4,
      "id": 69,
      "template": 100
    },
    {
      "question": "What year was \" Ellen Page \" born ?",
      "fold": 4,
      "id": 70,
      "template": 101
    },
    {
      "question": "How many movies did \" Matt Damon \" direct ?",
      "fold": 4,
      "id": 71,
      "template": 102
    },
    {
      "question": "Find all movies featuring \" Kevin Spacey \"",
      "fold": 4,
      "id": 72,
      "template": 103
    },
    {
      "question": "Find the latest movie which \" Gabriele Ferzetti \" acted in",
      "fold": 4,
      "id": 73,
      "template": 104
    },
    {
      "question": "Find all actors from Italy born after 1980",
      "fold": 4,
      "id": 74,
      "template": 105
    },
    {
      "question": "Find all movies directed by \" Woody Allen \" and featuring \" Scarlett Johansson \"",
      "fold": 4,
      "id": 75,
      "template": 106
    },
    {
      "question": "What is the nationality of the actor \" Christoph Waltz \" ?",
      "fold": 4,
      "id": 76,
      "template": 107
    },
    {
      "question": "Find all actors from Austin born after 1980",
      "fold": 4,
      "id": 77,
      "template": 108
    },
    {
      "question": "Find all movies featuring \" Benedict Cumberbatch \" and \" Keira Knightley \"",
      "fold": 4,
      "id": 78,
      "template": 109
    },
    {
      "question": "Find all actors born in \" Los Angeles \"",
      "fold": 4,
      "id": 79,
      "template": 110
    },
    {
      "question": "In what year was \" Kevin Spacey \" born ?",
      "fold": 4,
      "id": 80,
      "template": 111
    },
    {
      "question": "How many movies did \" Quentin Tarantino \" direct after 2002 and before 2010 ?",
      "fold": 4,
      "id": 81,
      "template": 112
    },
    {
      "question": "What are all the movies directed by \" Quentin Tarantino \" featuring \" Christoph Waltz \" ?",
      "fold": 4,
      "id": 82,
      "template": 113
    },
    {
      "question": "List all male directors who worked with the \" NBC Universal \" company",
      "fold": 4,
      "id": 83,
      "template": 114
    },
    {
      "question": "What company produced the series Scandal ?",
      "fold": 4,
      "id": 84,
      "template": 115
    },
    {
      "question": "Who is the actor playing \" Alan Turing \" in \" The Imitation Game \" ?",
      "fold": 4,
      "id": 85,
      "template": 116
    },
    {
      "question": "What is the number of movies in which \" Jennifer Aniston \" acted after 2010 ?",
      "fold": 4,
      "id": 86,
      "template": 117
    },
    {
      "question": "Which actors were born in Tehran",
      "fold": 4,
      "id": 87,
      "template": 118
    },
    {
      "question": "who acted the role of \" Mr. Bean \"",
      "fold": 4,
      "id": 88,
      "template": 119
    },
    {
      "question": "Find all movies featuring \" Benedict Cumberbatch \"",
      "fold": 4,
      "id": 89,
      "template": 120
    },
    {
      "question": "Who acts \" Olivia Pope \" in the series Scandal ?",
      "fold": 4,
      "id": 90,
      "template": 121
    },
    {
      "question": "What are the series in which \" Scott Foley \" is an actor ?",
      "fold": 4,
      "id": 91,
      "template": 122
    },
    {
      "question": "Find all movies by directors born in \" Los Angeles \"",
      "fold": 4,
      "id": 92,
      "template": 123
    },
    {
      "question": "How many female actors were born in \" New York City \" after 1980 ?",
      "fold": 4,
      "id": 93,
      "template": 124
    },
    {
      "question": "What year is the movie \" Dead Poets Society \" from ?",
      "fold": 4,
      "id": 94,
      "template": 125
    },
    {
      "question": "Who is the director of the series \" House of Cards \" produced by Netflix ?",
      "fold": 4,
      "id": 95,
      "template": 126
    },
    {
      "question": "How many actors from China have acted in \" Rush Hour 3 \"",
      "fold": 4,
      "id": 96,
      "template": 127
    },
    {
      "question": "What company produced the movie \" Juno \" ?",
      "fold": 1,
      "id": 97,
      "template": 1
    },
    {
      "question": "Find all actors who were born in 1984",
      "fold": 1,
      "id": 98,
      "template": 2
    },
    {
      "question": "Who are the actors born in \" New York City \" after 1990 ?",
      "fold": 1,
      "id": 99,
      "template": 3
    },
    {
      "question": "Find all movies about Autism",
      "fold": 1,
      "id": 100,
      "template": 4
    },
    {
      "question": "How many movies did \" Quentin Tarantino \" direct before 2010 ?",
      "fold": 1,
      "id": 101,
      "template": 5
    },
    {
      "question": "Find all comedies produced in year 2015",
      "fold": 1,
      "id": 102,
      "template": 6
    },
    {
      "question": "which movie has the most number of actors from China ?",
      "fold": 1,
      "id": 103,
      "template": 7
    },
    {
      "question": "When was \" Kevin Spacey \" born ?",
      "fold": 1,
      "id": 104,
      "template": 8
    },
    {
      "question": "Find all movies featuring \" Kate Winslet \"",
      "fold": 1,
      "id": 105,
      "template": 9
    },
    {
      "question": "Give me the name of all the actors from Afghanistan",
      "fold": 1,
      "id": 106,
      "template": 10
    },
    {
      "question": "Find all movies directed by \" Steven Spielberg \" after 2006",
      "fold": 1,
      "id": 107,
      "template": 11
    },
    {
      "question": "Who is directed the latest movie by \" NBC Universal \"",
      "fold": 1,
      "id": 108,
      "template": 12
    },
    {
      "question": "find the number of actors from Iran who played in \" Jim Jarmusch \" movies",
      "fold": 1,
      "id": 109,
      "template": 13
    },
    {
      "question": "Who directed the movie \" Inglourious Basterds \" ?",
      "fold": 1,
      "id": 110,
      "template": 14
    },
    {
      "question": "How many movies were produced in the year 2012 ?",
      "fold": 1,
      "id": 111,
      "template": 15
    },
    {
      "question": "Find all movies written by \" Matt Damon \"",
      "fold": 1,
      "id": 112,
      "template": 16
    },
    {
      "question": "Find all movies that star both \" Angelina Jolie \" and \" Brad Pitt \"",
      "fold": 1,
      "id": 113,
      "template": 17
    },
    {
      "question": "What is the maximum number of movies in which \" Brad Pitt \" act in a given year ?",
      "fold": 1,
      "id": 114,
      "template": 18
    },
    {
      "question": "Find the actors who played in the latest movie by \" Quentin Tarantino \"",
      "fold": 1,
      "id": 115,
      "template": 19
    },
    {
      "question": "Find all movies produced in 2015",
      "fold": 1,
      "id": 116,
      "template": 20
    },
    {
      "question": "What is the number of movies featuring \" Brad Pitt \" ?",
      "fold": 1,
      "id": 117,
      "template": 21
    },
    {
      "question": "How many movies did \" Alfred Hitchcock \" direct ?",
      "fold": 1,
      "id": 118,
      "template": 22
    },
    {
      "question": "Which movie had the character \" Daffy Duck \"",
      "fold": 1,
      "id": 119,
      "template": 23
    },
    {
      "question": "Find the directors of all movies featuring \" Kate Winslet \"",
      "fold": 1,
      "id": 120,
      "template": 24
    },
    {
      "question": "Find all actors who acted in the same movie as \" Tom Hanks \"",
      "fold": 1,
      "id": 121,
      "template": 25
    },
    {
      "question": "Find all movies about Iraq war",
      "fold": 1,
      "id": 122,
      "template": 26
    },
    {
      "question": "How many actors were born in \" Los Angeles \" after 2000 ?",
      "fold": 1,
      "id": 123,
      "template": 27
    },
    {
      "question": "Find all movies produced by Netflix",
      "fold": 1,
      "id": 124,
      "template": 28
    },
    {
      "question": "Where is the birth place of \" Kevin Spacey \"",
      "fold": 1,
      "id": 125,
      "template": 29
    },
    {
      "question": "Find all actors from Italy",
      "fold": 1,
      "id": 126,
      "template": 30
    },
    {
      "question": "Find the actor who played \" Captain Miller \" in the movie \" Saving Private Ryan \"",
      "fold": 1,
      "id": 127,
      "template": 31
    }
  ]
}